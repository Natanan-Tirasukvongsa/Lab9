
Lab9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008be0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  08008d80  08008d80  00018d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009494  08009494  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009494  08009494  00019494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800949c  0800949c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800949c  0800949c  0001949c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094a0  080094a0  000194a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080094a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  200001e0  08009684  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  08009684  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099bc  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6d  00000000  00000000  00029bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0002b640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002be00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166bd  00000000  00000000  0002c528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000087eb  00000000  00000000  00042be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087000  00000000  00000000  0004b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d23d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000342c  00000000  00000000  000d2424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d68 	.word	0x08008d68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08008d68 	.word	0x08008d68

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001002:	f000 ff77 	bl	8001ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001006:	f000 f831 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100a:	f000 f8eb 	bl	80011e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800100e:	f000 f8c1 	bl	8001194 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001012:	f000 f895 	bl	8001140 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //initail data
  UART2.huart = &huart2;
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <main+0x64>)
 8001018:	4a12      	ldr	r2, [pc, #72]	; (8001064 <main+0x68>)
 800101a:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;//array
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <main+0x64>)
 800101e:	22ff      	movs	r2, #255	; 0xff
 8001020:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <main+0x64>)
 8001024:	22ff      	movs	r2, #255	; 0xff
 8001026:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2); //pointer เพื่อสามารถแก้ค่าใน structure ได้เพราะ call by reference
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <main+0x64>)
 800102a:	f000 f94b 	bl	80012c4 <UARTInit>
  UARTResetStart(&UART2);
 800102e:	480c      	ldr	r0, [pc, #48]	; (8001060 <main+0x64>)
 8001030:	f000 f970 	bl	8001314 <UARTResetStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //เก็บข้อมูล
	  //อ่านข้อมูลทีละ byte (8 bits)
	  int16_t inputChar = UARTReadChar(&UART2);
 8001034:	480a      	ldr	r0, [pc, #40]	; (8001060 <main+0x64>)
 8001036:	f000 f991 	bl	800135c <UARTReadChar>
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
	  		if (inputChar != -1) //มีตัวอักษรใหม่เข้ามา
 800103e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001046:	d006      	beq.n	8001056 <main+0x5a>
	  			char temp[32];
	  			sprintf(temp, "Recived [%d]\r\n", inputChar);
	  			UARTTxWrite(&UART2, (uint8_t*) temp, strlen(temp));
	  #else
	  			//protocol
	  			DynamixelProtocal2(MainMemory, 1, inputChar, &UART2);
 8001048:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <main+0x64>)
 800104e:	2101      	movs	r1, #1
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <main+0x6c>)
 8001052:	f000 fa45 	bl	80014e0 <DynamixelProtocal2>
	  		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  		//ส่งข้อมูลค้าง
	  		UARTTxDumpBuffer(&UART2);
 8001056:	4802      	ldr	r0, [pc, #8]	; (8001060 <main+0x64>)
 8001058:	f000 f9aa 	bl	80013b0 <UARTTxDumpBuffer>
  {
 800105c:	e7ea      	b.n	8001034 <main+0x38>
 800105e:	bf00      	nop
 8001060:	200001fc 	.word	0x200001fc
 8001064:	200004f0 	.word	0x200004f0
 8001068:	20000214 	.word	0x20000214

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	; 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fa50 	bl	8004520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <SystemClock_Config+0xcc>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a27      	ldr	r2, [pc, #156]	; (8001138 <SystemClock_Config+0xcc>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <SystemClock_Config+0xcc>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <SystemClock_Config+0xd0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a21      	ldr	r2, [pc, #132]	; (800113c <SystemClock_Config+0xd0>)
 80010b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <SystemClock_Config+0xd0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c8:	2302      	movs	r3, #2
 80010ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d0:	2310      	movs	r3, #16
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d4:	2302      	movs	r3, #2
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d8:	2300      	movs	r3, #0
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010dc:	2310      	movs	r3, #16
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010e6:	2304      	movs	r3, #4
 80010e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ea:	2304      	movs	r3, #4
 80010ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 fe22 	bl	8002d3c <HAL_RCC_OscConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010fe:	f000 fccb 	bl	8001a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	230f      	movs	r3, #15
 8001104:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001106:	2302      	movs	r3, #2
 8001108:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2102      	movs	r1, #2
 800111e:	4618      	mov	r0, r3
 8001120:	f002 f884 	bl	800322c <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800112a:	f000 fcb5 	bl	8001a98 <Error_Handler>
  }
}
 800112e:	bf00      	nop
 8001130:	3750      	adds	r7, #80	; 0x50
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_USART2_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001178:	f002 fa54 	bl	8003624 <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f000 fc89 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200004f0 	.word	0x200004f0
 8001190:	40004400 	.word	0x40004400

08001194 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_DMA_Init+0x4c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <MX_DMA_Init+0x4c>)
 80011a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <MX_DMA_Init+0x4c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2010      	movs	r0, #16
 80011bc:	f000 ffe7 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011c0:	2010      	movs	r0, #16
 80011c2:	f001 f800 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	2011      	movs	r0, #17
 80011cc:	f000 ffdf 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80011d0:	2011      	movs	r0, #17
 80011d2:	f000 fff8 	bl	80021c6 <HAL_NVIC_EnableIRQ>

}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800

080011e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a2c      	ldr	r2, [pc, #176]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <MX_GPIO_Init+0xd0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <MX_GPIO_Init+0xd0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a25      	ldr	r2, [pc, #148]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <MX_GPIO_Init+0xd0>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2120      	movs	r1, #32
 800126e:	4812      	ldr	r0, [pc, #72]	; (80012b8 <MX_GPIO_Init+0xd4>)
 8001270:	f001 fd4a 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <MX_GPIO_Init+0xd8>)
 800127c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <MX_GPIO_Init+0xdc>)
 800128a:	f001 fbb9 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800128e:	2320      	movs	r3, #32
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_GPIO_Init+0xd4>)
 80012a6:	f001 fbab 	bl	8002a00 <HAL_GPIO_Init>

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	10210000 	.word	0x10210000
 80012c0:	40020800 	.word	0x40020800

080012c4 <UARTInit>:

/* USER CODE BEGIN 4 */
//initial ค่าตัวแปรต่าง ๆ ที่สร้างใน structure แลัประกาศ array
//prepare to keep data Rx Tx
void UARTInit(UARTStucrture *uart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	//การสร้างarray หลังcompile สามารถเปลี่ยน size ได้เมื่อมี memory พอ
	//calloc return ออกมาเป็น ตำแหน่งของpointer ที่จอง memoryไว้ให้
	//if memory is not enough , it will be error
	//ถ้า calloc บ่อย ๆ จะจอง memory เรื่อย ๆ ทำให้เปลืองและ error ภายหลัง แก้โดยใช้ free
	//กรณีนี้ใช้เพื่อให้ array เปลี่ยนขนาด ตัวเลขได้
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <UARTInit+0x4c>)
 80012ce:	88db      	ldrh	r3, [r3, #6]
 80012d0:	4619      	mov	r1, r3
 80012d2:	2001      	movs	r0, #1
 80012d4:	f003 f8e4 	bl	80044a0 <calloc>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <UARTInit+0x4c>)
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	4619      	mov	r1, r3
 80012e6:	2001      	movs	r0, #1
 80012e8:	f003 f8da 	bl	80044a0 <calloc>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0; //ตำแหน่งแรกคือตำแหน่งที่ 0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	81da      	strh	r2, [r3, #14]

}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200001fc 	.word	0x200001fc

08001314 <UARTResetStart>:

//start recieve DMA
//ข้อมูลถูกโยนเข้ามาใน buffer
void UARTResetStart(UARTStucrture *uart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	//uart2, rxbuffer, size = rxlen
	//uart structure -> uart2->UARTResetStart->HAL_UART_Receive_DMA->uart
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6919      	ldr	r1, [r3, #16]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	88db      	ldrh	r3, [r3, #6]
 8001328:	461a      	mov	r2, r3
 800132a:	f002 fa35 	bl	8003798 <HAL_UART_Receive_DMA>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <UARTGetRxHead>:

//หาตำแหน่ง pointer ที่เป็น head
//ตำแหน่งที่ DMA ทำงาน
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	//ขนาดทั้งหมด - จำนวนที่เหลือ = ตำแหน่งที่อยู่
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	88db      	ldrh	r3, [r3, #6]
 8001342:	461a      	mov	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	1ad3      	subs	r3, r2, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <UARTReadChar>:

//read character
//นั่งอ่าน tailไล่ตาม head rx
int16_t UARTReadChar(UARTStucrture *uart)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	//check ว่ามีข้อมูลใหม่เข้ามาไหม
	int16_t Result = -1; // -1 Mean no new data
 8001364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001368:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart)) //ตำแหน่ง head != tail แสดงว่ามีข้อมูลใหม่
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	8a9b      	ldrh	r3, [r3, #20]
 800136e:	461c      	mov	r4, r3
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ffe0 	bl	8001336 <UARTGetRxHead>
 8001376:	4603      	mov	r3, r0
 8001378:	429c      	cmp	r4, r3
 800137a:	d013      	beq.n	80013a4 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail]; //buffer ช่องที่ tail อยู่
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	8a92      	ldrh	r2, [r2, #20]
 8001384:	4413      	add	r3, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen; //เลื่อนตำแหน่งไป 1 %เพื่อเวลา tail เกินจะกลับมาช่องเดิม
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	8a9b      	ldrh	r3, [r3, #20]
 800138e:	3301      	adds	r3, #1
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	88d2      	ldrh	r2, [r2, #6]
 8001394:	fb93 f1f2 	sdiv	r1, r3, r2
 8001398:	fb02 f201 	mul.w	r2, r2, r1
 800139c:	1a9b      	subs	r3, r3, r2
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 80013a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <UARTTxDumpBuffer>:

//ส่งข้อมูลให้ dma
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	//MultiProcessBlocker ใช้ในกรณีที่ uart tx dump buffer ไปไว้ใน interrupt ตอนที่ tx เสร็จแล้ว
	//ข้อมูลไหนที่ยังไม่ถูกเขียนหรือค้างไว้จะเขียนต่อเลย
	//มีโอกาสที่จะทำงานฟังก์ชั่นนี้ซ้ำกันของ UARTTxWriteและ interrupt

	//จึงมี MultiProcessBlocker เช็คว่าฟังก์ชั่นนี้ทำงานอยู่หรือไม่ จะได้ไม่ call ซ้ำซ้อน
	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	d13d      	bne.n	8001442 <UARTTxDumpBuffer+0x92>
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <UARTTxDumpBuffer+0x9c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d139      	bne.n	8001442 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <UARTTxDumpBuffer+0x9c>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	89da      	ldrh	r2, [r3, #14]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	899b      	ldrh	r3, [r3, #12]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d02d      	beq.n	800143c <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			//buffer อยู่ตำแหน่งไหน ต้องส่งจุดไหนไปจุดไหน
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	89da      	ldrh	r2, [r3, #14]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d906      	bls.n	80013fa <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	89da      	ldrh	r2, [r3, #14]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	e005      	b.n	8001406 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	889a      	ldrh	r2, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	b29b      	uxth	r3, r3
 8001406:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			//transmit DMA, บอกตำแหน่งเริ่มต้น , ความยาวที่ต้องส่ง
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	8992      	ldrh	r2, [r2, #12]
 8001414:	4413      	add	r3, r2
 8001416:	89fa      	ldrh	r2, [r7, #14]
 8001418:	4619      	mov	r1, r3
 800141a:	f002 f951 	bl	80036c0 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	899b      	ldrh	r3, [r3, #12]
 8001422:	461a      	mov	r2, r3
 8001424:	89fb      	ldrh	r3, [r7, #14]
 8001426:	4413      	add	r3, r2
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	8892      	ldrh	r2, [r2, #4]
 800142c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001430:	fb02 f201 	mul.w	r2, r2, r1
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	b29a      	uxth	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <UARTTxDumpBuffer+0x9c>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	}
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000313 	.word	0x20000313

08001450 <UARTTxWrite>:

//write data in buffer
//ไม่ได้ส่งให้ dma
//รับ pointer data ว่าจะเขียนอะไรบ้าง กับความยาว string ที่ต้องการเขียน
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	4613      	mov	r3, r2
 800145c:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	//check ว่าข้อมูล เกิน buffer รึเปล่า
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	889b      	ldrh	r3, [r3, #4]
 8001462:	88fa      	ldrh	r2, [r7, #6]
 8001464:	4293      	cmp	r3, r2
 8001466:	bf28      	it	cs
 8001468:	4613      	movcs	r3, r2
 800146a:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 800146c:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	889b      	ldrh	r3, [r3, #4]
 8001472:	4619      	mov	r1, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	89db      	ldrh	r3, [r3, #14]
 8001478:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 800147a:	4293      	cmp	r3, r2
 800147c:	bfa8      	it	ge
 800147e:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8001480:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	//ถ้าเกินขนาด buffer จะ copy ข้อมูลที่เกินไป buffer ที่เตรียมไว้
	//memcpy = copy array เร็ว ๆ
	//array ที่ต้องการ copy , array ที่ต้องการโยนข้อมูลใส่ไป, จำนวนข้อมูลที่ต้องการ copy
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	89d2      	ldrh	r2, [r2, #14]
 800148a:	4413      	add	r3, r2
 800148c:	8aba      	ldrh	r2, [r7, #20]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	4618      	mov	r0, r3
 8001492:	f003 f837 	bl	8004504 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	89db      	ldrh	r3, [r3, #14]
 800149a:	461a      	mov	r2, r3
 800149c:	8afb      	ldrh	r3, [r7, #22]
 800149e:	4413      	add	r3, r2
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	8892      	ldrh	r2, [r2, #4]
 80014a4:	fb93 f1f2 	sdiv	r1, r3, r2
 80014a8:	fb02 f201 	mul.w	r2, r2, r1
 80014ac:	1a9b      	subs	r3, r3, r2
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 80014b4:	8afa      	ldrh	r2, [r7, #22]
 80014b6:	8abb      	ldrh	r3, [r7, #20]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d00a      	beq.n	80014d2 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6898      	ldr	r0, [r3, #8]
 80014c0:	8abb      	ldrh	r3, [r7, #20]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 80014c6:	8afa      	ldrh	r2, [r7, #22]
 80014c8:	8abb      	ldrh	r3, [r7, #20]
 80014ca:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80014cc:	461a      	mov	r2, r3
 80014ce:	f003 f819 	bl	8004504 <memcpy>
	}

	//call function
	UARTTxDumpBuffer(uart);
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f7ff ff6c 	bl	80013b0 <UARTTxDumpBuffer>

}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <DynamixelProtocal2>:
//Motor ID = ID motor แต่ละตัว
//dataIn ได้มาจาก inputchar
//UARTStucrture *uart = uart2 ใช้ในการตอบกลับส่งข้อมูล
void DynamixelProtocal2(uint8_t *Memory, uint8_t MotorID, int16_t dataIn,
		UARTStucrture *uart)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b09c      	sub	sp, #112	; 0x70
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	72fb      	strb	r3, [r7, #11]
 80014ee:	4613      	mov	r3, r2
 80014f0:	813b      	strh	r3, [r7, #8]
	static uint16_t CRCCheck = 0;
	static uint16_t packetSize = 0;
	static uint16_t CRC_accum;

	//State Machine
	switch (State)
 80014f2:	4b9b      	ldr	r3, [pc, #620]	; (8001760 <DynamixelProtocal2+0x280>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b0a      	cmp	r3, #10
 80014f8:	f200 8269 	bhi.w	80019ce <DynamixelProtocal2+0x4ee>
 80014fc:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <DynamixelProtocal2+0x24>)
 80014fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001502:	bf00      	nop
 8001504:	08001531 	.word	0x08001531
 8001508:	08001543 	.word	0x08001543
 800150c:	0800155b 	.word	0x0800155b
 8001510:	0800157d 	.word	0x0800157d
 8001514:	08001595 	.word	0x08001595
 8001518:	080015cb 	.word	0x080015cb
 800151c:	080015dd 	.word	0x080015dd
 8001520:	080015fb 	.word	0x080015fb
 8001524:	0800160b 	.word	0x0800160b
 8001528:	0800163b 	.word	0x0800163b
 800152c:	08001677 	.word	0x08001677
	{
	case DNMXP_idle:
		if (dataIn == 0xFF) //data เข้ามาเป็น FF
 8001530:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001534:	2bff      	cmp	r3, #255	; 0xff
 8001536:	f040 8247 	bne.w	80019c8 <DynamixelProtocal2+0x4e8>
			State = DNMXP_1stHeader;
 800153a:	4b89      	ldr	r3, [pc, #548]	; (8001760 <DynamixelProtocal2+0x280>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
		break;
 8001540:	e242      	b.n	80019c8 <DynamixelProtocal2+0x4e8>
	case DNMXP_1stHeader:
		if (dataIn == 0xFF)
 8001542:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001546:	2bff      	cmp	r3, #255	; 0xff
 8001548:	d103      	bne.n	8001552 <DynamixelProtocal2+0x72>
			State = DNMXP_2ndHeader;
 800154a:	4b85      	ldr	r3, [pc, #532]	; (8001760 <DynamixelProtocal2+0x280>)
 800154c:	2202      	movs	r2, #2
 800154e:	701a      	strb	r2, [r3, #0]
		else
			State = DNMXP_idle;
		break;
 8001550:	e23d      	b.n	80019ce <DynamixelProtocal2+0x4ee>
			State = DNMXP_idle;
 8001552:	4b83      	ldr	r3, [pc, #524]	; (8001760 <DynamixelProtocal2+0x280>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
		break;
 8001558:	e239      	b.n	80019ce <DynamixelProtocal2+0x4ee>
	case DNMXP_2ndHeader:
		if (dataIn == 0xFD)
 800155a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800155e:	2bfd      	cmp	r3, #253	; 0xfd
 8001560:	d103      	bne.n	800156a <DynamixelProtocal2+0x8a>
			State = DNMXP_3rdHeader;
 8001562:	4b7f      	ldr	r3, [pc, #508]	; (8001760 <DynamixelProtocal2+0x280>)
 8001564:	2203      	movs	r2, #3
 8001566:	701a      	strb	r2, [r3, #0]
		else if (dataIn == 0xFF)
			; //do nothing
		else
			State = DNMXP_idle;
		break;
 8001568:	e230      	b.n	80019cc <DynamixelProtocal2+0x4ec>
		else if (dataIn == 0xFF)
 800156a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800156e:	2bff      	cmp	r3, #255	; 0xff
 8001570:	f000 822c 	beq.w	80019cc <DynamixelProtocal2+0x4ec>
			State = DNMXP_idle;
 8001574:	4b7a      	ldr	r3, [pc, #488]	; (8001760 <DynamixelProtocal2+0x280>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
		break;
 800157a:	e227      	b.n	80019cc <DynamixelProtocal2+0x4ec>
	case DNMXP_3rdHeader:
		if (dataIn == 0x00)
 800157c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d103      	bne.n	800158c <DynamixelProtocal2+0xac>
			State = DNMXP_Reserved;
 8001584:	4b76      	ldr	r3, [pc, #472]	; (8001760 <DynamixelProtocal2+0x280>)
 8001586:	2204      	movs	r2, #4
 8001588:	701a      	strb	r2, [r3, #0]
		else
			State = DNMXP_idle;
		break;
 800158a:	e220      	b.n	80019ce <DynamixelProtocal2+0x4ee>
			State = DNMXP_idle;
 800158c:	4b74      	ldr	r3, [pc, #464]	; (8001760 <DynamixelProtocal2+0x280>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
		break;
 8001592:	e21c      	b.n	80019ce <DynamixelProtocal2+0x4ee>
	case DNMXP_Reserved: //check ID motor
		//วิธีนี้ดีคือ switch case ไม่วิ่งไปไกล แต่ข้อเสียอาจทำให้ เกิดการผิดพลาดของการเรียง switch case
		if ((dataIn == MotorID) | (dataIn == 0xFE)) //broadcast ID = 0xFE ID สำหรับการกระจายให้กับ dynamixel หลายๆตัว
 8001594:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001598:	7afb      	ldrb	r3, [r7, #11]
 800159a:	429a      	cmp	r2, r3
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80015a8:	2bfe      	cmp	r3, #254	; 0xfe
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <DynamixelProtocal2+0xe2>
			State = DNMXP_ID;
 80015ba:	4b69      	ldr	r3, [pc, #420]	; (8001760 <DynamixelProtocal2+0x280>)
 80015bc:	2205      	movs	r2, #5
 80015be:	701a      	strb	r2, [r3, #0]
		else
			State = DNMXP_idle; //ID ไม่ตรง
		break;
 80015c0:	e205      	b.n	80019ce <DynamixelProtocal2+0x4ee>
			State = DNMXP_idle; //ID ไม่ตรง
 80015c2:	4b67      	ldr	r3, [pc, #412]	; (8001760 <DynamixelProtocal2+0x280>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
		break;
 80015c8:	e201      	b.n	80019ce <DynamixelProtocal2+0x4ee>
	case DNMXP_ID:
		datalen = dataIn & 0xFF; //data len low
 80015ca:	893b      	ldrh	r3, [r7, #8]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b64      	ldr	r3, [pc, #400]	; (8001764 <DynamixelProtocal2+0x284>)
 80015d2:	801a      	strh	r2, [r3, #0]
		State = DNMXP_LEN1;
 80015d4:	4b62      	ldr	r3, [pc, #392]	; (8001760 <DynamixelProtocal2+0x280>)
 80015d6:	2206      	movs	r2, #6
 80015d8:	701a      	strb	r2, [r3, #0]
		break;
 80015da:	e1f8      	b.n	80019ce <DynamixelProtocal2+0x4ee>
	case DNMXP_LEN1:
		datalen |= (dataIn & 0xFF) << 8; //data len high
 80015dc:	893b      	ldrh	r3, [r7, #8]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	4b60      	ldr	r3, [pc, #384]	; (8001764 <DynamixelProtocal2+0x284>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b5d      	ldr	r3, [pc, #372]	; (8001764 <DynamixelProtocal2+0x284>)
 80015f0:	801a      	strh	r2, [r3, #0]
		State = DNMXP_LEN2;
 80015f2:	4b5b      	ldr	r3, [pc, #364]	; (8001760 <DynamixelProtocal2+0x280>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	701a      	strb	r2, [r3, #0]
		break;
 80015f8:	e1e9      	b.n	80019ce <DynamixelProtocal2+0x4ee>
	case DNMXP_LEN2:
		inst = dataIn; //keep instruction
 80015fa:	893b      	ldrh	r3, [r7, #8]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4b5a      	ldr	r3, [pc, #360]	; (8001768 <DynamixelProtocal2+0x288>)
 8001600:	701a      	strb	r2, [r3, #0]
		State = DNMXP_Inst;
 8001602:	4b57      	ldr	r3, [pc, #348]	; (8001760 <DynamixelProtocal2+0x280>)
 8001604:	2208      	movs	r2, #8
 8001606:	701a      	strb	r2, [r3, #0]
		break;
 8001608:	e1e1      	b.n	80019ce <DynamixelProtocal2+0x4ee>
	case DNMXP_Inst:
		//3 = crc1+crc2+inst
		//ความยาวของ parameter ทั้งหมด + 3 =datalen
		if (datalen > 3) //len >3 คือมี parameter ให้เก็บ
 800160a:	4b56      	ldr	r3, [pc, #344]	; (8001764 <DynamixelProtocal2+0x284>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	2b03      	cmp	r3, #3
 8001610:	d90a      	bls.n	8001628 <DynamixelProtocal2+0x148>
		{
			parameter[0] = dataIn; //first parameter
 8001612:	893b      	ldrh	r3, [r7, #8]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b55      	ldr	r3, [pc, #340]	; (800176c <DynamixelProtocal2+0x28c>)
 8001618:	701a      	strb	r2, [r3, #0]
			CollectedData = 1; //inst 1 + para[0] 1
 800161a:	4b55      	ldr	r3, [pc, #340]	; (8001770 <DynamixelProtocal2+0x290>)
 800161c:	2201      	movs	r2, #1
 800161e:	801a      	strh	r2, [r3, #0]
			State = DNMXP_ParameterCollect;
 8001620:	4b4f      	ldr	r3, [pc, #316]	; (8001760 <DynamixelProtocal2+0x280>)
 8001622:	2209      	movs	r2, #9
 8001624:	701a      	strb	r2, [r3, #0]
		{
			CRCCheck = dataIn & 0xff;
			State = DNMXP_CRCAndExecute; //check crc
		}

		break;
 8001626:	e1d2      	b.n	80019ce <DynamixelProtocal2+0x4ee>
			CRCCheck = dataIn & 0xff;
 8001628:	893b      	ldrh	r3, [r7, #8]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	b29a      	uxth	r2, r3
 800162e:	4b51      	ldr	r3, [pc, #324]	; (8001774 <DynamixelProtocal2+0x294>)
 8001630:	801a      	strh	r2, [r3, #0]
			State = DNMXP_CRCAndExecute; //check crc
 8001632:	4b4b      	ldr	r3, [pc, #300]	; (8001760 <DynamixelProtocal2+0x280>)
 8001634:	220a      	movs	r2, #10
 8001636:	701a      	strb	r2, [r3, #0]
		break;
 8001638:	e1c9      	b.n	80019ce <DynamixelProtocal2+0x4ee>
	case DNMXP_ParameterCollect:
		//เก็บครบทุก parameer
		if (datalen-3 > CollectedData)
 800163a:	4b4a      	ldr	r3, [pc, #296]	; (8001764 <DynamixelProtocal2+0x284>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	3b03      	subs	r3, #3
 8001640:	4a4b      	ldr	r2, [pc, #300]	; (8001770 <DynamixelProtocal2+0x290>)
 8001642:	8812      	ldrh	r2, [r2, #0]
 8001644:	4293      	cmp	r3, r2
 8001646:	dd0d      	ble.n	8001664 <DynamixelProtocal2+0x184>
		{
			parameter[CollectedData] = dataIn;
 8001648:	4b49      	ldr	r3, [pc, #292]	; (8001770 <DynamixelProtocal2+0x290>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	893b      	ldrh	r3, [r7, #8]
 8001650:	b2d9      	uxtb	r1, r3
 8001652:	4b46      	ldr	r3, [pc, #280]	; (800176c <DynamixelProtocal2+0x28c>)
 8001654:	5499      	strb	r1, [r3, r2]
			CollectedData++;
 8001656:	4b46      	ldr	r3, [pc, #280]	; (8001770 <DynamixelProtocal2+0x290>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	4b44      	ldr	r3, [pc, #272]	; (8001770 <DynamixelProtocal2+0x290>)
 8001660:	801a      	strh	r2, [r3, #0]
		else
		{
			CRCCheck = dataIn & 0xff; //crc low
			State = DNMXP_CRCAndExecute;
		}
		break;
 8001662:	e1b4      	b.n	80019ce <DynamixelProtocal2+0x4ee>
			CRCCheck = dataIn & 0xff; //crc low
 8001664:	893b      	ldrh	r3, [r7, #8]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	b29a      	uxth	r2, r3
 800166a:	4b42      	ldr	r3, [pc, #264]	; (8001774 <DynamixelProtocal2+0x294>)
 800166c:	801a      	strh	r2, [r3, #0]
			State = DNMXP_CRCAndExecute;
 800166e:	4b3c      	ldr	r3, [pc, #240]	; (8001760 <DynamixelProtocal2+0x280>)
 8001670:	220a      	movs	r2, #10
 8001672:	701a      	strb	r2, [r3, #0]
		break;
 8001674:	e1ab      	b.n	80019ce <DynamixelProtocal2+0x4ee>
	case DNMXP_CRCAndExecute: //crc ที่รับได้และที่มีตรงกนไหม
		CRCCheck |= (dataIn & 0xff) << 8; //รับcrc ตัวสุดท้าย //crc high
 8001676:	893b      	ldrh	r3, [r7, #8]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	b21a      	sxth	r2, r3
 800167c:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <DynamixelProtocal2+0x294>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	b21b      	sxth	r3, r3
 8001682:	4313      	orrs	r3, r2
 8001684:	b21b      	sxth	r3, r3
 8001686:	b29a      	uxth	r2, r3
 8001688:	4b3a      	ldr	r3, [pc, #232]	; (8001774 <DynamixelProtocal2+0x294>)
 800168a:	801a      	strh	r2, [r3, #0]
		//Check CRC
		CRC_accum = 0;
 800168c:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <DynamixelProtocal2+0x298>)
 800168e:	2200      	movs	r2, #0
 8001690:	801a      	strh	r2, [r3, #0]
		packetSize = datalen + 7; //H1 H2 H3 rsv ID CRC1 CRC2
 8001692:	4b34      	ldr	r3, [pc, #208]	; (8001764 <DynamixelProtocal2+0x284>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	3307      	adds	r3, #7
 8001698:	b29a      	uxth	r2, r3
 800169a:	4b38      	ldr	r3, [pc, #224]	; (800177c <DynamixelProtocal2+0x29c>)
 800169c:	801a      	strh	r2, [r3, #0]
		//check overlapse buffer
		if (uart->RxTail - packetSize >= 0) //not overlapse //packgage ไม่ถูกตัดตอน
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	8a9b      	ldrh	r3, [r3, #20]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b35      	ldr	r3, [pc, #212]	; (800177c <DynamixelProtocal2+0x29c>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	db16      	blt.n	80016dc <DynamixelProtocal2+0x1fc>
		{
			//add data crc
			//ข้อมูลที่รับเข้ามาทั้งหมดใส่ crc
			//data keep in ring buffer of uart
			//tail ตำแหน่ง array
			CRC_accum = update_crc(CRC_accum,
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <DynamixelProtocal2+0x298>)
 80016b0:	8818      	ldrh	r0, [r3, #0]
					&(uart->RxBuffer[uart->RxTail - packetSize]), //ตำแหน่งปัจจุบัน - packgage = อ่านข้อมูลย้อนหลังตาม buffer รับข้อมูลทั้งหมด
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	8a92      	ldrh	r2, [r2, #20]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4a2f      	ldr	r2, [pc, #188]	; (800177c <DynamixelProtocal2+0x29c>)
 80016be:	8812      	ldrh	r2, [r2, #0]
 80016c0:	1a8a      	subs	r2, r1, r2
 80016c2:	1899      	adds	r1, r3, r2
			CRC_accum = update_crc(CRC_accum,
 80016c4:	4b2d      	ldr	r3, [pc, #180]	; (800177c <DynamixelProtocal2+0x29c>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	3b02      	subs	r3, #2
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	f000 f995 	bl	80019fc <update_crc>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b28      	ldr	r3, [pc, #160]	; (8001778 <DynamixelProtocal2+0x298>)
 80016d8:	801a      	strh	r2, [r3, #0]
 80016da:	e02d      	b.n	8001738 <DynamixelProtocal2+0x258>
					packetSize - 2);
		}
		else//overlapse //overflow
			//มีโอกาสที่packgage ถูกตัดไปเริ่มต้นที่ตำแหน่ง 0
		{
			uint16_t firstPartStart = uart->RxTail - packetSize + uart->RxLen;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	8a9a      	ldrh	r2, [r3, #20]
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <DynamixelProtocal2+0x29c>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	88db      	ldrh	r3, [r3, #6]
 80016ec:	4413      	add	r3, r2
 80016ee:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			CRC_accum = update_crc(CRC_accum, &(uart->RxBuffer[firstPartStart]),
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <DynamixelProtocal2+0x298>)
 80016f4:	8818      	ldrh	r0, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80016fe:	18d1      	adds	r1, r2, r3
					uart->RxLen - firstPartStart);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	88da      	ldrh	r2, [r3, #6]
			CRC_accum = update_crc(CRC_accum, &(uart->RxBuffer[firstPartStart]),
 8001704:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	b29b      	uxth	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	f000 f975 	bl	80019fc <update_crc>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <DynamixelProtocal2+0x298>)
 8001718:	801a      	strh	r2, [r3, #0]
			CRC_accum = update_crc(CRC_accum, uart->RxBuffer, uart->RxTail - 2);
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <DynamixelProtocal2+0x298>)
 800171c:	8818      	ldrh	r0, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6919      	ldr	r1, [r3, #16]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	8a9b      	ldrh	r3, [r3, #20]
 8001726:	3b02      	subs	r3, #2
 8001728:	b29b      	uxth	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	f000 f966 	bl	80019fc <update_crc>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <DynamixelProtocal2+0x298>)
 8001736:	801a      	strh	r2, [r3, #0]

		}

		if (CRC_accum == CRCCheck) //crc ที่คำนวน เท่ากับที่เก็บได้
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <DynamixelProtocal2+0x298>)
 800173a:	881a      	ldrh	r2, [r3, #0]
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <DynamixelProtocal2+0x294>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	f040 8117 	bne.w	8001974 <DynamixelProtocal2+0x494>
		{ //ถ้าตรงกัน packgage is valid
			//inst = instruction ตัวที่บอกว่า package นี้ต้องทำอะไร
			switch (inst)
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <DynamixelProtocal2+0x288>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b03      	cmp	r3, #3
 800174c:	f000 809e 	beq.w	800188c <DynamixelProtocal2+0x3ac>
 8001750:	2b03      	cmp	r3, #3
 8001752:	f300 80e5 	bgt.w	8001920 <DynamixelProtocal2+0x440>
 8001756:	2b01      	cmp	r3, #1
 8001758:	d012      	beq.n	8001780 <DynamixelProtocal2+0x2a0>
 800175a:	2b02      	cmp	r3, #2
 800175c:	d03a      	beq.n	80017d4 <DynamixelProtocal2+0x2f4>
 800175e:	e0df      	b.n	8001920 <DynamixelProtocal2+0x440>
 8001760:	20000314 	.word	0x20000314
 8001764:	20000316 	.word	0x20000316
 8001768:	20000318 	.word	0x20000318
 800176c:	2000031c 	.word	0x2000031c
 8001770:	2000041c 	.word	0x2000041c
 8001774:	2000041e 	.word	0x2000041e
 8001778:	20000420 	.word	0x20000420
 800177c:	20000422 	.word	0x20000422
			{
			case 0x01:// ping
			{
				//create packet template
				//H1 H2 H3 RSRV PACKET_ID LEN1 LEN2 INST ERR CRC1 CRC2
				uint8_t temp[] =
 8001780:	4a95      	ldr	r2, [pc, #596]	; (80019d8 <DynamixelProtocal2+0x4f8>)
 8001782:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001786:	ca07      	ldmia	r2, {r0, r1, r2}
 8001788:	c303      	stmia	r3!, {r0, r1}
 800178a:	801a      	strh	r2, [r3, #0]
 800178c:	3302      	adds	r3, #2
 800178e:	0c12      	lsrs	r2, r2, #16
 8001790:	701a      	strb	r2, [r3, #0]
				{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x04, 0x00, 0x55, 0x00, 0x00,0x00 };
				//config MotorID
				temp[4] = MotorID;
 8001792:	7afb      	ldrb	r3, [r7, #11]
 8001794:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
				//calcuate CRC สามารถคำนวนต่อเนื่องได้
				uint16_t crc_calc = update_crc(0, temp, 9);
 8001798:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800179c:	2209      	movs	r2, #9
 800179e:	4619      	mov	r1, r3
 80017a0:	2000      	movs	r0, #0
 80017a2:	f000 f92b 	bl	80019fc <update_crc>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				temp[9] = crc_calc & 0xff;
 80017ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
				temp[10] = (crc_calc >> 8) & 0xFF;
 80017b6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80017ba:	0a1b      	lsrs	r3, r3, #8
 80017bc:	b29b      	uxth	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				//Sent Response Packet
				UARTTxWrite(uart, temp, 11);
 80017c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017c8:	220b      	movs	r2, #11
 80017ca:	4619      	mov	r1, r3
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fe3f 	bl	8001450 <UARTTxWrite>
				break;
 80017d2:	e0f5      	b.n	80019c0 <DynamixelProtocal2+0x4e0>

			case 0x02://READ
			{
				//ตำแหน่งที่ต้องการอ่าน
				//parameter 0 + parameter 1
				uint16_t startAddr = (parameter[0]&0xFF)|(parameter[1]<<8 &0xFF); //low + high //0xFF filter 8 bit
 80017d4:	4b81      	ldr	r3, [pc, #516]	; (80019dc <DynamixelProtocal2+0x4fc>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

				//จำนวนช่อง array ที่ต้องการอ่าน
				//parameter 3 + parameter 4
				uint16_t numberOfDataToRead = (parameter[2]&0xFF)|(parameter[3]<<8 &0xFF);
 80017dc:	4b7f      	ldr	r3, [pc, #508]	; (80019dc <DynamixelProtocal2+0x4fc>)
 80017de:	789b      	ldrb	r3, [r3, #2]
 80017e0:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

				//ex 0x84 0x00 0x04 0x00 = ตำแหน่ง 84 อ่านไป 4 ตัว

				//packgage ตอบกลับ
				//H1 H2 H3 RSRV PACKET_ID LEN1 LEN2 INST ERR
				uint8_t temp[] = {0xff,0xff,0xfd,0x00,0x00,0x00,0x00,0x55,0x00};
 80017e4:	4a7e      	ldr	r2, [pc, #504]	; (80019e0 <DynamixelProtocal2+0x500>)
 80017e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ec:	c303      	stmia	r3!, {r0, r1}
 80017ee:	701a      	strb	r2, [r3, #0]
				temp[4] = MotorID;
 80017f0:	7afb      	ldrb	r3, [r7, #11]
 80017f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

				//จำนวนช่องที่ต้องการอ่าน
				// +inst+err+crc1+crc2
				temp[5] = (numberOfDataToRead + 4) & 0xff ; //len low
 80017f6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	3304      	adds	r3, #4
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				temp[6] = ((numberOfDataToRead + 4)>>8) & 0xff ; //len high
 8001804:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001808:	3304      	adds	r3, #4
 800180a:	121b      	asrs	r3, r3, #8
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				uint16_t crc_calc = update_crc(0, temp, 9); //crc H1-ERR
 8001812:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001816:	2209      	movs	r2, #9
 8001818:	4619      	mov	r1, r3
 800181a:	2000      	movs	r0, #0
 800181c:	f000 f8ee 	bl	80019fc <update_crc>
 8001820:	4603      	mov	r3, r0
 8001822:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				crc_calc = update_crc(crc_calc ,&(Memory[startAddr]),numberOfDataToRead); //คำนวน crc ต่อ //parameter
 8001826:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	18d1      	adds	r1, r2, r3
 800182e:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8001832:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f8e0 	bl	80019fc <update_crc>
 800183c:	4603      	mov	r3, r0
 800183e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				uint8_t crctemp[2];
				crctemp[0] = crc_calc&0xff;
 8001842:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				crctemp[1] = (crc_calc>>8)&0xff;
 800184c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	b29b      	uxth	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				//send temp
				UARTTxWrite(uart, temp,9);
 800185a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800185e:	2209      	movs	r2, #9
 8001860:	4619      	mov	r1, r3
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fdf4 	bl	8001450 <UARTTxWrite>

				//send data in memory from initial position
				UARTTxWrite(uart, &(Memory[startAddr]),numberOfDataToRead);
 8001868:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8001874:	4619      	mov	r1, r3
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fdea 	bl	8001450 <UARTTxWrite>

				//send crc
				UARTTxWrite(uart, crctemp,2);
 800187c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001880:	2202      	movs	r2, #2
 8001882:	4619      	mov	r1, r3
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fde3 	bl	8001450 <UARTTxWrite>
				break;
 800188a:	e099      	b.n	80019c0 <DynamixelProtocal2+0x4e0>
			}
			case 0x03://WRITE
			{
//				//LAB
//				//parameter 0 + parameter 1
				uint16_t startAddr = (parameter[0]&0xFF)|(parameter[1]<<8 &0xFF);
 800188c:	4b53      	ldr	r3, [pc, #332]	; (80019dc <DynamixelProtocal2+0x4fc>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

				//packgage ตอบกลับ
				//H1 H2 H3 RSRV PACKET_ID LEN1 LEN2 INST ERR
				uint8_t temp[] = {0xff,0xff,0xfd,0x00,0x00,0x04,0x00,0x55,0x00};
 8001894:	4a53      	ldr	r2, [pc, #332]	; (80019e4 <DynamixelProtocal2+0x504>)
 8001896:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800189a:	ca07      	ldmia	r2, {r0, r1, r2}
 800189c:	c303      	stmia	r3!, {r0, r1}
 800189e:	701a      	strb	r2, [r3, #0]
				temp[4] = MotorID;
 80018a0:	7afb      	ldrb	r3, [r7, #11]
 80018a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

				uint16_t crc_calc = update_crc(0, temp, 9);
 80018a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018aa:	2209      	movs	r2, #9
 80018ac:	4619      	mov	r1, r3
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f8a4 	bl	80019fc <update_crc>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				//crc_calc = update_crc(crc_calc ,&(Memory[startAddr]),9); //คำนวน crc ต่อ
				uint8_t crctemp[2];
				crctemp[0] = crc_calc&0xff;
 80018ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				crctemp[1] = (crc_calc>>8)&0xff;
 80018c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				//send temp
				UARTTxWrite(uart, temp,9);
 80018d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018d6:	2209      	movs	r2, #9
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fdb8 	bl	8001450 <UARTTxWrite>

				//send crc
				UARTTxWrite(uart, crctemp,2);
 80018e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e4:	2202      	movs	r2, #2
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fdb1 	bl	8001450 <UARTTxWrite>


				//0x74 +0x00 =116
				int i=0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	66fb      	str	r3, [r7, #108]	; 0x6c
				//all parameter - parameter[0] - parameter[1]
				for (i = 0; i < CollectedData-2; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018f6:	e00c      	b.n	8001912 <DynamixelProtocal2+0x432>
				{
					MainMemory[startAddr+i] = parameter[2+i];
 80018f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018fa:	1c9a      	adds	r2, r3, #2
 80018fc:	f8b7 1066 	ldrh.w	r1, [r7, #102]	; 0x66
 8001900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001902:	440b      	add	r3, r1
 8001904:	4935      	ldr	r1, [pc, #212]	; (80019dc <DynamixelProtocal2+0x4fc>)
 8001906:	5c89      	ldrb	r1, [r1, r2]
 8001908:	4a37      	ldr	r2, [pc, #220]	; (80019e8 <DynamixelProtocal2+0x508>)
 800190a:	54d1      	strb	r1, [r2, r3]
				for (i = 0; i < CollectedData-2; i++)
 800190c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800190e:	3301      	adds	r3, #1
 8001910:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001912:	4b36      	ldr	r3, [pc, #216]	; (80019ec <DynamixelProtocal2+0x50c>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	3b02      	subs	r3, #2
 8001918:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800191a:	429a      	cmp	r2, r3
 800191c:	dbec      	blt.n	80018f8 <DynamixelProtocal2+0x418>
				}

				break;
 800191e:	e04f      	b.n	80019c0 <DynamixelProtocal2+0x4e0>
			}

			default: //Unknown Inst
			{
				uint8_t temp[] =
 8001920:	4a33      	ldr	r2, [pc, #204]	; (80019f0 <DynamixelProtocal2+0x510>)
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	ca07      	ldmia	r2, {r0, r1, r2}
 8001928:	c303      	stmia	r3!, {r0, r1}
 800192a:	801a      	strh	r2, [r3, #0]
 800192c:	3302      	adds	r3, #2
 800192e:	0c12      	lsrs	r2, r2, #16
 8001930:	701a      	strb	r2, [r3, #0]
				{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x02, 0x00,
						0x00 };
				temp[4] = MotorID;
 8001932:	7afb      	ldrb	r3, [r7, #11]
 8001934:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				//package ใหม่ = 0
				uint16_t crc_calc = update_crc(0, temp, 9);
 8001938:	f107 0320 	add.w	r3, r7, #32
 800193c:	2209      	movs	r2, #9
 800193e:	4619      	mov	r1, r3
 8001940:	2000      	movs	r0, #0
 8001942:	f000 f85b 	bl	80019fc <update_crc>
 8001946:	4603      	mov	r3, r0
 8001948:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				temp[9] = crc_calc & 0xff;
 800194c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001950:	b2db      	uxtb	r3, r3
 8001952:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				temp[10] = (crc_calc >> 8) & 0xFF;
 8001956:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				UARTTxWrite(uart, temp, 11);
 8001964:	f107 0320 	add.w	r3, r7, #32
 8001968:	220b      	movs	r2, #11
 800196a:	4619      	mov	r1, r3
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff fd6f 	bl	8001450 <UARTTxWrite>

				break;
 8001972:	e025      	b.n	80019c0 <DynamixelProtocal2+0x4e0>
			}
			}
		}
		else //crc error
		{
			uint8_t temp[] =
 8001974:	4a1f      	ldr	r2, [pc, #124]	; (80019f4 <DynamixelProtocal2+0x514>)
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	ca07      	ldmia	r2, {r0, r1, r2}
 800197c:	c303      	stmia	r3!, {r0, r1}
 800197e:	801a      	strh	r2, [r3, #0]
 8001980:	3302      	adds	r3, #2
 8001982:	0c12      	lsrs	r2, r2, #16
 8001984:	701a      	strb	r2, [r3, #0]
			{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x03, 0x00, 0x00 };
			temp[4] = MotorID;
 8001986:	7afb      	ldrb	r3, [r7, #11]
 8001988:	763b      	strb	r3, [r7, #24]
			uint16_t crc_calc = update_crc(0, temp, 9);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	2209      	movs	r2, #9
 8001990:	4619      	mov	r1, r3
 8001992:	2000      	movs	r0, #0
 8001994:	f000 f832 	bl	80019fc <update_crc>
 8001998:	4603      	mov	r3, r0
 800199a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			temp[9] = crc_calc & 0xff;
 800199e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	777b      	strb	r3, [r7, #29]
			temp[10] = (crc_calc >> 8) & 0xFF;
 80019a6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80019aa:	0a1b      	lsrs	r3, r3, #8
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	77bb      	strb	r3, [r7, #30]
			UARTTxWrite(uart, temp, 11);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	220b      	movs	r2, #11
 80019b8:	4619      	mov	r1, r3
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff fd48 	bl	8001450 <UARTTxWrite>
		}
		State = DNMXP_idle;
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <DynamixelProtocal2+0x518>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
		break;
 80019c6:	e002      	b.n	80019ce <DynamixelProtocal2+0x4ee>
		break;
 80019c8:	bf00      	nop
 80019ca:	e000      	b.n	80019ce <DynamixelProtocal2+0x4ee>
		break;
 80019cc:	bf00      	nop
	}

}
 80019ce:	bf00      	nop
 80019d0:	3770      	adds	r7, #112	; 0x70
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	08008d80 	.word	0x08008d80
 80019dc:	2000031c 	.word	0x2000031c
 80019e0:	08008d8c 	.word	0x08008d8c
 80019e4:	08008d98 	.word	0x08008d98
 80019e8:	20000214 	.word	0x20000214
 80019ec:	2000041c 	.word	0x2000041c
 80019f0:	08008da4 	.word	0x08008da4
 80019f4:	08008db0 	.word	0x08008db0
 80019f8:	20000314 	.word	0x20000314

080019fc <update_crc>:
unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr,
		unsigned short data_blk_size)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	463b      	mov	r3, r7
 8001a06:	6019      	str	r1, [r3, #0]
 8001a08:	4611      	mov	r1, r2
 8001a0a:	1dbb      	adds	r3, r7, #6
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	801a      	strh	r2, [r3, #0]
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	460a      	mov	r2, r1
 8001a14:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] =
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <update_crc+0x98>)
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	4611      	mov	r1, r2
 8001a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a24:	461a      	mov	r2, r3
 8001a26:	f002 fd6d 	bl	8004504 <memcpy>
			0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252, 0x0270,
			0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220,
			0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
			0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

	for (j = 0; j < data_blk_size; j++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8001a30:	e023      	b.n	8001a7a <update_crc+0x7e>
	{
		i = ((unsigned short) (crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8001a32:	1dbb      	adds	r3, r7, #6
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8001a3e:	4639      	mov	r1, r7
 8001a40:	6809      	ldr	r1, [r1, #0]
 8001a42:	440b      	add	r3, r1
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4053      	eors	r3, r2
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8001a52:	1dbb      	adds	r3, r7, #6
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	4053      	eors	r3, r2
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	1dbb      	adds	r3, r7, #6
 8001a6e:	801a      	strh	r2, [r3, #0]
	for (j = 0; j < data_blk_size; j++)
 8001a70:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8001a74:	3301      	adds	r3, #1
 8001a76:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3d5      	bcc.n	8001a32 <update_crc+0x36>
	}

	return crc_accum;
 8001a86:	1dbb      	adds	r3, r7, #6
 8001a88:	881b      	ldrh	r3, [r3, #0]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	08008dbc 	.word	0x08008dbc

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9c:	b672      	cpsid	i
}
 8001a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <Error_Handler+0x8>
	...

08001aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_MspInit+0x4c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_MspInit+0x4c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ae2:	2007      	movs	r0, #7
 8001ae4:	f000 fb48 	bl	8002178 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a4c      	ldr	r2, [pc, #304]	; (8001c44 <HAL_UART_MspInit+0x150>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	f040 8091 	bne.w	8001c3a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <HAL_UART_MspInit+0x154>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	4a49      	ldr	r2, [pc, #292]	; (8001c48 <HAL_UART_MspInit+0x154>)
 8001b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b26:	6413      	str	r3, [r2, #64]	; 0x40
 8001b28:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_UART_MspInit+0x154>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	4b43      	ldr	r3, [pc, #268]	; (8001c48 <HAL_UART_MspInit+0x154>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	4a42      	ldr	r2, [pc, #264]	; (8001c48 <HAL_UART_MspInit+0x154>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6313      	str	r3, [r2, #48]	; 0x30
 8001b44:	4b40      	ldr	r3, [pc, #256]	; (8001c48 <HAL_UART_MspInit+0x154>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b50:	230c      	movs	r3, #12
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b60:	2307      	movs	r3, #7
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4838      	ldr	r0, [pc, #224]	; (8001c4c <HAL_UART_MspInit+0x158>)
 8001b6c:	f000 ff48 	bl	8002a00 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001b70:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <HAL_UART_MspInit+0x15c>)
 8001b72:	4a38      	ldr	r2, [pc, #224]	; (8001c54 <HAL_UART_MspInit+0x160>)
 8001b74:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001b76:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_UART_MspInit+0x15c>)
 8001b78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b7e:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <HAL_UART_MspInit+0x15c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b84:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_UART_MspInit+0x15c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b8a:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <HAL_UART_MspInit+0x15c>)
 8001b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b90:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b92:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <HAL_UART_MspInit+0x15c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_UART_MspInit+0x15c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001b9e:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <HAL_UART_MspInit+0x15c>)
 8001ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_UART_MspInit+0x15c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_UART_MspInit+0x15c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001bb2:	4827      	ldr	r0, [pc, #156]	; (8001c50 <HAL_UART_MspInit+0x15c>)
 8001bb4:	f000 fb22 	bl	80021fc <HAL_DMA_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001bbe:	f7ff ff6b 	bl	8001a98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a22      	ldr	r2, [pc, #136]	; (8001c50 <HAL_UART_MspInit+0x15c>)
 8001bc6:	639a      	str	r2, [r3, #56]	; 0x38
 8001bc8:	4a21      	ldr	r2, [pc, #132]	; (8001c50 <HAL_UART_MspInit+0x15c>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_UART_MspInit+0x164>)
 8001bd0:	4a22      	ldr	r2, [pc, #136]	; (8001c5c <HAL_UART_MspInit+0x168>)
 8001bd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_UART_MspInit+0x164>)
 8001bd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bda:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_UART_MspInit+0x164>)
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_UART_MspInit+0x164>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_UART_MspInit+0x164>)
 8001bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_UART_MspInit+0x164>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_UART_MspInit+0x164>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_UART_MspInit+0x164>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_UART_MspInit+0x164>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_UART_MspInit+0x164>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c0e:	4812      	ldr	r0, [pc, #72]	; (8001c58 <HAL_UART_MspInit+0x164>)
 8001c10:	f000 faf4 	bl	80021fc <HAL_DMA_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001c1a:	f7ff ff3d 	bl	8001a98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <HAL_UART_MspInit+0x164>)
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34
 8001c24:	4a0c      	ldr	r2, [pc, #48]	; (8001c58 <HAL_UART_MspInit+0x164>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2026      	movs	r0, #38	; 0x26
 8001c30:	f000 faad 	bl	800218e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c34:	2026      	movs	r0, #38	; 0x26
 8001c36:	f000 fac6 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c3a:	bf00      	nop
 8001c3c:	3728      	adds	r7, #40	; 0x28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40004400 	.word	0x40004400
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	20000430 	.word	0x20000430
 8001c54:	40026088 	.word	0x40026088
 8001c58:	20000490 	.word	0x20000490
 8001c5c:	400260a0 	.word	0x400260a0

08001c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <NMI_Handler+0x4>

08001c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <HardFault_Handler+0x4>

08001c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <MemManage_Handler+0x4>

08001c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <BusFault_Handler+0x4>

08001c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <UsageFault_Handler+0x4>

08001c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cac:	f000 f974 	bl	8001f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <DMA1_Stream5_IRQHandler+0x10>)
 8001cba:	f000 fc37 	bl	800252c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000430 	.word	0x20000430

08001cc8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <DMA1_Stream6_IRQHandler+0x10>)
 8001cce:	f000 fc2d 	bl	800252c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000490 	.word	0x20000490

08001cdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <USART2_IRQHandler+0x10>)
 8001ce2:	f001 fd89 	bl	80037f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200004f0 	.word	0x200004f0

08001cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
	return 1;
 8001cf4:	2301      	movs	r3, #1
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_kill>:

int _kill(int pid, int sig)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d0a:	f002 fbd1 	bl	80044b0 <__errno>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2216      	movs	r2, #22
 8001d12:	601a      	str	r2, [r3, #0]
	return -1;
 8001d14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_exit>:

void _exit (int status)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ffe7 	bl	8001d00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d32:	e7fe      	b.n	8001d32 <_exit+0x12>

08001d34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e00a      	b.n	8001d5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d46:	f3af 8000 	nop.w
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	60ba      	str	r2, [r7, #8]
 8001d52:	b2ca      	uxtb	r2, r1
 8001d54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	dbf0      	blt.n	8001d46 <_read+0x12>
	}

return len;
 8001d64:	687b      	ldr	r3, [r7, #4]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e009      	b.n	8001d94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	60ba      	str	r2, [r7, #8]
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbf1      	blt.n	8001d80 <_write+0x12>
	}
	return len;
 8001d9c:	687b      	ldr	r3, [r7, #4]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_close>:

int _close(int file)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
	return -1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dce:	605a      	str	r2, [r3, #4]
	return 0;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_isatty>:

int _isatty(int file)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
	return 1;
 8001de6:	2301      	movs	r3, #1
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
	return 0;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <_sbrk+0x5c>)
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <_sbrk+0x60>)
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <_sbrk+0x64>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <_sbrk+0x64>)
 8001e2e:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <_sbrk+0x68>)
 8001e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d207      	bcs.n	8001e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e40:	f002 fb36 	bl	80044b0 <__errno>
 8001e44:	4603      	mov	r3, r0
 8001e46:	220c      	movs	r2, #12
 8001e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4e:	e009      	b.n	8001e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <_sbrk+0x64>)
 8001e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e62:	68fb      	ldr	r3, [r7, #12]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20020000 	.word	0x20020000
 8001e70:	00000400 	.word	0x00000400
 8001e74:	20000424 	.word	0x20000424
 8001e78:	20000548 	.word	0x20000548

08001e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <SystemInit+0x20>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <SystemInit+0x20>)
 8001e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ea6:	490e      	ldr	r1, [pc, #56]	; (8001ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eac:	e002      	b.n	8001eb4 <LoopCopyDataInit>

08001eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb2:	3304      	adds	r3, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb8:	d3f9      	bcc.n	8001eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eba:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ebc:	4c0b      	ldr	r4, [pc, #44]	; (8001eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec0:	e001      	b.n	8001ec6 <LoopFillZerobss>

08001ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec4:	3204      	adds	r2, #4

08001ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec8:	d3fb      	bcc.n	8001ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eca:	f7ff ffd7 	bl	8001e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ece:	f002 faf5 	bl	80044bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed2:	f7ff f893 	bl	8000ffc <main>
  bx  lr    
 8001ed6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ee4:	080094a4 	.word	0x080094a4
  ldr r2, =_sbss
 8001ee8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001eec:	20000548 	.word	0x20000548

08001ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC_IRQHandler>
	...

08001ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <HAL_Init+0x40>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_Init+0x40>)
 8001f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <HAL_Init+0x40>)
 8001f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f000 f92b 	bl	8002178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f000 f808 	bl	8001f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f28:	f7ff fdbc 	bl	8001aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023c00 	.word	0x40023c00

08001f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_InitTick+0x54>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_InitTick+0x58>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f943 	bl	80021e2 <HAL_SYSTICK_Config>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00e      	b.n	8001f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b0f      	cmp	r3, #15
 8001f6a:	d80a      	bhi.n	8001f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f000 f90b 	bl	800218e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f78:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <HAL_InitTick+0x5c>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000008 	.word	0x20000008
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	20000534 	.word	0x20000534

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000534 	.word	0x20000534

08001fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <__NVIC_SetPriorityGrouping+0x44>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200a:	4a04      	ldr	r2, [pc, #16]	; (800201c <__NVIC_SetPriorityGrouping+0x44>)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	60d3      	str	r3, [r2, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <__NVIC_GetPriorityGrouping+0x18>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	0a1b      	lsrs	r3, r3, #8
 800202a:	f003 0307 	and.w	r3, r3, #7
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	2b00      	cmp	r3, #0
 800204c:	db0b      	blt.n	8002066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	f003 021f 	and.w	r2, r3, #31
 8002054:	4907      	ldr	r1, [pc, #28]	; (8002074 <__NVIC_EnableIRQ+0x38>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	2001      	movs	r0, #1
 800205e:	fa00 f202 	lsl.w	r2, r0, r2
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000e100 	.word	0xe000e100

08002078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	6039      	str	r1, [r7, #0]
 8002082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	2b00      	cmp	r3, #0
 800208a:	db0a      	blt.n	80020a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	490c      	ldr	r1, [pc, #48]	; (80020c4 <__NVIC_SetPriority+0x4c>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	0112      	lsls	r2, r2, #4
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	440b      	add	r3, r1
 800209c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a0:	e00a      	b.n	80020b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4908      	ldr	r1, [pc, #32]	; (80020c8 <__NVIC_SetPriority+0x50>)
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	3b04      	subs	r3, #4
 80020b0:	0112      	lsls	r2, r2, #4
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	440b      	add	r3, r1
 80020b6:	761a      	strb	r2, [r3, #24]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000e100 	.word	0xe000e100
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f1c3 0307 	rsb	r3, r3, #7
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	bf28      	it	cs
 80020ea:	2304      	movcs	r3, #4
 80020ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3304      	adds	r3, #4
 80020f2:	2b06      	cmp	r3, #6
 80020f4:	d902      	bls.n	80020fc <NVIC_EncodePriority+0x30>
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3b03      	subs	r3, #3
 80020fa:	e000      	b.n	80020fe <NVIC_EncodePriority+0x32>
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	f04f 32ff 	mov.w	r2, #4294967295
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43da      	mvns	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	401a      	ands	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002114:	f04f 31ff 	mov.w	r1, #4294967295
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	43d9      	mvns	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	4313      	orrs	r3, r2
         );
}
 8002126:	4618      	mov	r0, r3
 8002128:	3724      	adds	r7, #36	; 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002144:	d301      	bcc.n	800214a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002146:	2301      	movs	r3, #1
 8002148:	e00f      	b.n	800216a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <SysTick_Config+0x40>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002152:	210f      	movs	r1, #15
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	f7ff ff8e 	bl	8002078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <SysTick_Config+0x40>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <SysTick_Config+0x40>)
 8002164:	2207      	movs	r2, #7
 8002166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	e000e010 	.word	0xe000e010

08002178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ff29 	bl	8001fd8 <__NVIC_SetPriorityGrouping>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a0:	f7ff ff3e 	bl	8002020 <__NVIC_GetPriorityGrouping>
 80021a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	6978      	ldr	r0, [r7, #20]
 80021ac:	f7ff ff8e 	bl	80020cc <NVIC_EncodePriority>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff5d 	bl	8002078 <__NVIC_SetPriority>
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff31 	bl	800203c <__NVIC_EnableIRQ>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffa2 	bl	8002134 <SysTick_Config>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff feda 	bl	8001fc0 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e099      	b.n	800234c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002238:	e00f      	b.n	800225a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800223a:	f7ff fec1 	bl	8001fc0 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b05      	cmp	r3, #5
 8002246:	d908      	bls.n	800225a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2220      	movs	r2, #32
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2203      	movs	r2, #3
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e078      	b.n	800234c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e8      	bne.n	800223a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	4b38      	ldr	r3, [pc, #224]	; (8002354 <HAL_DMA_Init+0x158>)
 8002274:	4013      	ands	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002286:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002292:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d107      	bne.n	80022c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	4313      	orrs	r3, r2
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f023 0307 	bic.w	r3, r3, #7
 80022da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d117      	bne.n	800231e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00e      	beq.n	800231e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fb01 	bl	8002908 <DMA_CheckFifoParam>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2240      	movs	r2, #64	; 0x40
 8002310:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800231a:	2301      	movs	r3, #1
 800231c:	e016      	b.n	800234c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fab8 	bl	800289c <DMA_CalcBaseAndBitshift>
 800232c:	4603      	mov	r3, r0
 800232e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	223f      	movs	r2, #63	; 0x3f
 8002336:	409a      	lsls	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	f010803f 	.word	0xf010803f

08002358 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_DMA_Start_IT+0x26>
 800237a:	2302      	movs	r3, #2
 800237c:	e040      	b.n	8002400 <HAL_DMA_Start_IT+0xa8>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d12f      	bne.n	80023f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2202      	movs	r2, #2
 8002396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fa4a 	bl	8002840 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b0:	223f      	movs	r2, #63	; 0x3f
 80023b2:	409a      	lsls	r2, r3
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0216 	orr.w	r2, r2, #22
 80023c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0208 	orr.w	r2, r2, #8
 80023de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e005      	b.n	80023fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
 80023fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002416:	f7ff fdd3 	bl	8001fc0 <HAL_GetTick>
 800241a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d008      	beq.n	800243a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e052      	b.n	80024e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0216 	bic.w	r2, r2, #22
 8002448:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002458:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <HAL_DMA_Abort+0x62>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0208 	bic.w	r2, r2, #8
 8002478:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248a:	e013      	b.n	80024b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800248c:	f7ff fd98 	bl	8001fc0 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b05      	cmp	r3, #5
 8002498:	d90c      	bls.n	80024b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2220      	movs	r2, #32
 800249e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2203      	movs	r2, #3
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e015      	b.n	80024e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1e4      	bne.n	800248c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c6:	223f      	movs	r2, #63	; 0x3f
 80024c8:	409a      	lsls	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d004      	beq.n	8002506 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e00c      	b.n	8002520 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2205      	movs	r2, #5
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002538:	4b92      	ldr	r3, [pc, #584]	; (8002784 <HAL_DMA_IRQHandler+0x258>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a92      	ldr	r2, [pc, #584]	; (8002788 <HAL_DMA_IRQHandler+0x25c>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0a9b      	lsrs	r3, r3, #10
 8002544:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	2208      	movs	r2, #8
 8002558:	409a      	lsls	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01a      	beq.n	8002598 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d013      	beq.n	8002598 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0204 	bic.w	r2, r2, #4
 800257e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	2208      	movs	r2, #8
 8002586:	409a      	lsls	r2, r3
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	f043 0201 	orr.w	r2, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	2201      	movs	r2, #1
 800259e:	409a      	lsls	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d012      	beq.n	80025ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	2201      	movs	r2, #1
 80025bc:	409a      	lsls	r2, r3
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	f043 0202 	orr.w	r2, r3, #2
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d2:	2204      	movs	r2, #4
 80025d4:	409a      	lsls	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d012      	beq.n	8002604 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00b      	beq.n	8002604 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	2204      	movs	r2, #4
 80025f2:	409a      	lsls	r2, r3
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	f043 0204 	orr.w	r2, r3, #4
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002608:	2210      	movs	r2, #16
 800260a:	409a      	lsls	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d043      	beq.n	800269c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d03c      	beq.n	800269c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	2210      	movs	r2, #16
 8002628:	409a      	lsls	r2, r3
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d018      	beq.n	800266e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d108      	bne.n	800265c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d024      	beq.n	800269c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4798      	blx	r3
 800265a:	e01f      	b.n	800269c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01b      	beq.n	800269c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
 800266c:	e016      	b.n	800269c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0208 	bic.w	r2, r2, #8
 800268a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	2220      	movs	r2, #32
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 808e 	beq.w	80027ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8086 	beq.w	80027ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c2:	2220      	movs	r2, #32
 80026c4:	409a      	lsls	r2, r3
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d136      	bne.n	8002744 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0216 	bic.w	r2, r2, #22
 80026e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d103      	bne.n	8002706 <HAL_DMA_IRQHandler+0x1da>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0208 	bic.w	r2, r2, #8
 8002714:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	223f      	movs	r2, #63	; 0x3f
 800271c:	409a      	lsls	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002736:	2b00      	cmp	r3, #0
 8002738:	d07d      	beq.n	8002836 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	4798      	blx	r3
        }
        return;
 8002742:	e078      	b.n	8002836 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d01c      	beq.n	800278c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d108      	bne.n	8002772 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	2b00      	cmp	r3, #0
 8002766:	d030      	beq.n	80027ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	4798      	blx	r3
 8002770:	e02b      	b.n	80027ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d027      	beq.n	80027ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
 8002782:	e022      	b.n	80027ca <HAL_DMA_IRQHandler+0x29e>
 8002784:	20000000 	.word	0x20000000
 8002788:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10f      	bne.n	80027ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0210 	bic.w	r2, r2, #16
 80027a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d032      	beq.n	8002838 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d022      	beq.n	8002824 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2205      	movs	r2, #5
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	3301      	adds	r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d307      	bcc.n	8002812 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f2      	bne.n	80027f6 <HAL_DMA_IRQHandler+0x2ca>
 8002810:	e000      	b.n	8002814 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002812:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
 8002834:	e000      	b.n	8002838 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002836:	bf00      	nop
    }
  }
}
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop

08002840 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800285c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d108      	bne.n	8002880 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800287e:	e007      	b.n	8002890 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	60da      	str	r2, [r3, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	3b10      	subs	r3, #16
 80028ac:	4a14      	ldr	r2, [pc, #80]	; (8002900 <DMA_CalcBaseAndBitshift+0x64>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028b6:	4a13      	ldr	r2, [pc, #76]	; (8002904 <DMA_CalcBaseAndBitshift+0x68>)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4413      	add	r3, r2
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d909      	bls.n	80028de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028d2:	f023 0303 	bic.w	r3, r3, #3
 80028d6:	1d1a      	adds	r2, r3, #4
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	659a      	str	r2, [r3, #88]	; 0x58
 80028dc:	e007      	b.n	80028ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028e6:	f023 0303 	bic.w	r3, r3, #3
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	aaaaaaab 	.word	0xaaaaaaab
 8002904:	08008fd4 	.word	0x08008fd4

08002908 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d11f      	bne.n	8002962 <DMA_CheckFifoParam+0x5a>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d856      	bhi.n	80029d6 <DMA_CheckFifoParam+0xce>
 8002928:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <DMA_CheckFifoParam+0x28>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	08002941 	.word	0x08002941
 8002934:	08002953 	.word	0x08002953
 8002938:	08002941 	.word	0x08002941
 800293c:	080029d7 	.word	0x080029d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d046      	beq.n	80029da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002950:	e043      	b.n	80029da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800295a:	d140      	bne.n	80029de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002960:	e03d      	b.n	80029de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800296a:	d121      	bne.n	80029b0 <DMA_CheckFifoParam+0xa8>
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d837      	bhi.n	80029e2 <DMA_CheckFifoParam+0xda>
 8002972:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <DMA_CheckFifoParam+0x70>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	08002989 	.word	0x08002989
 800297c:	0800298f 	.word	0x0800298f
 8002980:	08002989 	.word	0x08002989
 8002984:	080029a1 	.word	0x080029a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      break;
 800298c:	e030      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d025      	beq.n	80029e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800299e:	e022      	b.n	80029e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029a8:	d11f      	bne.n	80029ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029ae:	e01c      	b.n	80029ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d903      	bls.n	80029be <DMA_CheckFifoParam+0xb6>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d003      	beq.n	80029c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029bc:	e018      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
      break;
 80029c2:	e015      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00e      	beq.n	80029ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
      break;
 80029d4:	e00b      	b.n	80029ee <DMA_CheckFifoParam+0xe6>
      break;
 80029d6:	bf00      	nop
 80029d8:	e00a      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      break;
 80029da:	bf00      	nop
 80029dc:	e008      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      break;
 80029de:	bf00      	nop
 80029e0:	e006      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      break;
 80029e2:	bf00      	nop
 80029e4:	e004      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      break;
 80029e6:	bf00      	nop
 80029e8:	e002      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80029ea:	bf00      	nop
 80029ec:	e000      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      break;
 80029ee:	bf00      	nop
    }
  } 
  
  return status; 
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop

08002a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e159      	b.n	8002cd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	f040 8148 	bne.w	8002cca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d005      	beq.n	8002a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d130      	bne.n	8002ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 0201 	and.w	r2, r3, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d017      	beq.n	8002af0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d123      	bne.n	8002b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	08da      	lsrs	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3208      	adds	r2, #8
 8002b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	220f      	movs	r2, #15
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80a2 	beq.w	8002cca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b57      	ldr	r3, [pc, #348]	; (8002ce8 <HAL_GPIO_Init+0x2e8>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4a56      	ldr	r2, [pc, #344]	; (8002ce8 <HAL_GPIO_Init+0x2e8>)
 8002b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b94:	6453      	str	r3, [r2, #68]	; 0x44
 8002b96:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <HAL_GPIO_Init+0x2e8>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba2:	4a52      	ldr	r2, [pc, #328]	; (8002cec <HAL_GPIO_Init+0x2ec>)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	3302      	adds	r3, #2
 8002baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a49      	ldr	r2, [pc, #292]	; (8002cf0 <HAL_GPIO_Init+0x2f0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d019      	beq.n	8002c02 <HAL_GPIO_Init+0x202>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a48      	ldr	r2, [pc, #288]	; (8002cf4 <HAL_GPIO_Init+0x2f4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_GPIO_Init+0x1fe>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a47      	ldr	r2, [pc, #284]	; (8002cf8 <HAL_GPIO_Init+0x2f8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00d      	beq.n	8002bfa <HAL_GPIO_Init+0x1fa>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a46      	ldr	r2, [pc, #280]	; (8002cfc <HAL_GPIO_Init+0x2fc>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <HAL_GPIO_Init+0x1f6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a45      	ldr	r2, [pc, #276]	; (8002d00 <HAL_GPIO_Init+0x300>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_GPIO_Init+0x1f2>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e008      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	e006      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e004      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e002      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002c02:	2300      	movs	r3, #0
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	f002 0203 	and.w	r2, r2, #3
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	4093      	lsls	r3, r2
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c14:	4935      	ldr	r1, [pc, #212]	; (8002cec <HAL_GPIO_Init+0x2ec>)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c22:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c46:	4a2f      	ldr	r2, [pc, #188]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c70:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c76:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c9a:	4a1a      	ldr	r2, [pc, #104]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca0:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc4:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	61fb      	str	r3, [r7, #28]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b0f      	cmp	r3, #15
 8002cd4:	f67f aea2 	bls.w	8002a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	3724      	adds	r7, #36	; 0x24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	40020000 	.word	0x40020000
 8002cf4:	40020400 	.word	0x40020400
 8002cf8:	40020800 	.word	0x40020800
 8002cfc:	40020c00 	.word	0x40020c00
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40013c00 	.word	0x40013c00

08002d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	807b      	strh	r3, [r7, #2]
 8002d14:	4613      	mov	r3, r2
 8002d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d18:	787b      	ldrb	r3, [r7, #1]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d1e:	887a      	ldrh	r2, [r7, #2]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d24:	e003      	b.n	8002d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d26:	887b      	ldrh	r3, [r7, #2]
 8002d28:	041a      	lsls	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	619a      	str	r2, [r3, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e264      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d075      	beq.n	8002e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d5a:	4ba3      	ldr	r3, [pc, #652]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d00c      	beq.n	8002d80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d66:	4ba0      	ldr	r3, [pc, #640]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d112      	bne.n	8002d98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d72:	4b9d      	ldr	r3, [pc, #628]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7e:	d10b      	bne.n	8002d98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	4b99      	ldr	r3, [pc, #612]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d05b      	beq.n	8002e44 <HAL_RCC_OscConfig+0x108>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d157      	bne.n	8002e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e23f      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da0:	d106      	bne.n	8002db0 <HAL_RCC_OscConfig+0x74>
 8002da2:	4b91      	ldr	r3, [pc, #580]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a90      	ldr	r2, [pc, #576]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e01d      	b.n	8002dec <HAL_RCC_OscConfig+0xb0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x98>
 8002dba:	4b8b      	ldr	r3, [pc, #556]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a8a      	ldr	r2, [pc, #552]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b88      	ldr	r3, [pc, #544]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a87      	ldr	r2, [pc, #540]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e00b      	b.n	8002dec <HAL_RCC_OscConfig+0xb0>
 8002dd4:	4b84      	ldr	r3, [pc, #528]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a83      	ldr	r2, [pc, #524]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	4b81      	ldr	r3, [pc, #516]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a80      	ldr	r2, [pc, #512]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d013      	beq.n	8002e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7ff f8e4 	bl	8001fc0 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7ff f8e0 	bl	8001fc0 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e204      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	4b76      	ldr	r3, [pc, #472]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0xc0>
 8002e1a:	e014      	b.n	8002e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7ff f8d0 	bl	8001fc0 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e24:	f7ff f8cc 	bl	8001fc0 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e1f0      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e36:	4b6c      	ldr	r3, [pc, #432]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0xe8>
 8002e42:	e000      	b.n	8002e46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d063      	beq.n	8002f1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00b      	beq.n	8002e76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5e:	4b62      	ldr	r3, [pc, #392]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d11c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e6a:	4b5f      	ldr	r3, [pc, #380]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d116      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	4b5c      	ldr	r3, [pc, #368]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_RCC_OscConfig+0x152>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d001      	beq.n	8002e8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e1c4      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8e:	4b56      	ldr	r3, [pc, #344]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4952      	ldr	r1, [pc, #328]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea2:	e03a      	b.n	8002f1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d020      	beq.n	8002eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eac:	4b4f      	ldr	r3, [pc, #316]	; (8002fec <HAL_RCC_OscConfig+0x2b0>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb2:	f7ff f885 	bl	8001fc0 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eba:	f7ff f881 	bl	8001fc0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e1a5      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ecc:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed8:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4940      	ldr	r1, [pc, #256]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]
 8002eec:	e015      	b.n	8002f1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <HAL_RCC_OscConfig+0x2b0>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7ff f864 	bl	8001fc0 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efc:	f7ff f860 	bl	8001fc0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e184      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0e:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d030      	beq.n	8002f88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d016      	beq.n	8002f5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2e:	4b30      	ldr	r3, [pc, #192]	; (8002ff0 <HAL_RCC_OscConfig+0x2b4>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7ff f844 	bl	8001fc0 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7ff f840 	bl	8001fc0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e164      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4e:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x200>
 8002f5a:	e015      	b.n	8002f88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_RCC_OscConfig+0x2b4>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f62:	f7ff f82d 	bl	8001fc0 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7ff f829 	bl	8001fc0 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e14d      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80a0 	beq.w	80030d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f96:	2300      	movs	r3, #0
 8002f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10f      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a0e      	ldr	r2, [pc, #56]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_OscConfig+0x2b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d121      	bne.n	8003016 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <HAL_RCC_OscConfig+0x2b8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a07      	ldr	r2, [pc, #28]	; (8002ff4 <HAL_RCC_OscConfig+0x2b8>)
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fde:	f7fe ffef 	bl	8001fc0 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	e011      	b.n	800300a <HAL_RCC_OscConfig+0x2ce>
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	42470000 	.word	0x42470000
 8002ff0:	42470e80 	.word	0x42470e80
 8002ff4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff8:	f7fe ffe2 	bl	8001fc0 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e106      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300a:	4b85      	ldr	r3, [pc, #532]	; (8003220 <HAL_RCC_OscConfig+0x4e4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d106      	bne.n	800302c <HAL_RCC_OscConfig+0x2f0>
 800301e:	4b81      	ldr	r3, [pc, #516]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a80      	ldr	r2, [pc, #512]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6713      	str	r3, [r2, #112]	; 0x70
 800302a:	e01c      	b.n	8003066 <HAL_RCC_OscConfig+0x32a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b05      	cmp	r3, #5
 8003032:	d10c      	bne.n	800304e <HAL_RCC_OscConfig+0x312>
 8003034:	4b7b      	ldr	r3, [pc, #492]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	4a7a      	ldr	r2, [pc, #488]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 800303a:	f043 0304 	orr.w	r3, r3, #4
 800303e:	6713      	str	r3, [r2, #112]	; 0x70
 8003040:	4b78      	ldr	r3, [pc, #480]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	4a77      	ldr	r2, [pc, #476]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6713      	str	r3, [r2, #112]	; 0x70
 800304c:	e00b      	b.n	8003066 <HAL_RCC_OscConfig+0x32a>
 800304e:	4b75      	ldr	r3, [pc, #468]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4a74      	ldr	r2, [pc, #464]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	6713      	str	r3, [r2, #112]	; 0x70
 800305a:	4b72      	ldr	r3, [pc, #456]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a71      	ldr	r2, [pc, #452]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 8003060:	f023 0304 	bic.w	r3, r3, #4
 8003064:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d015      	beq.n	800309a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306e:	f7fe ffa7 	bl	8001fc0 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003074:	e00a      	b.n	800308c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7fe ffa3 	bl	8001fc0 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f241 3288 	movw	r2, #5000	; 0x1388
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e0c5      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308c:	4b65      	ldr	r3, [pc, #404]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0ee      	beq.n	8003076 <HAL_RCC_OscConfig+0x33a>
 8003098:	e014      	b.n	80030c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309a:	f7fe ff91 	bl	8001fc0 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fe ff8d 	bl	8001fc0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e0af      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b8:	4b5a      	ldr	r3, [pc, #360]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ee      	bne.n	80030a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d105      	bne.n	80030d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ca:	4b56      	ldr	r3, [pc, #344]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	4a55      	ldr	r2, [pc, #340]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 80030d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 809b 	beq.w	8003216 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030e0:	4b50      	ldr	r3, [pc, #320]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d05c      	beq.n	80031a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d141      	bne.n	8003178 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f4:	4b4c      	ldr	r3, [pc, #304]	; (8003228 <HAL_RCC_OscConfig+0x4ec>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fa:	f7fe ff61 	bl	8001fc0 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003102:	f7fe ff5d 	bl	8001fc0 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e081      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003114:	4b43      	ldr	r3, [pc, #268]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f0      	bne.n	8003102 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	019b      	lsls	r3, r3, #6
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	3b01      	subs	r3, #1
 800313a:	041b      	lsls	r3, r3, #16
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	061b      	lsls	r3, r3, #24
 8003144:	4937      	ldr	r1, [pc, #220]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800314a:	4b37      	ldr	r3, [pc, #220]	; (8003228 <HAL_RCC_OscConfig+0x4ec>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fe ff36 	bl	8001fc0 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003158:	f7fe ff32 	bl	8001fc0 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e056      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316a:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x41c>
 8003176:	e04e      	b.n	8003216 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003178:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <HAL_RCC_OscConfig+0x4ec>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fe ff1f 	bl	8001fc0 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003186:	f7fe ff1b 	bl	8001fc0 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e03f      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003198:	4b22      	ldr	r3, [pc, #136]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f0      	bne.n	8003186 <HAL_RCC_OscConfig+0x44a>
 80031a4:	e037      	b.n	8003216 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e032      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031b2:	4b1c      	ldr	r3, [pc, #112]	; (8003224 <HAL_RCC_OscConfig+0x4e8>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d028      	beq.n	8003212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d121      	bne.n	8003212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d11a      	bne.n	8003212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031e2:	4013      	ands	r3, r2
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d111      	bne.n	8003212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	085b      	lsrs	r3, r3, #1
 80031fa:	3b01      	subs	r3, #1
 80031fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d107      	bne.n	8003212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40007000 	.word	0x40007000
 8003224:	40023800 	.word	0x40023800
 8003228:	42470060 	.word	0x42470060

0800322c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0cc      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003240:	4b68      	ldr	r3, [pc, #416]	; (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d90c      	bls.n	8003268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b65      	ldr	r3, [pc, #404]	; (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0b8      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d020      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003280:	4b59      	ldr	r3, [pc, #356]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4a58      	ldr	r2, [pc, #352]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800328a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003298:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	4a52      	ldr	r2, [pc, #328]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a4:	4b50      	ldr	r3, [pc, #320]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	494d      	ldr	r1, [pc, #308]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d044      	beq.n	800334c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d119      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e07f      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ea:	4b3f      	ldr	r3, [pc, #252]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e06f      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fa:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e067      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800330a:	4b37      	ldr	r3, [pc, #220]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f023 0203 	bic.w	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4934      	ldr	r1, [pc, #208]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	4313      	orrs	r3, r2
 800331a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800331c:	f7fe fe50 	bl	8001fc0 <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003322:	e00a      	b.n	800333a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003324:	f7fe fe4c 	bl	8001fc0 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e04f      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 020c 	and.w	r2, r3, #12
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	429a      	cmp	r2, r3
 800334a:	d1eb      	bne.n	8003324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800334c:	4b25      	ldr	r3, [pc, #148]	; (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d20c      	bcs.n	8003374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e032      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003380:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4916      	ldr	r1, [pc, #88]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800339e:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	490e      	ldr	r1, [pc, #56]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033b2:	f000 f821 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 80033b6:	4602      	mov	r2, r0
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	490a      	ldr	r1, [pc, #40]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	5ccb      	ldrb	r3, [r1, r3]
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ce:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HAL_RCC_ClockConfig+0x1c8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fdb0 	bl	8001f38 <HAL_InitTick>

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40023c00 	.word	0x40023c00
 80033e8:	40023800 	.word	0x40023800
 80033ec:	08008fbc 	.word	0x08008fbc
 80033f0:	20000000 	.word	0x20000000
 80033f4:	20000004 	.word	0x20000004

080033f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	2300      	movs	r3, #0
 800340a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003410:	4b67      	ldr	r3, [pc, #412]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b08      	cmp	r3, #8
 800341a:	d00d      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x40>
 800341c:	2b08      	cmp	r3, #8
 800341e:	f200 80bd 	bhi.w	800359c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x34>
 8003426:	2b04      	cmp	r3, #4
 8003428:	d003      	beq.n	8003432 <HAL_RCC_GetSysClockFreq+0x3a>
 800342a:	e0b7      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b61      	ldr	r3, [pc, #388]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800342e:	60bb      	str	r3, [r7, #8]
       break;
 8003430:	e0b7      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003432:	4b61      	ldr	r3, [pc, #388]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003434:	60bb      	str	r3, [r7, #8]
      break;
 8003436:	e0b4      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003438:	4b5d      	ldr	r3, [pc, #372]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003440:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003442:	4b5b      	ldr	r3, [pc, #364]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d04d      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800344e:	4b58      	ldr	r3, [pc, #352]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	099b      	lsrs	r3, r3, #6
 8003454:	461a      	mov	r2, r3
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800345e:	f04f 0100 	mov.w	r1, #0
 8003462:	ea02 0800 	and.w	r8, r2, r0
 8003466:	ea03 0901 	and.w	r9, r3, r1
 800346a:	4640      	mov	r0, r8
 800346c:	4649      	mov	r1, r9
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	014b      	lsls	r3, r1, #5
 8003478:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800347c:	0142      	lsls	r2, r0, #5
 800347e:	4610      	mov	r0, r2
 8003480:	4619      	mov	r1, r3
 8003482:	ebb0 0008 	subs.w	r0, r0, r8
 8003486:	eb61 0109 	sbc.w	r1, r1, r9
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	018b      	lsls	r3, r1, #6
 8003494:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003498:	0182      	lsls	r2, r0, #6
 800349a:	1a12      	subs	r2, r2, r0
 800349c:	eb63 0301 	sbc.w	r3, r3, r1
 80034a0:	f04f 0000 	mov.w	r0, #0
 80034a4:	f04f 0100 	mov.w	r1, #0
 80034a8:	00d9      	lsls	r1, r3, #3
 80034aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034ae:	00d0      	lsls	r0, r2, #3
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	eb12 0208 	adds.w	r2, r2, r8
 80034b8:	eb43 0309 	adc.w	r3, r3, r9
 80034bc:	f04f 0000 	mov.w	r0, #0
 80034c0:	f04f 0100 	mov.w	r1, #0
 80034c4:	0259      	lsls	r1, r3, #9
 80034c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80034ca:	0250      	lsls	r0, r2, #9
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4610      	mov	r0, r2
 80034d2:	4619      	mov	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	f7fd fbdc 	bl	8000c98 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4613      	mov	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e04a      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ea:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	099b      	lsrs	r3, r3, #6
 80034f0:	461a      	mov	r2, r3
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	ea02 0400 	and.w	r4, r2, r0
 8003502:	ea03 0501 	and.w	r5, r3, r1
 8003506:	4620      	mov	r0, r4
 8003508:	4629      	mov	r1, r5
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	014b      	lsls	r3, r1, #5
 8003514:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003518:	0142      	lsls	r2, r0, #5
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	1b00      	subs	r0, r0, r4
 8003520:	eb61 0105 	sbc.w	r1, r1, r5
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	018b      	lsls	r3, r1, #6
 800352e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003532:	0182      	lsls	r2, r0, #6
 8003534:	1a12      	subs	r2, r2, r0
 8003536:	eb63 0301 	sbc.w	r3, r3, r1
 800353a:	f04f 0000 	mov.w	r0, #0
 800353e:	f04f 0100 	mov.w	r1, #0
 8003542:	00d9      	lsls	r1, r3, #3
 8003544:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003548:	00d0      	lsls	r0, r2, #3
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	1912      	adds	r2, r2, r4
 8003550:	eb45 0303 	adc.w	r3, r5, r3
 8003554:	f04f 0000 	mov.w	r0, #0
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	0299      	lsls	r1, r3, #10
 800355e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003562:	0290      	lsls	r0, r2, #10
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	461a      	mov	r2, r3
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	f7fd fb90 	bl	8000c98 <__aeabi_uldivmod>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4613      	mov	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	3301      	adds	r3, #1
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	60bb      	str	r3, [r7, #8]
      break;
 800359a:	e002      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800359e:	60bb      	str	r3, [r7, #8]
      break;
 80035a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035a2:	68bb      	ldr	r3, [r7, #8]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	00f42400 	.word	0x00f42400
 80035b8:	007a1200 	.word	0x007a1200

080035bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c0:	4b03      	ldr	r3, [pc, #12]	; (80035d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035c2:	681b      	ldr	r3, [r3, #0]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20000000 	.word	0x20000000

080035d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d8:	f7ff fff0 	bl	80035bc <HAL_RCC_GetHCLKFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	0a9b      	lsrs	r3, r3, #10
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	4903      	ldr	r1, [pc, #12]	; (80035f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ea:	5ccb      	ldrb	r3, [r1, r3]
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40023800 	.word	0x40023800
 80035f8:	08008fcc 	.word	0x08008fcc

080035fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003600:	f7ff ffdc 	bl	80035bc <HAL_RCC_GetHCLKFreq>
 8003604:	4602      	mov	r2, r0
 8003606:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	0b5b      	lsrs	r3, r3, #13
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	4903      	ldr	r1, [pc, #12]	; (8003620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003612:	5ccb      	ldrb	r3, [r1, r3]
 8003614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003618:	4618      	mov	r0, r3
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40023800 	.word	0x40023800
 8003620:	08008fcc 	.word	0x08008fcc

08003624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e03f      	b.n	80036b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fe fa52 	bl	8001af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2224      	movs	r2, #36	; 0x24
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fd51 	bl	8004110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800367c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800368c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800369c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	4613      	mov	r3, r2
 80036cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d153      	bne.n	8003782 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_UART_Transmit_DMA+0x26>
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e04c      	b.n	8003784 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_UART_Transmit_DMA+0x38>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e045      	b.n	8003784 <HAL_UART_Transmit_DMA+0xc4>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	88fa      	ldrh	r2, [r7, #6]
 800370a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	88fa      	ldrh	r2, [r7, #6]
 8003710:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2221      	movs	r2, #33	; 0x21
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	4a19      	ldr	r2, [pc, #100]	; (800378c <HAL_UART_Transmit_DMA+0xcc>)
 8003726:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372c:	4a18      	ldr	r2, [pc, #96]	; (8003790 <HAL_UART_Transmit_DMA+0xd0>)
 800372e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003734:	4a17      	ldr	r2, [pc, #92]	; (8003794 <HAL_UART_Transmit_DMA+0xd4>)
 8003736:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373c:	2200      	movs	r2, #0
 800373e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003740:	f107 0308 	add.w	r3, r7, #8
 8003744:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	6819      	ldr	r1, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3304      	adds	r3, #4
 8003754:	461a      	mov	r2, r3
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	f7fe fdfe 	bl	8002358 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003764:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800377c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	e000      	b.n	8003784 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003782:	2302      	movs	r3, #2
  }
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	08003bcd 	.word	0x08003bcd
 8003790:	08003c1f 	.word	0x08003c1f
 8003794:	08003d07 	.word	0x08003d07

08003798 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d11d      	bne.n	80037ee <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_UART_Receive_DMA+0x26>
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e016      	b.n	80037f0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_UART_Receive_DMA+0x38>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e00f      	b.n	80037f0 <HAL_UART_Receive_DMA+0x58>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	461a      	mov	r2, r3
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 fad9 	bl	8003d9c <UART_Start_Receive_DMA>
 80037ea:	4603      	mov	r3, r0
 80037ec:	e000      	b.n	80037f0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003818:	2300      	movs	r3, #0
 800381a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10d      	bne.n	800384a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_UART_IRQHandler+0x52>
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fbcd 	bl	8003fe2 <UART_Receive_IT>
      return;
 8003848:	e17c      	b.n	8003b44 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80b1 	beq.w	80039b4 <HAL_UART_IRQHandler+0x1bc>
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <HAL_UART_IRQHandler+0x70>
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80a6 	beq.w	80039b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <HAL_UART_IRQHandler+0x90>
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f043 0201 	orr.w	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_UART_IRQHandler+0xb0>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	f043 0202 	orr.w	r2, r3, #2
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_UART_IRQHandler+0xd0>
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f043 0204 	orr.w	r2, r3, #4
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00f      	beq.n	80038f2 <HAL_UART_IRQHandler+0xfa>
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <HAL_UART_IRQHandler+0xee>
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f043 0208 	orr.w	r2, r3, #8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 811f 	beq.w	8003b3a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_UART_IRQHandler+0x11e>
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fb66 	bl	8003fe2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	bf0c      	ite	eq
 8003924:	2301      	moveq	r3, #1
 8003926:	2300      	movne	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <HAL_UART_IRQHandler+0x146>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d031      	beq.n	80039a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 faa6 	bl	8003e90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d123      	bne.n	800399a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003960:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	2b00      	cmp	r3, #0
 8003968:	d013      	beq.n	8003992 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	4a77      	ldr	r2, [pc, #476]	; (8003b4c <HAL_UART_IRQHandler+0x354>)
 8003970:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe fdb6 	bl	80024e8 <HAL_DMA_Abort_IT>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d016      	beq.n	80039b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800398c:	4610      	mov	r0, r2
 800398e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003990:	e00e      	b.n	80039b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f904 	bl	8003ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003998:	e00a      	b.n	80039b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f900 	bl	8003ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	e006      	b.n	80039b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8fc 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039ae:	e0c4      	b.n	8003b3a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b0:	bf00      	nop
    return;
 80039b2:	e0c2      	b.n	8003b3a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	f040 80a2 	bne.w	8003b02 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 809c 	beq.w	8003b02 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 8096 	beq.w	8003b02 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	d14f      	bne.n	8003a9a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003a04:	8a3b      	ldrh	r3, [r7, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8099 	beq.w	8003b3e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a10:	8a3a      	ldrh	r2, [r7, #16]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	f080 8093 	bcs.w	8003b3e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8a3a      	ldrh	r2, [r7, #16]
 8003a1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a28:	d02b      	beq.n	8003a82 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a38:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a58:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0210 	bic.w	r2, r2, #16
 8003a76:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe fcc3 	bl	8002408 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	4619      	mov	r1, r3
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f88e 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a98:	e051      	b.n	8003b3e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d047      	beq.n	8003b42 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8003ab2:	8a7b      	ldrh	r3, [r7, #18]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d044      	beq.n	8003b42 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ac6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0210 	bic.w	r2, r2, #16
 8003af4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003af6:	8a7b      	ldrh	r3, [r7, #18]
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f85a 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b00:	e01f      	b.n	8003b42 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_UART_IRQHandler+0x326>
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f9fb 	bl	8003f12 <UART_Transmit_IT>
    return;
 8003b1c:	e012      	b.n	8003b44 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00d      	beq.n	8003b44 <HAL_UART_IRQHandler+0x34c>
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d008      	beq.n	8003b44 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fa3d 	bl	8003fb2 <UART_EndTransmit_IT>
    return;
 8003b38:	e004      	b.n	8003b44 <HAL_UART_IRQHandler+0x34c>
    return;
 8003b3a:	bf00      	nop
 8003b3c:	e002      	b.n	8003b44 <HAL_UART_IRQHandler+0x34c>
      return;
 8003b3e:	bf00      	nop
 8003b40:	e000      	b.n	8003b44 <HAL_UART_IRQHandler+0x34c>
      return;
 8003b42:	bf00      	nop
  }
}
 8003b44:	3728      	adds	r7, #40	; 0x28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	08003eeb 	.word	0x08003eeb

08003b50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d113      	bne.n	8003c10 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bfc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c0c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c0e:	e002      	b.n	8003c16 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7ff ff9d 	bl	8003b50 <HAL_UART_TxCpltCallback>
}
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7ff ff99 	bl	8003b64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d12a      	bne.n	8003cac <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c6a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0201 	bic.w	r2, r2, #1
 8003c7a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d107      	bne.n	8003cac <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0210 	bic.w	r2, r2, #16
 8003caa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d106      	bne.n	8003cc2 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cb8:	4619      	mov	r1, r3
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff ff7a 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cc0:	e002      	b.n	8003cc8 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f7ff ff58 	bl	8003b78 <HAL_UART_RxCpltCallback>
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d108      	bne.n	8003cf8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	4619      	mov	r1, r3
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f7ff ff5f 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cf6:	e002      	b.n	8003cfe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7ff ff47 	bl	8003b8c <HAL_UART_RxHalfCpltCallback>
}
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d22:	2b80      	cmp	r3, #128	; 0x80
 8003d24:	bf0c      	ite	eq
 8003d26:	2301      	moveq	r3, #1
 8003d28:	2300      	movne	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b21      	cmp	r3, #33	; 0x21
 8003d38:	d108      	bne.n	8003d4c <UART_DMAError+0x46>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003d46:	68b8      	ldr	r0, [r7, #8]
 8003d48:	f000 f88c 	bl	8003e64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	bf0c      	ite	eq
 8003d5a:	2301      	moveq	r3, #1
 8003d5c:	2300      	movne	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b22      	cmp	r3, #34	; 0x22
 8003d6c:	d108      	bne.n	8003d80 <UART_DMAError+0x7a>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2200      	movs	r2, #0
 8003d78:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003d7a:	68b8      	ldr	r0, [r7, #8]
 8003d7c:	f000 f888 	bl	8003e90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	f043 0210 	orr.w	r2, r3, #16
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d8c:	68b8      	ldr	r0, [r7, #8]
 8003d8e:	f7ff ff07 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d92:	bf00      	nop
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2222      	movs	r2, #34	; 0x22
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	4a23      	ldr	r2, [pc, #140]	; (8003e58 <UART_Start_Receive_DMA+0xbc>)
 8003dca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	4a22      	ldr	r2, [pc, #136]	; (8003e5c <UART_Start_Receive_DMA+0xc0>)
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	4a21      	ldr	r2, [pc, #132]	; (8003e60 <UART_Start_Receive_DMA+0xc4>)
 8003dda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	2200      	movs	r2, #0
 8003de2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003de4:	f107 0308 	add.w	r3, r7, #8
 8003de8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	f7fe faac 	bl	8002358 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e2c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e4c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	08003c3b 	.word	0x08003c3b
 8003e5c:	08003cd1 	.word	0x08003cd1
 8003e60:	08003d07 	.word	0x08003d07

08003e64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003e7a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ea6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d107      	bne.n	8003ed0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0210 	bic.w	r2, r2, #16
 8003ece:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff fe4b 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b085      	sub	sp, #20
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b21      	cmp	r3, #33	; 0x21
 8003f24:	d13e      	bne.n	8003fa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2e:	d114      	bne.n	8003f5a <UART_Transmit_IT+0x48>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d110      	bne.n	8003f5a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	1c9a      	adds	r2, r3, #2
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	621a      	str	r2, [r3, #32]
 8003f58:	e008      	b.n	8003f6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	1c59      	adds	r1, r3, #1
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6211      	str	r1, [r2, #32]
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10f      	bne.n	8003fa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff fdbc 	bl	8003b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b22      	cmp	r3, #34	; 0x22
 8003ff4:	f040 8087 	bne.w	8004106 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004000:	d117      	bne.n	8004032 <UART_Receive_IT+0x50>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d113      	bne.n	8004032 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	b29b      	uxth	r3, r3
 800401c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004020:	b29a      	uxth	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	1c9a      	adds	r2, r3, #2
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	629a      	str	r2, [r3, #40]	; 0x28
 8004030:	e026      	b.n	8004080 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004038:	2300      	movs	r3, #0
 800403a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004044:	d007      	beq.n	8004056 <UART_Receive_IT+0x74>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <UART_Receive_IT+0x82>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	e008      	b.n	8004076 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004070:	b2da      	uxtb	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29b      	uxth	r3, r3
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4619      	mov	r1, r3
 800408e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004090:	2b00      	cmp	r3, #0
 8004092:	d136      	bne.n	8004102 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0220 	bic.w	r2, r2, #32
 80040a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d10e      	bne.n	80040f2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0210 	bic.w	r2, r2, #16
 80040e2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040e8:	4619      	mov	r1, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fd62 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
 80040f0:	e002      	b.n	80040f8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff fd40 	bl	8003b78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	e002      	b.n	8004108 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e000      	b.n	8004108 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
  }
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004114:	b09f      	sub	sp, #124	; 0x7c
 8004116:	af00      	add	r7, sp, #0
 8004118:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800411a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004126:	68d9      	ldr	r1, [r3, #12]
 8004128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	ea40 0301 	orr.w	r3, r0, r1
 8004130:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	431a      	orrs	r2, r3
 800413c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	431a      	orrs	r2, r3
 8004142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	4313      	orrs	r3, r2
 8004148:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800414a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004154:	f021 010c 	bic.w	r1, r1, #12
 8004158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800415e:	430b      	orrs	r3, r1
 8004160:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416e:	6999      	ldr	r1, [r3, #24]
 8004170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	ea40 0301 	orr.w	r3, r0, r1
 8004178:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800417a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4bc5      	ldr	r3, [pc, #788]	; (8004494 <UART_SetConfig+0x384>)
 8004180:	429a      	cmp	r2, r3
 8004182:	d004      	beq.n	800418e <UART_SetConfig+0x7e>
 8004184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	4bc3      	ldr	r3, [pc, #780]	; (8004498 <UART_SetConfig+0x388>)
 800418a:	429a      	cmp	r2, r3
 800418c:	d103      	bne.n	8004196 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800418e:	f7ff fa35 	bl	80035fc <HAL_RCC_GetPCLK2Freq>
 8004192:	6778      	str	r0, [r7, #116]	; 0x74
 8004194:	e002      	b.n	800419c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004196:	f7ff fa1d 	bl	80035d4 <HAL_RCC_GetPCLK1Freq>
 800419a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800419c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a4:	f040 80b6 	bne.w	8004314 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041aa:	461c      	mov	r4, r3
 80041ac:	f04f 0500 	mov.w	r5, #0
 80041b0:	4622      	mov	r2, r4
 80041b2:	462b      	mov	r3, r5
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	6439      	str	r1, [r7, #64]	; 0x40
 80041b8:	415b      	adcs	r3, r3
 80041ba:	647b      	str	r3, [r7, #68]	; 0x44
 80041bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041c0:	1912      	adds	r2, r2, r4
 80041c2:	eb45 0303 	adc.w	r3, r5, r3
 80041c6:	f04f 0000 	mov.w	r0, #0
 80041ca:	f04f 0100 	mov.w	r1, #0
 80041ce:	00d9      	lsls	r1, r3, #3
 80041d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041d4:	00d0      	lsls	r0, r2, #3
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	1911      	adds	r1, r2, r4
 80041dc:	6639      	str	r1, [r7, #96]	; 0x60
 80041de:	416b      	adcs	r3, r5
 80041e0:	667b      	str	r3, [r7, #100]	; 0x64
 80041e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	1891      	adds	r1, r2, r2
 80041ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80041f0:	415b      	adcs	r3, r3
 80041f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80041fc:	f7fc fd4c 	bl	8000c98 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4ba5      	ldr	r3, [pc, #660]	; (800449c <UART_SetConfig+0x38c>)
 8004206:	fba3 2302 	umull	r2, r3, r3, r2
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	011e      	lsls	r6, r3, #4
 800420e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004210:	461c      	mov	r4, r3
 8004212:	f04f 0500 	mov.w	r5, #0
 8004216:	4622      	mov	r2, r4
 8004218:	462b      	mov	r3, r5
 800421a:	1891      	adds	r1, r2, r2
 800421c:	6339      	str	r1, [r7, #48]	; 0x30
 800421e:	415b      	adcs	r3, r3
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
 8004222:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004226:	1912      	adds	r2, r2, r4
 8004228:	eb45 0303 	adc.w	r3, r5, r3
 800422c:	f04f 0000 	mov.w	r0, #0
 8004230:	f04f 0100 	mov.w	r1, #0
 8004234:	00d9      	lsls	r1, r3, #3
 8004236:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800423a:	00d0      	lsls	r0, r2, #3
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	1911      	adds	r1, r2, r4
 8004242:	65b9      	str	r1, [r7, #88]	; 0x58
 8004244:	416b      	adcs	r3, r5
 8004246:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	461a      	mov	r2, r3
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	1891      	adds	r1, r2, r2
 8004254:	62b9      	str	r1, [r7, #40]	; 0x28
 8004256:	415b      	adcs	r3, r3
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800425a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800425e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004262:	f7fc fd19 	bl	8000c98 <__aeabi_uldivmod>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4b8c      	ldr	r3, [pc, #560]	; (800449c <UART_SetConfig+0x38c>)
 800426c:	fba3 1302 	umull	r1, r3, r3, r2
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	2164      	movs	r1, #100	; 0x64
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	3332      	adds	r3, #50	; 0x32
 800427e:	4a87      	ldr	r2, [pc, #540]	; (800449c <UART_SetConfig+0x38c>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800428c:	441e      	add	r6, r3
 800428e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004290:	4618      	mov	r0, r3
 8004292:	f04f 0100 	mov.w	r1, #0
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	1894      	adds	r4, r2, r2
 800429c:	623c      	str	r4, [r7, #32]
 800429e:	415b      	adcs	r3, r3
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
 80042a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042a6:	1812      	adds	r2, r2, r0
 80042a8:	eb41 0303 	adc.w	r3, r1, r3
 80042ac:	f04f 0400 	mov.w	r4, #0
 80042b0:	f04f 0500 	mov.w	r5, #0
 80042b4:	00dd      	lsls	r5, r3, #3
 80042b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042ba:	00d4      	lsls	r4, r2, #3
 80042bc:	4622      	mov	r2, r4
 80042be:	462b      	mov	r3, r5
 80042c0:	1814      	adds	r4, r2, r0
 80042c2:	653c      	str	r4, [r7, #80]	; 0x50
 80042c4:	414b      	adcs	r3, r1
 80042c6:	657b      	str	r3, [r7, #84]	; 0x54
 80042c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	461a      	mov	r2, r3
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	1891      	adds	r1, r2, r2
 80042d4:	61b9      	str	r1, [r7, #24]
 80042d6:	415b      	adcs	r3, r3
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80042e2:	f7fc fcd9 	bl	8000c98 <__aeabi_uldivmod>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4b6c      	ldr	r3, [pc, #432]	; (800449c <UART_SetConfig+0x38c>)
 80042ec:	fba3 1302 	umull	r1, r3, r3, r2
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	2164      	movs	r1, #100	; 0x64
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	3332      	adds	r3, #50	; 0x32
 80042fe:	4a67      	ldr	r2, [pc, #412]	; (800449c <UART_SetConfig+0x38c>)
 8004300:	fba2 2303 	umull	r2, r3, r2, r3
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	f003 0207 	and.w	r2, r3, #7
 800430a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4432      	add	r2, r6
 8004310:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004312:	e0b9      	b.n	8004488 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004316:	461c      	mov	r4, r3
 8004318:	f04f 0500 	mov.w	r5, #0
 800431c:	4622      	mov	r2, r4
 800431e:	462b      	mov	r3, r5
 8004320:	1891      	adds	r1, r2, r2
 8004322:	6139      	str	r1, [r7, #16]
 8004324:	415b      	adcs	r3, r3
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800432c:	1912      	adds	r2, r2, r4
 800432e:	eb45 0303 	adc.w	r3, r5, r3
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f04f 0100 	mov.w	r1, #0
 800433a:	00d9      	lsls	r1, r3, #3
 800433c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004340:	00d0      	lsls	r0, r2, #3
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	eb12 0804 	adds.w	r8, r2, r4
 800434a:	eb43 0905 	adc.w	r9, r3, r5
 800434e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	4618      	mov	r0, r3
 8004354:	f04f 0100 	mov.w	r1, #0
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	008b      	lsls	r3, r1, #2
 8004362:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004366:	0082      	lsls	r2, r0, #2
 8004368:	4640      	mov	r0, r8
 800436a:	4649      	mov	r1, r9
 800436c:	f7fc fc94 	bl	8000c98 <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4b49      	ldr	r3, [pc, #292]	; (800449c <UART_SetConfig+0x38c>)
 8004376:	fba3 2302 	umull	r2, r3, r3, r2
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	011e      	lsls	r6, r3, #4
 800437e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004380:	4618      	mov	r0, r3
 8004382:	f04f 0100 	mov.w	r1, #0
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	1894      	adds	r4, r2, r2
 800438c:	60bc      	str	r4, [r7, #8]
 800438e:	415b      	adcs	r3, r3
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004396:	1812      	adds	r2, r2, r0
 8004398:	eb41 0303 	adc.w	r3, r1, r3
 800439c:	f04f 0400 	mov.w	r4, #0
 80043a0:	f04f 0500 	mov.w	r5, #0
 80043a4:	00dd      	lsls	r5, r3, #3
 80043a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043aa:	00d4      	lsls	r4, r2, #3
 80043ac:	4622      	mov	r2, r4
 80043ae:	462b      	mov	r3, r5
 80043b0:	1814      	adds	r4, r2, r0
 80043b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80043b4:	414b      	adcs	r3, r1
 80043b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	4618      	mov	r0, r3
 80043be:	f04f 0100 	mov.w	r1, #0
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	008b      	lsls	r3, r1, #2
 80043cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043d0:	0082      	lsls	r2, r0, #2
 80043d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80043d6:	f7fc fc5f 	bl	8000c98 <__aeabi_uldivmod>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4b2f      	ldr	r3, [pc, #188]	; (800449c <UART_SetConfig+0x38c>)
 80043e0:	fba3 1302 	umull	r1, r3, r3, r2
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	2164      	movs	r1, #100	; 0x64
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	3332      	adds	r3, #50	; 0x32
 80043f2:	4a2a      	ldr	r2, [pc, #168]	; (800449c <UART_SetConfig+0x38c>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043fe:	441e      	add	r6, r3
 8004400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004402:	4618      	mov	r0, r3
 8004404:	f04f 0100 	mov.w	r1, #0
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	1894      	adds	r4, r2, r2
 800440e:	603c      	str	r4, [r7, #0]
 8004410:	415b      	adcs	r3, r3
 8004412:	607b      	str	r3, [r7, #4]
 8004414:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004418:	1812      	adds	r2, r2, r0
 800441a:	eb41 0303 	adc.w	r3, r1, r3
 800441e:	f04f 0400 	mov.w	r4, #0
 8004422:	f04f 0500 	mov.w	r5, #0
 8004426:	00dd      	lsls	r5, r3, #3
 8004428:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800442c:	00d4      	lsls	r4, r2, #3
 800442e:	4622      	mov	r2, r4
 8004430:	462b      	mov	r3, r5
 8004432:	eb12 0a00 	adds.w	sl, r2, r0
 8004436:	eb43 0b01 	adc.w	fp, r3, r1
 800443a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4618      	mov	r0, r3
 8004440:	f04f 0100 	mov.w	r1, #0
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	008b      	lsls	r3, r1, #2
 800444e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004452:	0082      	lsls	r2, r0, #2
 8004454:	4650      	mov	r0, sl
 8004456:	4659      	mov	r1, fp
 8004458:	f7fc fc1e 	bl	8000c98 <__aeabi_uldivmod>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4b0e      	ldr	r3, [pc, #56]	; (800449c <UART_SetConfig+0x38c>)
 8004462:	fba3 1302 	umull	r1, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2164      	movs	r1, #100	; 0x64
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	3332      	adds	r3, #50	; 0x32
 8004474:	4a09      	ldr	r2, [pc, #36]	; (800449c <UART_SetConfig+0x38c>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	f003 020f 	and.w	r2, r3, #15
 8004480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4432      	add	r2, r6
 8004486:	609a      	str	r2, [r3, #8]
}
 8004488:	bf00      	nop
 800448a:	377c      	adds	r7, #124	; 0x7c
 800448c:	46bd      	mov	sp, r7
 800448e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004492:	bf00      	nop
 8004494:	40011000 	.word	0x40011000
 8004498:	40011400 	.word	0x40011400
 800449c:	51eb851f 	.word	0x51eb851f

080044a0 <calloc>:
 80044a0:	4b02      	ldr	r3, [pc, #8]	; (80044ac <calloc+0xc>)
 80044a2:	460a      	mov	r2, r1
 80044a4:	4601      	mov	r1, r0
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	f000 b842 	b.w	8004530 <_calloc_r>
 80044ac:	2000000c 	.word	0x2000000c

080044b0 <__errno>:
 80044b0:	4b01      	ldr	r3, [pc, #4]	; (80044b8 <__errno+0x8>)
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	2000000c 	.word	0x2000000c

080044bc <__libc_init_array>:
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	4d0d      	ldr	r5, [pc, #52]	; (80044f4 <__libc_init_array+0x38>)
 80044c0:	4c0d      	ldr	r4, [pc, #52]	; (80044f8 <__libc_init_array+0x3c>)
 80044c2:	1b64      	subs	r4, r4, r5
 80044c4:	10a4      	asrs	r4, r4, #2
 80044c6:	2600      	movs	r6, #0
 80044c8:	42a6      	cmp	r6, r4
 80044ca:	d109      	bne.n	80044e0 <__libc_init_array+0x24>
 80044cc:	4d0b      	ldr	r5, [pc, #44]	; (80044fc <__libc_init_array+0x40>)
 80044ce:	4c0c      	ldr	r4, [pc, #48]	; (8004500 <__libc_init_array+0x44>)
 80044d0:	f004 fc4a 	bl	8008d68 <_init>
 80044d4:	1b64      	subs	r4, r4, r5
 80044d6:	10a4      	asrs	r4, r4, #2
 80044d8:	2600      	movs	r6, #0
 80044da:	42a6      	cmp	r6, r4
 80044dc:	d105      	bne.n	80044ea <__libc_init_array+0x2e>
 80044de:	bd70      	pop	{r4, r5, r6, pc}
 80044e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e4:	4798      	blx	r3
 80044e6:	3601      	adds	r6, #1
 80044e8:	e7ee      	b.n	80044c8 <__libc_init_array+0xc>
 80044ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ee:	4798      	blx	r3
 80044f0:	3601      	adds	r6, #1
 80044f2:	e7f2      	b.n	80044da <__libc_init_array+0x1e>
 80044f4:	0800949c 	.word	0x0800949c
 80044f8:	0800949c 	.word	0x0800949c
 80044fc:	0800949c 	.word	0x0800949c
 8004500:	080094a0 	.word	0x080094a0

08004504 <memcpy>:
 8004504:	440a      	add	r2, r1
 8004506:	4291      	cmp	r1, r2
 8004508:	f100 33ff 	add.w	r3, r0, #4294967295
 800450c:	d100      	bne.n	8004510 <memcpy+0xc>
 800450e:	4770      	bx	lr
 8004510:	b510      	push	{r4, lr}
 8004512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800451a:	4291      	cmp	r1, r2
 800451c:	d1f9      	bne.n	8004512 <memcpy+0xe>
 800451e:	bd10      	pop	{r4, pc}

08004520 <memset>:
 8004520:	4402      	add	r2, r0
 8004522:	4603      	mov	r3, r0
 8004524:	4293      	cmp	r3, r2
 8004526:	d100      	bne.n	800452a <memset+0xa>
 8004528:	4770      	bx	lr
 800452a:	f803 1b01 	strb.w	r1, [r3], #1
 800452e:	e7f9      	b.n	8004524 <memset+0x4>

08004530 <_calloc_r>:
 8004530:	b513      	push	{r0, r1, r4, lr}
 8004532:	434a      	muls	r2, r1
 8004534:	4611      	mov	r1, r2
 8004536:	9201      	str	r2, [sp, #4]
 8004538:	f000 f80a 	bl	8004550 <_malloc_r>
 800453c:	4604      	mov	r4, r0
 800453e:	b118      	cbz	r0, 8004548 <_calloc_r+0x18>
 8004540:	9a01      	ldr	r2, [sp, #4]
 8004542:	2100      	movs	r1, #0
 8004544:	f7ff ffec 	bl	8004520 <memset>
 8004548:	4620      	mov	r0, r4
 800454a:	b002      	add	sp, #8
 800454c:	bd10      	pop	{r4, pc}
	...

08004550 <_malloc_r>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	1ccd      	adds	r5, r1, #3
 8004554:	f025 0503 	bic.w	r5, r5, #3
 8004558:	3508      	adds	r5, #8
 800455a:	2d0c      	cmp	r5, #12
 800455c:	bf38      	it	cc
 800455e:	250c      	movcc	r5, #12
 8004560:	2d00      	cmp	r5, #0
 8004562:	4606      	mov	r6, r0
 8004564:	db01      	blt.n	800456a <_malloc_r+0x1a>
 8004566:	42a9      	cmp	r1, r5
 8004568:	d903      	bls.n	8004572 <_malloc_r+0x22>
 800456a:	230c      	movs	r3, #12
 800456c:	6033      	str	r3, [r6, #0]
 800456e:	2000      	movs	r0, #0
 8004570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004572:	f002 ffb3 	bl	80074dc <__malloc_lock>
 8004576:	4921      	ldr	r1, [pc, #132]	; (80045fc <_malloc_r+0xac>)
 8004578:	680a      	ldr	r2, [r1, #0]
 800457a:	4614      	mov	r4, r2
 800457c:	b99c      	cbnz	r4, 80045a6 <_malloc_r+0x56>
 800457e:	4f20      	ldr	r7, [pc, #128]	; (8004600 <_malloc_r+0xb0>)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	b923      	cbnz	r3, 800458e <_malloc_r+0x3e>
 8004584:	4621      	mov	r1, r4
 8004586:	4630      	mov	r0, r6
 8004588:	f000 feb6 	bl	80052f8 <_sbrk_r>
 800458c:	6038      	str	r0, [r7, #0]
 800458e:	4629      	mov	r1, r5
 8004590:	4630      	mov	r0, r6
 8004592:	f000 feb1 	bl	80052f8 <_sbrk_r>
 8004596:	1c43      	adds	r3, r0, #1
 8004598:	d123      	bne.n	80045e2 <_malloc_r+0x92>
 800459a:	230c      	movs	r3, #12
 800459c:	6033      	str	r3, [r6, #0]
 800459e:	4630      	mov	r0, r6
 80045a0:	f002 ffa2 	bl	80074e8 <__malloc_unlock>
 80045a4:	e7e3      	b.n	800456e <_malloc_r+0x1e>
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	1b5b      	subs	r3, r3, r5
 80045aa:	d417      	bmi.n	80045dc <_malloc_r+0x8c>
 80045ac:	2b0b      	cmp	r3, #11
 80045ae:	d903      	bls.n	80045b8 <_malloc_r+0x68>
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	441c      	add	r4, r3
 80045b4:	6025      	str	r5, [r4, #0]
 80045b6:	e004      	b.n	80045c2 <_malloc_r+0x72>
 80045b8:	6863      	ldr	r3, [r4, #4]
 80045ba:	42a2      	cmp	r2, r4
 80045bc:	bf0c      	ite	eq
 80045be:	600b      	streq	r3, [r1, #0]
 80045c0:	6053      	strne	r3, [r2, #4]
 80045c2:	4630      	mov	r0, r6
 80045c4:	f002 ff90 	bl	80074e8 <__malloc_unlock>
 80045c8:	f104 000b 	add.w	r0, r4, #11
 80045cc:	1d23      	adds	r3, r4, #4
 80045ce:	f020 0007 	bic.w	r0, r0, #7
 80045d2:	1ac2      	subs	r2, r0, r3
 80045d4:	d0cc      	beq.n	8004570 <_malloc_r+0x20>
 80045d6:	1a1b      	subs	r3, r3, r0
 80045d8:	50a3      	str	r3, [r4, r2]
 80045da:	e7c9      	b.n	8004570 <_malloc_r+0x20>
 80045dc:	4622      	mov	r2, r4
 80045de:	6864      	ldr	r4, [r4, #4]
 80045e0:	e7cc      	b.n	800457c <_malloc_r+0x2c>
 80045e2:	1cc4      	adds	r4, r0, #3
 80045e4:	f024 0403 	bic.w	r4, r4, #3
 80045e8:	42a0      	cmp	r0, r4
 80045ea:	d0e3      	beq.n	80045b4 <_malloc_r+0x64>
 80045ec:	1a21      	subs	r1, r4, r0
 80045ee:	4630      	mov	r0, r6
 80045f0:	f000 fe82 	bl	80052f8 <_sbrk_r>
 80045f4:	3001      	adds	r0, #1
 80045f6:	d1dd      	bne.n	80045b4 <_malloc_r+0x64>
 80045f8:	e7cf      	b.n	800459a <_malloc_r+0x4a>
 80045fa:	bf00      	nop
 80045fc:	20000428 	.word	0x20000428
 8004600:	2000042c 	.word	0x2000042c

08004604 <__cvt>:
 8004604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004608:	ec55 4b10 	vmov	r4, r5, d0
 800460c:	2d00      	cmp	r5, #0
 800460e:	460e      	mov	r6, r1
 8004610:	4619      	mov	r1, r3
 8004612:	462b      	mov	r3, r5
 8004614:	bfbb      	ittet	lt
 8004616:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800461a:	461d      	movlt	r5, r3
 800461c:	2300      	movge	r3, #0
 800461e:	232d      	movlt	r3, #45	; 0x2d
 8004620:	700b      	strb	r3, [r1, #0]
 8004622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004624:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004628:	4691      	mov	r9, r2
 800462a:	f023 0820 	bic.w	r8, r3, #32
 800462e:	bfbc      	itt	lt
 8004630:	4622      	movlt	r2, r4
 8004632:	4614      	movlt	r4, r2
 8004634:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004638:	d005      	beq.n	8004646 <__cvt+0x42>
 800463a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800463e:	d100      	bne.n	8004642 <__cvt+0x3e>
 8004640:	3601      	adds	r6, #1
 8004642:	2102      	movs	r1, #2
 8004644:	e000      	b.n	8004648 <__cvt+0x44>
 8004646:	2103      	movs	r1, #3
 8004648:	ab03      	add	r3, sp, #12
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	ab02      	add	r3, sp, #8
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	ec45 4b10 	vmov	d0, r4, r5
 8004654:	4653      	mov	r3, sl
 8004656:	4632      	mov	r2, r6
 8004658:	f001 fdc6 	bl	80061e8 <_dtoa_r>
 800465c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004660:	4607      	mov	r7, r0
 8004662:	d102      	bne.n	800466a <__cvt+0x66>
 8004664:	f019 0f01 	tst.w	r9, #1
 8004668:	d022      	beq.n	80046b0 <__cvt+0xac>
 800466a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800466e:	eb07 0906 	add.w	r9, r7, r6
 8004672:	d110      	bne.n	8004696 <__cvt+0x92>
 8004674:	783b      	ldrb	r3, [r7, #0]
 8004676:	2b30      	cmp	r3, #48	; 0x30
 8004678:	d10a      	bne.n	8004690 <__cvt+0x8c>
 800467a:	2200      	movs	r2, #0
 800467c:	2300      	movs	r3, #0
 800467e:	4620      	mov	r0, r4
 8004680:	4629      	mov	r1, r5
 8004682:	f7fc fa29 	bl	8000ad8 <__aeabi_dcmpeq>
 8004686:	b918      	cbnz	r0, 8004690 <__cvt+0x8c>
 8004688:	f1c6 0601 	rsb	r6, r6, #1
 800468c:	f8ca 6000 	str.w	r6, [sl]
 8004690:	f8da 3000 	ldr.w	r3, [sl]
 8004694:	4499      	add	r9, r3
 8004696:	2200      	movs	r2, #0
 8004698:	2300      	movs	r3, #0
 800469a:	4620      	mov	r0, r4
 800469c:	4629      	mov	r1, r5
 800469e:	f7fc fa1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80046a2:	b108      	cbz	r0, 80046a8 <__cvt+0xa4>
 80046a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80046a8:	2230      	movs	r2, #48	; 0x30
 80046aa:	9b03      	ldr	r3, [sp, #12]
 80046ac:	454b      	cmp	r3, r9
 80046ae:	d307      	bcc.n	80046c0 <__cvt+0xbc>
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046b4:	1bdb      	subs	r3, r3, r7
 80046b6:	4638      	mov	r0, r7
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	b004      	add	sp, #16
 80046bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c0:	1c59      	adds	r1, r3, #1
 80046c2:	9103      	str	r1, [sp, #12]
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	e7f0      	b.n	80046aa <__cvt+0xa6>

080046c8 <__exponent>:
 80046c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ca:	4603      	mov	r3, r0
 80046cc:	2900      	cmp	r1, #0
 80046ce:	bfb8      	it	lt
 80046d0:	4249      	neglt	r1, r1
 80046d2:	f803 2b02 	strb.w	r2, [r3], #2
 80046d6:	bfb4      	ite	lt
 80046d8:	222d      	movlt	r2, #45	; 0x2d
 80046da:	222b      	movge	r2, #43	; 0x2b
 80046dc:	2909      	cmp	r1, #9
 80046de:	7042      	strb	r2, [r0, #1]
 80046e0:	dd2a      	ble.n	8004738 <__exponent+0x70>
 80046e2:	f10d 0407 	add.w	r4, sp, #7
 80046e6:	46a4      	mov	ip, r4
 80046e8:	270a      	movs	r7, #10
 80046ea:	46a6      	mov	lr, r4
 80046ec:	460a      	mov	r2, r1
 80046ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80046f2:	fb07 1516 	mls	r5, r7, r6, r1
 80046f6:	3530      	adds	r5, #48	; 0x30
 80046f8:	2a63      	cmp	r2, #99	; 0x63
 80046fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80046fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004702:	4631      	mov	r1, r6
 8004704:	dcf1      	bgt.n	80046ea <__exponent+0x22>
 8004706:	3130      	adds	r1, #48	; 0x30
 8004708:	f1ae 0502 	sub.w	r5, lr, #2
 800470c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004710:	1c44      	adds	r4, r0, #1
 8004712:	4629      	mov	r1, r5
 8004714:	4561      	cmp	r1, ip
 8004716:	d30a      	bcc.n	800472e <__exponent+0x66>
 8004718:	f10d 0209 	add.w	r2, sp, #9
 800471c:	eba2 020e 	sub.w	r2, r2, lr
 8004720:	4565      	cmp	r5, ip
 8004722:	bf88      	it	hi
 8004724:	2200      	movhi	r2, #0
 8004726:	4413      	add	r3, r2
 8004728:	1a18      	subs	r0, r3, r0
 800472a:	b003      	add	sp, #12
 800472c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800472e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004732:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004736:	e7ed      	b.n	8004714 <__exponent+0x4c>
 8004738:	2330      	movs	r3, #48	; 0x30
 800473a:	3130      	adds	r1, #48	; 0x30
 800473c:	7083      	strb	r3, [r0, #2]
 800473e:	70c1      	strb	r1, [r0, #3]
 8004740:	1d03      	adds	r3, r0, #4
 8004742:	e7f1      	b.n	8004728 <__exponent+0x60>

08004744 <_printf_float>:
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	ed2d 8b02 	vpush	{d8}
 800474c:	b08d      	sub	sp, #52	; 0x34
 800474e:	460c      	mov	r4, r1
 8004750:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004754:	4616      	mov	r6, r2
 8004756:	461f      	mov	r7, r3
 8004758:	4605      	mov	r5, r0
 800475a:	f002 fea1 	bl	80074a0 <_localeconv_r>
 800475e:	f8d0 a000 	ldr.w	sl, [r0]
 8004762:	4650      	mov	r0, sl
 8004764:	f7fb fd3c 	bl	80001e0 <strlen>
 8004768:	2300      	movs	r3, #0
 800476a:	930a      	str	r3, [sp, #40]	; 0x28
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	9305      	str	r3, [sp, #20]
 8004770:	f8d8 3000 	ldr.w	r3, [r8]
 8004774:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004778:	3307      	adds	r3, #7
 800477a:	f023 0307 	bic.w	r3, r3, #7
 800477e:	f103 0208 	add.w	r2, r3, #8
 8004782:	f8c8 2000 	str.w	r2, [r8]
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800478e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004792:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004796:	9307      	str	r3, [sp, #28]
 8004798:	f8cd 8018 	str.w	r8, [sp, #24]
 800479c:	ee08 0a10 	vmov	s16, r0
 80047a0:	4b9f      	ldr	r3, [pc, #636]	; (8004a20 <_printf_float+0x2dc>)
 80047a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047a6:	f04f 32ff 	mov.w	r2, #4294967295
 80047aa:	f7fc f9c7 	bl	8000b3c <__aeabi_dcmpun>
 80047ae:	bb88      	cbnz	r0, 8004814 <_printf_float+0xd0>
 80047b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047b4:	4b9a      	ldr	r3, [pc, #616]	; (8004a20 <_printf_float+0x2dc>)
 80047b6:	f04f 32ff 	mov.w	r2, #4294967295
 80047ba:	f7fc f9a1 	bl	8000b00 <__aeabi_dcmple>
 80047be:	bb48      	cbnz	r0, 8004814 <_printf_float+0xd0>
 80047c0:	2200      	movs	r2, #0
 80047c2:	2300      	movs	r3, #0
 80047c4:	4640      	mov	r0, r8
 80047c6:	4649      	mov	r1, r9
 80047c8:	f7fc f990 	bl	8000aec <__aeabi_dcmplt>
 80047cc:	b110      	cbz	r0, 80047d4 <_printf_float+0x90>
 80047ce:	232d      	movs	r3, #45	; 0x2d
 80047d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d4:	4b93      	ldr	r3, [pc, #588]	; (8004a24 <_printf_float+0x2e0>)
 80047d6:	4894      	ldr	r0, [pc, #592]	; (8004a28 <_printf_float+0x2e4>)
 80047d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80047dc:	bf94      	ite	ls
 80047de:	4698      	movls	r8, r3
 80047e0:	4680      	movhi	r8, r0
 80047e2:	2303      	movs	r3, #3
 80047e4:	6123      	str	r3, [r4, #16]
 80047e6:	9b05      	ldr	r3, [sp, #20]
 80047e8:	f023 0204 	bic.w	r2, r3, #4
 80047ec:	6022      	str	r2, [r4, #0]
 80047ee:	f04f 0900 	mov.w	r9, #0
 80047f2:	9700      	str	r7, [sp, #0]
 80047f4:	4633      	mov	r3, r6
 80047f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80047f8:	4621      	mov	r1, r4
 80047fa:	4628      	mov	r0, r5
 80047fc:	f000 f9d8 	bl	8004bb0 <_printf_common>
 8004800:	3001      	adds	r0, #1
 8004802:	f040 8090 	bne.w	8004926 <_printf_float+0x1e2>
 8004806:	f04f 30ff 	mov.w	r0, #4294967295
 800480a:	b00d      	add	sp, #52	; 0x34
 800480c:	ecbd 8b02 	vpop	{d8}
 8004810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004814:	4642      	mov	r2, r8
 8004816:	464b      	mov	r3, r9
 8004818:	4640      	mov	r0, r8
 800481a:	4649      	mov	r1, r9
 800481c:	f7fc f98e 	bl	8000b3c <__aeabi_dcmpun>
 8004820:	b140      	cbz	r0, 8004834 <_printf_float+0xf0>
 8004822:	464b      	mov	r3, r9
 8004824:	2b00      	cmp	r3, #0
 8004826:	bfbc      	itt	lt
 8004828:	232d      	movlt	r3, #45	; 0x2d
 800482a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800482e:	487f      	ldr	r0, [pc, #508]	; (8004a2c <_printf_float+0x2e8>)
 8004830:	4b7f      	ldr	r3, [pc, #508]	; (8004a30 <_printf_float+0x2ec>)
 8004832:	e7d1      	b.n	80047d8 <_printf_float+0x94>
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800483a:	9206      	str	r2, [sp, #24]
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	d13f      	bne.n	80048c0 <_printf_float+0x17c>
 8004840:	2306      	movs	r3, #6
 8004842:	6063      	str	r3, [r4, #4]
 8004844:	9b05      	ldr	r3, [sp, #20]
 8004846:	6861      	ldr	r1, [r4, #4]
 8004848:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800484c:	2300      	movs	r3, #0
 800484e:	9303      	str	r3, [sp, #12]
 8004850:	ab0a      	add	r3, sp, #40	; 0x28
 8004852:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004856:	ab09      	add	r3, sp, #36	; 0x24
 8004858:	ec49 8b10 	vmov	d0, r8, r9
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	6022      	str	r2, [r4, #0]
 8004860:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004864:	4628      	mov	r0, r5
 8004866:	f7ff fecd 	bl	8004604 <__cvt>
 800486a:	9b06      	ldr	r3, [sp, #24]
 800486c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800486e:	2b47      	cmp	r3, #71	; 0x47
 8004870:	4680      	mov	r8, r0
 8004872:	d108      	bne.n	8004886 <_printf_float+0x142>
 8004874:	1cc8      	adds	r0, r1, #3
 8004876:	db02      	blt.n	800487e <_printf_float+0x13a>
 8004878:	6863      	ldr	r3, [r4, #4]
 800487a:	4299      	cmp	r1, r3
 800487c:	dd41      	ble.n	8004902 <_printf_float+0x1be>
 800487e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004882:	fa5f fb8b 	uxtb.w	fp, fp
 8004886:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800488a:	d820      	bhi.n	80048ce <_printf_float+0x18a>
 800488c:	3901      	subs	r1, #1
 800488e:	465a      	mov	r2, fp
 8004890:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004894:	9109      	str	r1, [sp, #36]	; 0x24
 8004896:	f7ff ff17 	bl	80046c8 <__exponent>
 800489a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800489c:	1813      	adds	r3, r2, r0
 800489e:	2a01      	cmp	r2, #1
 80048a0:	4681      	mov	r9, r0
 80048a2:	6123      	str	r3, [r4, #16]
 80048a4:	dc02      	bgt.n	80048ac <_printf_float+0x168>
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	07d2      	lsls	r2, r2, #31
 80048aa:	d501      	bpl.n	80048b0 <_printf_float+0x16c>
 80048ac:	3301      	adds	r3, #1
 80048ae:	6123      	str	r3, [r4, #16]
 80048b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d09c      	beq.n	80047f2 <_printf_float+0xae>
 80048b8:	232d      	movs	r3, #45	; 0x2d
 80048ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048be:	e798      	b.n	80047f2 <_printf_float+0xae>
 80048c0:	9a06      	ldr	r2, [sp, #24]
 80048c2:	2a47      	cmp	r2, #71	; 0x47
 80048c4:	d1be      	bne.n	8004844 <_printf_float+0x100>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1bc      	bne.n	8004844 <_printf_float+0x100>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e7b9      	b.n	8004842 <_printf_float+0xfe>
 80048ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80048d2:	d118      	bne.n	8004906 <_printf_float+0x1c2>
 80048d4:	2900      	cmp	r1, #0
 80048d6:	6863      	ldr	r3, [r4, #4]
 80048d8:	dd0b      	ble.n	80048f2 <_printf_float+0x1ae>
 80048da:	6121      	str	r1, [r4, #16]
 80048dc:	b913      	cbnz	r3, 80048e4 <_printf_float+0x1a0>
 80048de:	6822      	ldr	r2, [r4, #0]
 80048e0:	07d0      	lsls	r0, r2, #31
 80048e2:	d502      	bpl.n	80048ea <_printf_float+0x1a6>
 80048e4:	3301      	adds	r3, #1
 80048e6:	440b      	add	r3, r1
 80048e8:	6123      	str	r3, [r4, #16]
 80048ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80048ec:	f04f 0900 	mov.w	r9, #0
 80048f0:	e7de      	b.n	80048b0 <_printf_float+0x16c>
 80048f2:	b913      	cbnz	r3, 80048fa <_printf_float+0x1b6>
 80048f4:	6822      	ldr	r2, [r4, #0]
 80048f6:	07d2      	lsls	r2, r2, #31
 80048f8:	d501      	bpl.n	80048fe <_printf_float+0x1ba>
 80048fa:	3302      	adds	r3, #2
 80048fc:	e7f4      	b.n	80048e8 <_printf_float+0x1a4>
 80048fe:	2301      	movs	r3, #1
 8004900:	e7f2      	b.n	80048e8 <_printf_float+0x1a4>
 8004902:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004908:	4299      	cmp	r1, r3
 800490a:	db05      	blt.n	8004918 <_printf_float+0x1d4>
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	6121      	str	r1, [r4, #16]
 8004910:	07d8      	lsls	r0, r3, #31
 8004912:	d5ea      	bpl.n	80048ea <_printf_float+0x1a6>
 8004914:	1c4b      	adds	r3, r1, #1
 8004916:	e7e7      	b.n	80048e8 <_printf_float+0x1a4>
 8004918:	2900      	cmp	r1, #0
 800491a:	bfd4      	ite	le
 800491c:	f1c1 0202 	rsble	r2, r1, #2
 8004920:	2201      	movgt	r2, #1
 8004922:	4413      	add	r3, r2
 8004924:	e7e0      	b.n	80048e8 <_printf_float+0x1a4>
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	055a      	lsls	r2, r3, #21
 800492a:	d407      	bmi.n	800493c <_printf_float+0x1f8>
 800492c:	6923      	ldr	r3, [r4, #16]
 800492e:	4642      	mov	r2, r8
 8004930:	4631      	mov	r1, r6
 8004932:	4628      	mov	r0, r5
 8004934:	47b8      	blx	r7
 8004936:	3001      	adds	r0, #1
 8004938:	d12c      	bne.n	8004994 <_printf_float+0x250>
 800493a:	e764      	b.n	8004806 <_printf_float+0xc2>
 800493c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004940:	f240 80e0 	bls.w	8004b04 <_printf_float+0x3c0>
 8004944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004948:	2200      	movs	r2, #0
 800494a:	2300      	movs	r3, #0
 800494c:	f7fc f8c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004950:	2800      	cmp	r0, #0
 8004952:	d034      	beq.n	80049be <_printf_float+0x27a>
 8004954:	4a37      	ldr	r2, [pc, #220]	; (8004a34 <_printf_float+0x2f0>)
 8004956:	2301      	movs	r3, #1
 8004958:	4631      	mov	r1, r6
 800495a:	4628      	mov	r0, r5
 800495c:	47b8      	blx	r7
 800495e:	3001      	adds	r0, #1
 8004960:	f43f af51 	beq.w	8004806 <_printf_float+0xc2>
 8004964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004968:	429a      	cmp	r2, r3
 800496a:	db02      	blt.n	8004972 <_printf_float+0x22e>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	07d8      	lsls	r0, r3, #31
 8004970:	d510      	bpl.n	8004994 <_printf_float+0x250>
 8004972:	ee18 3a10 	vmov	r3, s16
 8004976:	4652      	mov	r2, sl
 8004978:	4631      	mov	r1, r6
 800497a:	4628      	mov	r0, r5
 800497c:	47b8      	blx	r7
 800497e:	3001      	adds	r0, #1
 8004980:	f43f af41 	beq.w	8004806 <_printf_float+0xc2>
 8004984:	f04f 0800 	mov.w	r8, #0
 8004988:	f104 091a 	add.w	r9, r4, #26
 800498c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800498e:	3b01      	subs	r3, #1
 8004990:	4543      	cmp	r3, r8
 8004992:	dc09      	bgt.n	80049a8 <_printf_float+0x264>
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	079b      	lsls	r3, r3, #30
 8004998:	f100 8105 	bmi.w	8004ba6 <_printf_float+0x462>
 800499c:	68e0      	ldr	r0, [r4, #12]
 800499e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049a0:	4298      	cmp	r0, r3
 80049a2:	bfb8      	it	lt
 80049a4:	4618      	movlt	r0, r3
 80049a6:	e730      	b.n	800480a <_printf_float+0xc6>
 80049a8:	2301      	movs	r3, #1
 80049aa:	464a      	mov	r2, r9
 80049ac:	4631      	mov	r1, r6
 80049ae:	4628      	mov	r0, r5
 80049b0:	47b8      	blx	r7
 80049b2:	3001      	adds	r0, #1
 80049b4:	f43f af27 	beq.w	8004806 <_printf_float+0xc2>
 80049b8:	f108 0801 	add.w	r8, r8, #1
 80049bc:	e7e6      	b.n	800498c <_printf_float+0x248>
 80049be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	dc39      	bgt.n	8004a38 <_printf_float+0x2f4>
 80049c4:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <_printf_float+0x2f0>)
 80049c6:	2301      	movs	r3, #1
 80049c8:	4631      	mov	r1, r6
 80049ca:	4628      	mov	r0, r5
 80049cc:	47b8      	blx	r7
 80049ce:	3001      	adds	r0, #1
 80049d0:	f43f af19 	beq.w	8004806 <_printf_float+0xc2>
 80049d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049d8:	4313      	orrs	r3, r2
 80049da:	d102      	bne.n	80049e2 <_printf_float+0x29e>
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	07d9      	lsls	r1, r3, #31
 80049e0:	d5d8      	bpl.n	8004994 <_printf_float+0x250>
 80049e2:	ee18 3a10 	vmov	r3, s16
 80049e6:	4652      	mov	r2, sl
 80049e8:	4631      	mov	r1, r6
 80049ea:	4628      	mov	r0, r5
 80049ec:	47b8      	blx	r7
 80049ee:	3001      	adds	r0, #1
 80049f0:	f43f af09 	beq.w	8004806 <_printf_float+0xc2>
 80049f4:	f04f 0900 	mov.w	r9, #0
 80049f8:	f104 0a1a 	add.w	sl, r4, #26
 80049fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049fe:	425b      	negs	r3, r3
 8004a00:	454b      	cmp	r3, r9
 8004a02:	dc01      	bgt.n	8004a08 <_printf_float+0x2c4>
 8004a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a06:	e792      	b.n	800492e <_printf_float+0x1ea>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	4652      	mov	r2, sl
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	4628      	mov	r0, r5
 8004a10:	47b8      	blx	r7
 8004a12:	3001      	adds	r0, #1
 8004a14:	f43f aef7 	beq.w	8004806 <_printf_float+0xc2>
 8004a18:	f109 0901 	add.w	r9, r9, #1
 8004a1c:	e7ee      	b.n	80049fc <_printf_float+0x2b8>
 8004a1e:	bf00      	nop
 8004a20:	7fefffff 	.word	0x7fefffff
 8004a24:	08008fe0 	.word	0x08008fe0
 8004a28:	08008fe4 	.word	0x08008fe4
 8004a2c:	08008fec 	.word	0x08008fec
 8004a30:	08008fe8 	.word	0x08008fe8
 8004a34:	08008ff0 	.word	0x08008ff0
 8004a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	bfa8      	it	ge
 8004a40:	461a      	movge	r2, r3
 8004a42:	2a00      	cmp	r2, #0
 8004a44:	4691      	mov	r9, r2
 8004a46:	dc37      	bgt.n	8004ab8 <_printf_float+0x374>
 8004a48:	f04f 0b00 	mov.w	fp, #0
 8004a4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a50:	f104 021a 	add.w	r2, r4, #26
 8004a54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a56:	9305      	str	r3, [sp, #20]
 8004a58:	eba3 0309 	sub.w	r3, r3, r9
 8004a5c:	455b      	cmp	r3, fp
 8004a5e:	dc33      	bgt.n	8004ac8 <_printf_float+0x384>
 8004a60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a64:	429a      	cmp	r2, r3
 8004a66:	db3b      	blt.n	8004ae0 <_printf_float+0x39c>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	07da      	lsls	r2, r3, #31
 8004a6c:	d438      	bmi.n	8004ae0 <_printf_float+0x39c>
 8004a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a70:	9b05      	ldr	r3, [sp, #20]
 8004a72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	eba2 0901 	sub.w	r9, r2, r1
 8004a7a:	4599      	cmp	r9, r3
 8004a7c:	bfa8      	it	ge
 8004a7e:	4699      	movge	r9, r3
 8004a80:	f1b9 0f00 	cmp.w	r9, #0
 8004a84:	dc35      	bgt.n	8004af2 <_printf_float+0x3ae>
 8004a86:	f04f 0800 	mov.w	r8, #0
 8004a8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a8e:	f104 0a1a 	add.w	sl, r4, #26
 8004a92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a96:	1a9b      	subs	r3, r3, r2
 8004a98:	eba3 0309 	sub.w	r3, r3, r9
 8004a9c:	4543      	cmp	r3, r8
 8004a9e:	f77f af79 	ble.w	8004994 <_printf_float+0x250>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4652      	mov	r2, sl
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	47b8      	blx	r7
 8004aac:	3001      	adds	r0, #1
 8004aae:	f43f aeaa 	beq.w	8004806 <_printf_float+0xc2>
 8004ab2:	f108 0801 	add.w	r8, r8, #1
 8004ab6:	e7ec      	b.n	8004a92 <_printf_float+0x34e>
 8004ab8:	4613      	mov	r3, r2
 8004aba:	4631      	mov	r1, r6
 8004abc:	4642      	mov	r2, r8
 8004abe:	4628      	mov	r0, r5
 8004ac0:	47b8      	blx	r7
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d1c0      	bne.n	8004a48 <_printf_float+0x304>
 8004ac6:	e69e      	b.n	8004806 <_printf_float+0xc2>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	4631      	mov	r1, r6
 8004acc:	4628      	mov	r0, r5
 8004ace:	9205      	str	r2, [sp, #20]
 8004ad0:	47b8      	blx	r7
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	f43f ae97 	beq.w	8004806 <_printf_float+0xc2>
 8004ad8:	9a05      	ldr	r2, [sp, #20]
 8004ada:	f10b 0b01 	add.w	fp, fp, #1
 8004ade:	e7b9      	b.n	8004a54 <_printf_float+0x310>
 8004ae0:	ee18 3a10 	vmov	r3, s16
 8004ae4:	4652      	mov	r2, sl
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	4628      	mov	r0, r5
 8004aea:	47b8      	blx	r7
 8004aec:	3001      	adds	r0, #1
 8004aee:	d1be      	bne.n	8004a6e <_printf_float+0x32a>
 8004af0:	e689      	b.n	8004806 <_printf_float+0xc2>
 8004af2:	9a05      	ldr	r2, [sp, #20]
 8004af4:	464b      	mov	r3, r9
 8004af6:	4442      	add	r2, r8
 8004af8:	4631      	mov	r1, r6
 8004afa:	4628      	mov	r0, r5
 8004afc:	47b8      	blx	r7
 8004afe:	3001      	adds	r0, #1
 8004b00:	d1c1      	bne.n	8004a86 <_printf_float+0x342>
 8004b02:	e680      	b.n	8004806 <_printf_float+0xc2>
 8004b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b06:	2a01      	cmp	r2, #1
 8004b08:	dc01      	bgt.n	8004b0e <_printf_float+0x3ca>
 8004b0a:	07db      	lsls	r3, r3, #31
 8004b0c:	d538      	bpl.n	8004b80 <_printf_float+0x43c>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	4642      	mov	r2, r8
 8004b12:	4631      	mov	r1, r6
 8004b14:	4628      	mov	r0, r5
 8004b16:	47b8      	blx	r7
 8004b18:	3001      	adds	r0, #1
 8004b1a:	f43f ae74 	beq.w	8004806 <_printf_float+0xc2>
 8004b1e:	ee18 3a10 	vmov	r3, s16
 8004b22:	4652      	mov	r2, sl
 8004b24:	4631      	mov	r1, r6
 8004b26:	4628      	mov	r0, r5
 8004b28:	47b8      	blx	r7
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	f43f ae6b 	beq.w	8004806 <_printf_float+0xc2>
 8004b30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b34:	2200      	movs	r2, #0
 8004b36:	2300      	movs	r3, #0
 8004b38:	f7fb ffce 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b3c:	b9d8      	cbnz	r0, 8004b76 <_printf_float+0x432>
 8004b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b40:	f108 0201 	add.w	r2, r8, #1
 8004b44:	3b01      	subs	r3, #1
 8004b46:	4631      	mov	r1, r6
 8004b48:	4628      	mov	r0, r5
 8004b4a:	47b8      	blx	r7
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d10e      	bne.n	8004b6e <_printf_float+0x42a>
 8004b50:	e659      	b.n	8004806 <_printf_float+0xc2>
 8004b52:	2301      	movs	r3, #1
 8004b54:	4652      	mov	r2, sl
 8004b56:	4631      	mov	r1, r6
 8004b58:	4628      	mov	r0, r5
 8004b5a:	47b8      	blx	r7
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	f43f ae52 	beq.w	8004806 <_printf_float+0xc2>
 8004b62:	f108 0801 	add.w	r8, r8, #1
 8004b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	4543      	cmp	r3, r8
 8004b6c:	dcf1      	bgt.n	8004b52 <_printf_float+0x40e>
 8004b6e:	464b      	mov	r3, r9
 8004b70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b74:	e6dc      	b.n	8004930 <_printf_float+0x1ec>
 8004b76:	f04f 0800 	mov.w	r8, #0
 8004b7a:	f104 0a1a 	add.w	sl, r4, #26
 8004b7e:	e7f2      	b.n	8004b66 <_printf_float+0x422>
 8004b80:	2301      	movs	r3, #1
 8004b82:	4642      	mov	r2, r8
 8004b84:	e7df      	b.n	8004b46 <_printf_float+0x402>
 8004b86:	2301      	movs	r3, #1
 8004b88:	464a      	mov	r2, r9
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	47b8      	blx	r7
 8004b90:	3001      	adds	r0, #1
 8004b92:	f43f ae38 	beq.w	8004806 <_printf_float+0xc2>
 8004b96:	f108 0801 	add.w	r8, r8, #1
 8004b9a:	68e3      	ldr	r3, [r4, #12]
 8004b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b9e:	1a5b      	subs	r3, r3, r1
 8004ba0:	4543      	cmp	r3, r8
 8004ba2:	dcf0      	bgt.n	8004b86 <_printf_float+0x442>
 8004ba4:	e6fa      	b.n	800499c <_printf_float+0x258>
 8004ba6:	f04f 0800 	mov.w	r8, #0
 8004baa:	f104 0919 	add.w	r9, r4, #25
 8004bae:	e7f4      	b.n	8004b9a <_printf_float+0x456>

08004bb0 <_printf_common>:
 8004bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb4:	4616      	mov	r6, r2
 8004bb6:	4699      	mov	r9, r3
 8004bb8:	688a      	ldr	r2, [r1, #8]
 8004bba:	690b      	ldr	r3, [r1, #16]
 8004bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	bfb8      	it	lt
 8004bc4:	4613      	movlt	r3, r2
 8004bc6:	6033      	str	r3, [r6, #0]
 8004bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bcc:	4607      	mov	r7, r0
 8004bce:	460c      	mov	r4, r1
 8004bd0:	b10a      	cbz	r2, 8004bd6 <_printf_common+0x26>
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	6033      	str	r3, [r6, #0]
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	0699      	lsls	r1, r3, #26
 8004bda:	bf42      	ittt	mi
 8004bdc:	6833      	ldrmi	r3, [r6, #0]
 8004bde:	3302      	addmi	r3, #2
 8004be0:	6033      	strmi	r3, [r6, #0]
 8004be2:	6825      	ldr	r5, [r4, #0]
 8004be4:	f015 0506 	ands.w	r5, r5, #6
 8004be8:	d106      	bne.n	8004bf8 <_printf_common+0x48>
 8004bea:	f104 0a19 	add.w	sl, r4, #25
 8004bee:	68e3      	ldr	r3, [r4, #12]
 8004bf0:	6832      	ldr	r2, [r6, #0]
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	42ab      	cmp	r3, r5
 8004bf6:	dc26      	bgt.n	8004c46 <_printf_common+0x96>
 8004bf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bfc:	1e13      	subs	r3, r2, #0
 8004bfe:	6822      	ldr	r2, [r4, #0]
 8004c00:	bf18      	it	ne
 8004c02:	2301      	movne	r3, #1
 8004c04:	0692      	lsls	r2, r2, #26
 8004c06:	d42b      	bmi.n	8004c60 <_printf_common+0xb0>
 8004c08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	4638      	mov	r0, r7
 8004c10:	47c0      	blx	r8
 8004c12:	3001      	adds	r0, #1
 8004c14:	d01e      	beq.n	8004c54 <_printf_common+0xa4>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	68e5      	ldr	r5, [r4, #12]
 8004c1a:	6832      	ldr	r2, [r6, #0]
 8004c1c:	f003 0306 	and.w	r3, r3, #6
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	bf08      	it	eq
 8004c24:	1aad      	subeq	r5, r5, r2
 8004c26:	68a3      	ldr	r3, [r4, #8]
 8004c28:	6922      	ldr	r2, [r4, #16]
 8004c2a:	bf0c      	ite	eq
 8004c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c30:	2500      	movne	r5, #0
 8004c32:	4293      	cmp	r3, r2
 8004c34:	bfc4      	itt	gt
 8004c36:	1a9b      	subgt	r3, r3, r2
 8004c38:	18ed      	addgt	r5, r5, r3
 8004c3a:	2600      	movs	r6, #0
 8004c3c:	341a      	adds	r4, #26
 8004c3e:	42b5      	cmp	r5, r6
 8004c40:	d11a      	bne.n	8004c78 <_printf_common+0xc8>
 8004c42:	2000      	movs	r0, #0
 8004c44:	e008      	b.n	8004c58 <_printf_common+0xa8>
 8004c46:	2301      	movs	r3, #1
 8004c48:	4652      	mov	r2, sl
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	47c0      	blx	r8
 8004c50:	3001      	adds	r0, #1
 8004c52:	d103      	bne.n	8004c5c <_printf_common+0xac>
 8004c54:	f04f 30ff 	mov.w	r0, #4294967295
 8004c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5c:	3501      	adds	r5, #1
 8004c5e:	e7c6      	b.n	8004bee <_printf_common+0x3e>
 8004c60:	18e1      	adds	r1, r4, r3
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	2030      	movs	r0, #48	; 0x30
 8004c66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c6a:	4422      	add	r2, r4
 8004c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c74:	3302      	adds	r3, #2
 8004c76:	e7c7      	b.n	8004c08 <_printf_common+0x58>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4622      	mov	r2, r4
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	4638      	mov	r0, r7
 8004c80:	47c0      	blx	r8
 8004c82:	3001      	adds	r0, #1
 8004c84:	d0e6      	beq.n	8004c54 <_printf_common+0xa4>
 8004c86:	3601      	adds	r6, #1
 8004c88:	e7d9      	b.n	8004c3e <_printf_common+0x8e>
	...

08004c8c <_printf_i>:
 8004c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c90:	460c      	mov	r4, r1
 8004c92:	4691      	mov	r9, r2
 8004c94:	7e27      	ldrb	r7, [r4, #24]
 8004c96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c98:	2f78      	cmp	r7, #120	; 0x78
 8004c9a:	4680      	mov	r8, r0
 8004c9c:	469a      	mov	sl, r3
 8004c9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ca2:	d807      	bhi.n	8004cb4 <_printf_i+0x28>
 8004ca4:	2f62      	cmp	r7, #98	; 0x62
 8004ca6:	d80a      	bhi.n	8004cbe <_printf_i+0x32>
 8004ca8:	2f00      	cmp	r7, #0
 8004caa:	f000 80d8 	beq.w	8004e5e <_printf_i+0x1d2>
 8004cae:	2f58      	cmp	r7, #88	; 0x58
 8004cb0:	f000 80a3 	beq.w	8004dfa <_printf_i+0x16e>
 8004cb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cbc:	e03a      	b.n	8004d34 <_printf_i+0xa8>
 8004cbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cc2:	2b15      	cmp	r3, #21
 8004cc4:	d8f6      	bhi.n	8004cb4 <_printf_i+0x28>
 8004cc6:	a001      	add	r0, pc, #4	; (adr r0, 8004ccc <_printf_i+0x40>)
 8004cc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ccc:	08004d25 	.word	0x08004d25
 8004cd0:	08004d39 	.word	0x08004d39
 8004cd4:	08004cb5 	.word	0x08004cb5
 8004cd8:	08004cb5 	.word	0x08004cb5
 8004cdc:	08004cb5 	.word	0x08004cb5
 8004ce0:	08004cb5 	.word	0x08004cb5
 8004ce4:	08004d39 	.word	0x08004d39
 8004ce8:	08004cb5 	.word	0x08004cb5
 8004cec:	08004cb5 	.word	0x08004cb5
 8004cf0:	08004cb5 	.word	0x08004cb5
 8004cf4:	08004cb5 	.word	0x08004cb5
 8004cf8:	08004e45 	.word	0x08004e45
 8004cfc:	08004d69 	.word	0x08004d69
 8004d00:	08004e27 	.word	0x08004e27
 8004d04:	08004cb5 	.word	0x08004cb5
 8004d08:	08004cb5 	.word	0x08004cb5
 8004d0c:	08004e67 	.word	0x08004e67
 8004d10:	08004cb5 	.word	0x08004cb5
 8004d14:	08004d69 	.word	0x08004d69
 8004d18:	08004cb5 	.word	0x08004cb5
 8004d1c:	08004cb5 	.word	0x08004cb5
 8004d20:	08004e2f 	.word	0x08004e2f
 8004d24:	680b      	ldr	r3, [r1, #0]
 8004d26:	1d1a      	adds	r2, r3, #4
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	600a      	str	r2, [r1, #0]
 8004d2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0a3      	b.n	8004e80 <_printf_i+0x1f4>
 8004d38:	6825      	ldr	r5, [r4, #0]
 8004d3a:	6808      	ldr	r0, [r1, #0]
 8004d3c:	062e      	lsls	r6, r5, #24
 8004d3e:	f100 0304 	add.w	r3, r0, #4
 8004d42:	d50a      	bpl.n	8004d5a <_printf_i+0xce>
 8004d44:	6805      	ldr	r5, [r0, #0]
 8004d46:	600b      	str	r3, [r1, #0]
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	da03      	bge.n	8004d54 <_printf_i+0xc8>
 8004d4c:	232d      	movs	r3, #45	; 0x2d
 8004d4e:	426d      	negs	r5, r5
 8004d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d54:	485e      	ldr	r0, [pc, #376]	; (8004ed0 <_printf_i+0x244>)
 8004d56:	230a      	movs	r3, #10
 8004d58:	e019      	b.n	8004d8e <_printf_i+0x102>
 8004d5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d5e:	6805      	ldr	r5, [r0, #0]
 8004d60:	600b      	str	r3, [r1, #0]
 8004d62:	bf18      	it	ne
 8004d64:	b22d      	sxthne	r5, r5
 8004d66:	e7ef      	b.n	8004d48 <_printf_i+0xbc>
 8004d68:	680b      	ldr	r3, [r1, #0]
 8004d6a:	6825      	ldr	r5, [r4, #0]
 8004d6c:	1d18      	adds	r0, r3, #4
 8004d6e:	6008      	str	r0, [r1, #0]
 8004d70:	0628      	lsls	r0, r5, #24
 8004d72:	d501      	bpl.n	8004d78 <_printf_i+0xec>
 8004d74:	681d      	ldr	r5, [r3, #0]
 8004d76:	e002      	b.n	8004d7e <_printf_i+0xf2>
 8004d78:	0669      	lsls	r1, r5, #25
 8004d7a:	d5fb      	bpl.n	8004d74 <_printf_i+0xe8>
 8004d7c:	881d      	ldrh	r5, [r3, #0]
 8004d7e:	4854      	ldr	r0, [pc, #336]	; (8004ed0 <_printf_i+0x244>)
 8004d80:	2f6f      	cmp	r7, #111	; 0x6f
 8004d82:	bf0c      	ite	eq
 8004d84:	2308      	moveq	r3, #8
 8004d86:	230a      	movne	r3, #10
 8004d88:	2100      	movs	r1, #0
 8004d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d8e:	6866      	ldr	r6, [r4, #4]
 8004d90:	60a6      	str	r6, [r4, #8]
 8004d92:	2e00      	cmp	r6, #0
 8004d94:	bfa2      	ittt	ge
 8004d96:	6821      	ldrge	r1, [r4, #0]
 8004d98:	f021 0104 	bicge.w	r1, r1, #4
 8004d9c:	6021      	strge	r1, [r4, #0]
 8004d9e:	b90d      	cbnz	r5, 8004da4 <_printf_i+0x118>
 8004da0:	2e00      	cmp	r6, #0
 8004da2:	d04d      	beq.n	8004e40 <_printf_i+0x1b4>
 8004da4:	4616      	mov	r6, r2
 8004da6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004daa:	fb03 5711 	mls	r7, r3, r1, r5
 8004dae:	5dc7      	ldrb	r7, [r0, r7]
 8004db0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004db4:	462f      	mov	r7, r5
 8004db6:	42bb      	cmp	r3, r7
 8004db8:	460d      	mov	r5, r1
 8004dba:	d9f4      	bls.n	8004da6 <_printf_i+0x11a>
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d10b      	bne.n	8004dd8 <_printf_i+0x14c>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	07df      	lsls	r7, r3, #31
 8004dc4:	d508      	bpl.n	8004dd8 <_printf_i+0x14c>
 8004dc6:	6923      	ldr	r3, [r4, #16]
 8004dc8:	6861      	ldr	r1, [r4, #4]
 8004dca:	4299      	cmp	r1, r3
 8004dcc:	bfde      	ittt	le
 8004dce:	2330      	movle	r3, #48	; 0x30
 8004dd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dd8:	1b92      	subs	r2, r2, r6
 8004dda:	6122      	str	r2, [r4, #16]
 8004ddc:	f8cd a000 	str.w	sl, [sp]
 8004de0:	464b      	mov	r3, r9
 8004de2:	aa03      	add	r2, sp, #12
 8004de4:	4621      	mov	r1, r4
 8004de6:	4640      	mov	r0, r8
 8004de8:	f7ff fee2 	bl	8004bb0 <_printf_common>
 8004dec:	3001      	adds	r0, #1
 8004dee:	d14c      	bne.n	8004e8a <_printf_i+0x1fe>
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
 8004df4:	b004      	add	sp, #16
 8004df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfa:	4835      	ldr	r0, [pc, #212]	; (8004ed0 <_printf_i+0x244>)
 8004dfc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	680e      	ldr	r6, [r1, #0]
 8004e04:	061f      	lsls	r7, r3, #24
 8004e06:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e0a:	600e      	str	r6, [r1, #0]
 8004e0c:	d514      	bpl.n	8004e38 <_printf_i+0x1ac>
 8004e0e:	07d9      	lsls	r1, r3, #31
 8004e10:	bf44      	itt	mi
 8004e12:	f043 0320 	orrmi.w	r3, r3, #32
 8004e16:	6023      	strmi	r3, [r4, #0]
 8004e18:	b91d      	cbnz	r5, 8004e22 <_printf_i+0x196>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	f023 0320 	bic.w	r3, r3, #32
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	2310      	movs	r3, #16
 8004e24:	e7b0      	b.n	8004d88 <_printf_i+0xfc>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	f043 0320 	orr.w	r3, r3, #32
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	2378      	movs	r3, #120	; 0x78
 8004e30:	4828      	ldr	r0, [pc, #160]	; (8004ed4 <_printf_i+0x248>)
 8004e32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e36:	e7e3      	b.n	8004e00 <_printf_i+0x174>
 8004e38:	065e      	lsls	r6, r3, #25
 8004e3a:	bf48      	it	mi
 8004e3c:	b2ad      	uxthmi	r5, r5
 8004e3e:	e7e6      	b.n	8004e0e <_printf_i+0x182>
 8004e40:	4616      	mov	r6, r2
 8004e42:	e7bb      	b.n	8004dbc <_printf_i+0x130>
 8004e44:	680b      	ldr	r3, [r1, #0]
 8004e46:	6826      	ldr	r6, [r4, #0]
 8004e48:	6960      	ldr	r0, [r4, #20]
 8004e4a:	1d1d      	adds	r5, r3, #4
 8004e4c:	600d      	str	r5, [r1, #0]
 8004e4e:	0635      	lsls	r5, r6, #24
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	d501      	bpl.n	8004e58 <_printf_i+0x1cc>
 8004e54:	6018      	str	r0, [r3, #0]
 8004e56:	e002      	b.n	8004e5e <_printf_i+0x1d2>
 8004e58:	0671      	lsls	r1, r6, #25
 8004e5a:	d5fb      	bpl.n	8004e54 <_printf_i+0x1c8>
 8004e5c:	8018      	strh	r0, [r3, #0]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6123      	str	r3, [r4, #16]
 8004e62:	4616      	mov	r6, r2
 8004e64:	e7ba      	b.n	8004ddc <_printf_i+0x150>
 8004e66:	680b      	ldr	r3, [r1, #0]
 8004e68:	1d1a      	adds	r2, r3, #4
 8004e6a:	600a      	str	r2, [r1, #0]
 8004e6c:	681e      	ldr	r6, [r3, #0]
 8004e6e:	6862      	ldr	r2, [r4, #4]
 8004e70:	2100      	movs	r1, #0
 8004e72:	4630      	mov	r0, r6
 8004e74:	f7fb f9bc 	bl	80001f0 <memchr>
 8004e78:	b108      	cbz	r0, 8004e7e <_printf_i+0x1f2>
 8004e7a:	1b80      	subs	r0, r0, r6
 8004e7c:	6060      	str	r0, [r4, #4]
 8004e7e:	6863      	ldr	r3, [r4, #4]
 8004e80:	6123      	str	r3, [r4, #16]
 8004e82:	2300      	movs	r3, #0
 8004e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e88:	e7a8      	b.n	8004ddc <_printf_i+0x150>
 8004e8a:	6923      	ldr	r3, [r4, #16]
 8004e8c:	4632      	mov	r2, r6
 8004e8e:	4649      	mov	r1, r9
 8004e90:	4640      	mov	r0, r8
 8004e92:	47d0      	blx	sl
 8004e94:	3001      	adds	r0, #1
 8004e96:	d0ab      	beq.n	8004df0 <_printf_i+0x164>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	079b      	lsls	r3, r3, #30
 8004e9c:	d413      	bmi.n	8004ec6 <_printf_i+0x23a>
 8004e9e:	68e0      	ldr	r0, [r4, #12]
 8004ea0:	9b03      	ldr	r3, [sp, #12]
 8004ea2:	4298      	cmp	r0, r3
 8004ea4:	bfb8      	it	lt
 8004ea6:	4618      	movlt	r0, r3
 8004ea8:	e7a4      	b.n	8004df4 <_printf_i+0x168>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4632      	mov	r2, r6
 8004eae:	4649      	mov	r1, r9
 8004eb0:	4640      	mov	r0, r8
 8004eb2:	47d0      	blx	sl
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d09b      	beq.n	8004df0 <_printf_i+0x164>
 8004eb8:	3501      	adds	r5, #1
 8004eba:	68e3      	ldr	r3, [r4, #12]
 8004ebc:	9903      	ldr	r1, [sp, #12]
 8004ebe:	1a5b      	subs	r3, r3, r1
 8004ec0:	42ab      	cmp	r3, r5
 8004ec2:	dcf2      	bgt.n	8004eaa <_printf_i+0x21e>
 8004ec4:	e7eb      	b.n	8004e9e <_printf_i+0x212>
 8004ec6:	2500      	movs	r5, #0
 8004ec8:	f104 0619 	add.w	r6, r4, #25
 8004ecc:	e7f5      	b.n	8004eba <_printf_i+0x22e>
 8004ece:	bf00      	nop
 8004ed0:	08008ff2 	.word	0x08008ff2
 8004ed4:	08009003 	.word	0x08009003

08004ed8 <_scanf_float>:
 8004ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004edc:	b087      	sub	sp, #28
 8004ede:	4617      	mov	r7, r2
 8004ee0:	9303      	str	r3, [sp, #12]
 8004ee2:	688b      	ldr	r3, [r1, #8]
 8004ee4:	1e5a      	subs	r2, r3, #1
 8004ee6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004eea:	bf83      	ittte	hi
 8004eec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004ef0:	195b      	addhi	r3, r3, r5
 8004ef2:	9302      	strhi	r3, [sp, #8]
 8004ef4:	2300      	movls	r3, #0
 8004ef6:	bf86      	itte	hi
 8004ef8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004efc:	608b      	strhi	r3, [r1, #8]
 8004efe:	9302      	strls	r3, [sp, #8]
 8004f00:	680b      	ldr	r3, [r1, #0]
 8004f02:	468b      	mov	fp, r1
 8004f04:	2500      	movs	r5, #0
 8004f06:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004f0a:	f84b 3b1c 	str.w	r3, [fp], #28
 8004f0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004f12:	4680      	mov	r8, r0
 8004f14:	460c      	mov	r4, r1
 8004f16:	465e      	mov	r6, fp
 8004f18:	46aa      	mov	sl, r5
 8004f1a:	46a9      	mov	r9, r5
 8004f1c:	9501      	str	r5, [sp, #4]
 8004f1e:	68a2      	ldr	r2, [r4, #8]
 8004f20:	b152      	cbz	r2, 8004f38 <_scanf_float+0x60>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b4e      	cmp	r3, #78	; 0x4e
 8004f28:	d864      	bhi.n	8004ff4 <_scanf_float+0x11c>
 8004f2a:	2b40      	cmp	r3, #64	; 0x40
 8004f2c:	d83c      	bhi.n	8004fa8 <_scanf_float+0xd0>
 8004f2e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004f32:	b2c8      	uxtb	r0, r1
 8004f34:	280e      	cmp	r0, #14
 8004f36:	d93a      	bls.n	8004fae <_scanf_float+0xd6>
 8004f38:	f1b9 0f00 	cmp.w	r9, #0
 8004f3c:	d003      	beq.n	8004f46 <_scanf_float+0x6e>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f4a:	f1ba 0f01 	cmp.w	sl, #1
 8004f4e:	f200 8113 	bhi.w	8005178 <_scanf_float+0x2a0>
 8004f52:	455e      	cmp	r6, fp
 8004f54:	f200 8105 	bhi.w	8005162 <_scanf_float+0x28a>
 8004f58:	2501      	movs	r5, #1
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	b007      	add	sp, #28
 8004f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f62:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004f66:	2a0d      	cmp	r2, #13
 8004f68:	d8e6      	bhi.n	8004f38 <_scanf_float+0x60>
 8004f6a:	a101      	add	r1, pc, #4	; (adr r1, 8004f70 <_scanf_float+0x98>)
 8004f6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004f70:	080050af 	.word	0x080050af
 8004f74:	08004f39 	.word	0x08004f39
 8004f78:	08004f39 	.word	0x08004f39
 8004f7c:	08004f39 	.word	0x08004f39
 8004f80:	0800510f 	.word	0x0800510f
 8004f84:	080050e7 	.word	0x080050e7
 8004f88:	08004f39 	.word	0x08004f39
 8004f8c:	08004f39 	.word	0x08004f39
 8004f90:	080050bd 	.word	0x080050bd
 8004f94:	08004f39 	.word	0x08004f39
 8004f98:	08004f39 	.word	0x08004f39
 8004f9c:	08004f39 	.word	0x08004f39
 8004fa0:	08004f39 	.word	0x08004f39
 8004fa4:	08005075 	.word	0x08005075
 8004fa8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004fac:	e7db      	b.n	8004f66 <_scanf_float+0x8e>
 8004fae:	290e      	cmp	r1, #14
 8004fb0:	d8c2      	bhi.n	8004f38 <_scanf_float+0x60>
 8004fb2:	a001      	add	r0, pc, #4	; (adr r0, 8004fb8 <_scanf_float+0xe0>)
 8004fb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004fb8:	08005067 	.word	0x08005067
 8004fbc:	08004f39 	.word	0x08004f39
 8004fc0:	08005067 	.word	0x08005067
 8004fc4:	080050fb 	.word	0x080050fb
 8004fc8:	08004f39 	.word	0x08004f39
 8004fcc:	08005015 	.word	0x08005015
 8004fd0:	08005051 	.word	0x08005051
 8004fd4:	08005051 	.word	0x08005051
 8004fd8:	08005051 	.word	0x08005051
 8004fdc:	08005051 	.word	0x08005051
 8004fe0:	08005051 	.word	0x08005051
 8004fe4:	08005051 	.word	0x08005051
 8004fe8:	08005051 	.word	0x08005051
 8004fec:	08005051 	.word	0x08005051
 8004ff0:	08005051 	.word	0x08005051
 8004ff4:	2b6e      	cmp	r3, #110	; 0x6e
 8004ff6:	d809      	bhi.n	800500c <_scanf_float+0x134>
 8004ff8:	2b60      	cmp	r3, #96	; 0x60
 8004ffa:	d8b2      	bhi.n	8004f62 <_scanf_float+0x8a>
 8004ffc:	2b54      	cmp	r3, #84	; 0x54
 8004ffe:	d077      	beq.n	80050f0 <_scanf_float+0x218>
 8005000:	2b59      	cmp	r3, #89	; 0x59
 8005002:	d199      	bne.n	8004f38 <_scanf_float+0x60>
 8005004:	2d07      	cmp	r5, #7
 8005006:	d197      	bne.n	8004f38 <_scanf_float+0x60>
 8005008:	2508      	movs	r5, #8
 800500a:	e029      	b.n	8005060 <_scanf_float+0x188>
 800500c:	2b74      	cmp	r3, #116	; 0x74
 800500e:	d06f      	beq.n	80050f0 <_scanf_float+0x218>
 8005010:	2b79      	cmp	r3, #121	; 0x79
 8005012:	e7f6      	b.n	8005002 <_scanf_float+0x12a>
 8005014:	6821      	ldr	r1, [r4, #0]
 8005016:	05c8      	lsls	r0, r1, #23
 8005018:	d51a      	bpl.n	8005050 <_scanf_float+0x178>
 800501a:	9b02      	ldr	r3, [sp, #8]
 800501c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005020:	6021      	str	r1, [r4, #0]
 8005022:	f109 0901 	add.w	r9, r9, #1
 8005026:	b11b      	cbz	r3, 8005030 <_scanf_float+0x158>
 8005028:	3b01      	subs	r3, #1
 800502a:	3201      	adds	r2, #1
 800502c:	9302      	str	r3, [sp, #8]
 800502e:	60a2      	str	r2, [r4, #8]
 8005030:	68a3      	ldr	r3, [r4, #8]
 8005032:	3b01      	subs	r3, #1
 8005034:	60a3      	str	r3, [r4, #8]
 8005036:	6923      	ldr	r3, [r4, #16]
 8005038:	3301      	adds	r3, #1
 800503a:	6123      	str	r3, [r4, #16]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3b01      	subs	r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	607b      	str	r3, [r7, #4]
 8005044:	f340 8084 	ble.w	8005150 <_scanf_float+0x278>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	3301      	adds	r3, #1
 800504c:	603b      	str	r3, [r7, #0]
 800504e:	e766      	b.n	8004f1e <_scanf_float+0x46>
 8005050:	eb1a 0f05 	cmn.w	sl, r5
 8005054:	f47f af70 	bne.w	8004f38 <_scanf_float+0x60>
 8005058:	6822      	ldr	r2, [r4, #0]
 800505a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800505e:	6022      	str	r2, [r4, #0]
 8005060:	f806 3b01 	strb.w	r3, [r6], #1
 8005064:	e7e4      	b.n	8005030 <_scanf_float+0x158>
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	0610      	lsls	r0, r2, #24
 800506a:	f57f af65 	bpl.w	8004f38 <_scanf_float+0x60>
 800506e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005072:	e7f4      	b.n	800505e <_scanf_float+0x186>
 8005074:	f1ba 0f00 	cmp.w	sl, #0
 8005078:	d10e      	bne.n	8005098 <_scanf_float+0x1c0>
 800507a:	f1b9 0f00 	cmp.w	r9, #0
 800507e:	d10e      	bne.n	800509e <_scanf_float+0x1c6>
 8005080:	6822      	ldr	r2, [r4, #0]
 8005082:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005086:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800508a:	d108      	bne.n	800509e <_scanf_float+0x1c6>
 800508c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005090:	6022      	str	r2, [r4, #0]
 8005092:	f04f 0a01 	mov.w	sl, #1
 8005096:	e7e3      	b.n	8005060 <_scanf_float+0x188>
 8005098:	f1ba 0f02 	cmp.w	sl, #2
 800509c:	d055      	beq.n	800514a <_scanf_float+0x272>
 800509e:	2d01      	cmp	r5, #1
 80050a0:	d002      	beq.n	80050a8 <_scanf_float+0x1d0>
 80050a2:	2d04      	cmp	r5, #4
 80050a4:	f47f af48 	bne.w	8004f38 <_scanf_float+0x60>
 80050a8:	3501      	adds	r5, #1
 80050aa:	b2ed      	uxtb	r5, r5
 80050ac:	e7d8      	b.n	8005060 <_scanf_float+0x188>
 80050ae:	f1ba 0f01 	cmp.w	sl, #1
 80050b2:	f47f af41 	bne.w	8004f38 <_scanf_float+0x60>
 80050b6:	f04f 0a02 	mov.w	sl, #2
 80050ba:	e7d1      	b.n	8005060 <_scanf_float+0x188>
 80050bc:	b97d      	cbnz	r5, 80050de <_scanf_float+0x206>
 80050be:	f1b9 0f00 	cmp.w	r9, #0
 80050c2:	f47f af3c 	bne.w	8004f3e <_scanf_float+0x66>
 80050c6:	6822      	ldr	r2, [r4, #0]
 80050c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80050cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80050d0:	f47f af39 	bne.w	8004f46 <_scanf_float+0x6e>
 80050d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80050d8:	6022      	str	r2, [r4, #0]
 80050da:	2501      	movs	r5, #1
 80050dc:	e7c0      	b.n	8005060 <_scanf_float+0x188>
 80050de:	2d03      	cmp	r5, #3
 80050e0:	d0e2      	beq.n	80050a8 <_scanf_float+0x1d0>
 80050e2:	2d05      	cmp	r5, #5
 80050e4:	e7de      	b.n	80050a4 <_scanf_float+0x1cc>
 80050e6:	2d02      	cmp	r5, #2
 80050e8:	f47f af26 	bne.w	8004f38 <_scanf_float+0x60>
 80050ec:	2503      	movs	r5, #3
 80050ee:	e7b7      	b.n	8005060 <_scanf_float+0x188>
 80050f0:	2d06      	cmp	r5, #6
 80050f2:	f47f af21 	bne.w	8004f38 <_scanf_float+0x60>
 80050f6:	2507      	movs	r5, #7
 80050f8:	e7b2      	b.n	8005060 <_scanf_float+0x188>
 80050fa:	6822      	ldr	r2, [r4, #0]
 80050fc:	0591      	lsls	r1, r2, #22
 80050fe:	f57f af1b 	bpl.w	8004f38 <_scanf_float+0x60>
 8005102:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005106:	6022      	str	r2, [r4, #0]
 8005108:	f8cd 9004 	str.w	r9, [sp, #4]
 800510c:	e7a8      	b.n	8005060 <_scanf_float+0x188>
 800510e:	6822      	ldr	r2, [r4, #0]
 8005110:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005114:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005118:	d006      	beq.n	8005128 <_scanf_float+0x250>
 800511a:	0550      	lsls	r0, r2, #21
 800511c:	f57f af0c 	bpl.w	8004f38 <_scanf_float+0x60>
 8005120:	f1b9 0f00 	cmp.w	r9, #0
 8005124:	f43f af0f 	beq.w	8004f46 <_scanf_float+0x6e>
 8005128:	0591      	lsls	r1, r2, #22
 800512a:	bf58      	it	pl
 800512c:	9901      	ldrpl	r1, [sp, #4]
 800512e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005132:	bf58      	it	pl
 8005134:	eba9 0101 	subpl.w	r1, r9, r1
 8005138:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800513c:	bf58      	it	pl
 800513e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005142:	6022      	str	r2, [r4, #0]
 8005144:	f04f 0900 	mov.w	r9, #0
 8005148:	e78a      	b.n	8005060 <_scanf_float+0x188>
 800514a:	f04f 0a03 	mov.w	sl, #3
 800514e:	e787      	b.n	8005060 <_scanf_float+0x188>
 8005150:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005154:	4639      	mov	r1, r7
 8005156:	4640      	mov	r0, r8
 8005158:	4798      	blx	r3
 800515a:	2800      	cmp	r0, #0
 800515c:	f43f aedf 	beq.w	8004f1e <_scanf_float+0x46>
 8005160:	e6ea      	b.n	8004f38 <_scanf_float+0x60>
 8005162:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005166:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800516a:	463a      	mov	r2, r7
 800516c:	4640      	mov	r0, r8
 800516e:	4798      	blx	r3
 8005170:	6923      	ldr	r3, [r4, #16]
 8005172:	3b01      	subs	r3, #1
 8005174:	6123      	str	r3, [r4, #16]
 8005176:	e6ec      	b.n	8004f52 <_scanf_float+0x7a>
 8005178:	1e6b      	subs	r3, r5, #1
 800517a:	2b06      	cmp	r3, #6
 800517c:	d825      	bhi.n	80051ca <_scanf_float+0x2f2>
 800517e:	2d02      	cmp	r5, #2
 8005180:	d836      	bhi.n	80051f0 <_scanf_float+0x318>
 8005182:	455e      	cmp	r6, fp
 8005184:	f67f aee8 	bls.w	8004f58 <_scanf_float+0x80>
 8005188:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800518c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005190:	463a      	mov	r2, r7
 8005192:	4640      	mov	r0, r8
 8005194:	4798      	blx	r3
 8005196:	6923      	ldr	r3, [r4, #16]
 8005198:	3b01      	subs	r3, #1
 800519a:	6123      	str	r3, [r4, #16]
 800519c:	e7f1      	b.n	8005182 <_scanf_float+0x2aa>
 800519e:	9802      	ldr	r0, [sp, #8]
 80051a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80051a8:	9002      	str	r0, [sp, #8]
 80051aa:	463a      	mov	r2, r7
 80051ac:	4640      	mov	r0, r8
 80051ae:	4798      	blx	r3
 80051b0:	6923      	ldr	r3, [r4, #16]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	6123      	str	r3, [r4, #16]
 80051b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051ba:	fa5f fa8a 	uxtb.w	sl, sl
 80051be:	f1ba 0f02 	cmp.w	sl, #2
 80051c2:	d1ec      	bne.n	800519e <_scanf_float+0x2c6>
 80051c4:	3d03      	subs	r5, #3
 80051c6:	b2ed      	uxtb	r5, r5
 80051c8:	1b76      	subs	r6, r6, r5
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	05da      	lsls	r2, r3, #23
 80051ce:	d52f      	bpl.n	8005230 <_scanf_float+0x358>
 80051d0:	055b      	lsls	r3, r3, #21
 80051d2:	d510      	bpl.n	80051f6 <_scanf_float+0x31e>
 80051d4:	455e      	cmp	r6, fp
 80051d6:	f67f aebf 	bls.w	8004f58 <_scanf_float+0x80>
 80051da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80051e2:	463a      	mov	r2, r7
 80051e4:	4640      	mov	r0, r8
 80051e6:	4798      	blx	r3
 80051e8:	6923      	ldr	r3, [r4, #16]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	6123      	str	r3, [r4, #16]
 80051ee:	e7f1      	b.n	80051d4 <_scanf_float+0x2fc>
 80051f0:	46aa      	mov	sl, r5
 80051f2:	9602      	str	r6, [sp, #8]
 80051f4:	e7df      	b.n	80051b6 <_scanf_float+0x2de>
 80051f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80051fa:	6923      	ldr	r3, [r4, #16]
 80051fc:	2965      	cmp	r1, #101	; 0x65
 80051fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8005202:	f106 35ff 	add.w	r5, r6, #4294967295
 8005206:	6123      	str	r3, [r4, #16]
 8005208:	d00c      	beq.n	8005224 <_scanf_float+0x34c>
 800520a:	2945      	cmp	r1, #69	; 0x45
 800520c:	d00a      	beq.n	8005224 <_scanf_float+0x34c>
 800520e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005212:	463a      	mov	r2, r7
 8005214:	4640      	mov	r0, r8
 8005216:	4798      	blx	r3
 8005218:	6923      	ldr	r3, [r4, #16]
 800521a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800521e:	3b01      	subs	r3, #1
 8005220:	1eb5      	subs	r5, r6, #2
 8005222:	6123      	str	r3, [r4, #16]
 8005224:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005228:	463a      	mov	r2, r7
 800522a:	4640      	mov	r0, r8
 800522c:	4798      	blx	r3
 800522e:	462e      	mov	r6, r5
 8005230:	6825      	ldr	r5, [r4, #0]
 8005232:	f015 0510 	ands.w	r5, r5, #16
 8005236:	d158      	bne.n	80052ea <_scanf_float+0x412>
 8005238:	7035      	strb	r5, [r6, #0]
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005244:	d11c      	bne.n	8005280 <_scanf_float+0x3a8>
 8005246:	9b01      	ldr	r3, [sp, #4]
 8005248:	454b      	cmp	r3, r9
 800524a:	eba3 0209 	sub.w	r2, r3, r9
 800524e:	d124      	bne.n	800529a <_scanf_float+0x3c2>
 8005250:	2200      	movs	r2, #0
 8005252:	4659      	mov	r1, fp
 8005254:	4640      	mov	r0, r8
 8005256:	f000 fead 	bl	8005fb4 <_strtod_r>
 800525a:	9b03      	ldr	r3, [sp, #12]
 800525c:	6821      	ldr	r1, [r4, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f011 0f02 	tst.w	r1, #2
 8005264:	ec57 6b10 	vmov	r6, r7, d0
 8005268:	f103 0204 	add.w	r2, r3, #4
 800526c:	d020      	beq.n	80052b0 <_scanf_float+0x3d8>
 800526e:	9903      	ldr	r1, [sp, #12]
 8005270:	600a      	str	r2, [r1, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	e9c3 6700 	strd	r6, r7, [r3]
 8005278:	68e3      	ldr	r3, [r4, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	60e3      	str	r3, [r4, #12]
 800527e:	e66c      	b.n	8004f5a <_scanf_float+0x82>
 8005280:	9b04      	ldr	r3, [sp, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0e4      	beq.n	8005250 <_scanf_float+0x378>
 8005286:	9905      	ldr	r1, [sp, #20]
 8005288:	230a      	movs	r3, #10
 800528a:	462a      	mov	r2, r5
 800528c:	3101      	adds	r1, #1
 800528e:	4640      	mov	r0, r8
 8005290:	f000 ff1a 	bl	80060c8 <_strtol_r>
 8005294:	9b04      	ldr	r3, [sp, #16]
 8005296:	9e05      	ldr	r6, [sp, #20]
 8005298:	1ac2      	subs	r2, r0, r3
 800529a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800529e:	429e      	cmp	r6, r3
 80052a0:	bf28      	it	cs
 80052a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80052a6:	4912      	ldr	r1, [pc, #72]	; (80052f0 <_scanf_float+0x418>)
 80052a8:	4630      	mov	r0, r6
 80052aa:	f000 f83b 	bl	8005324 <siprintf>
 80052ae:	e7cf      	b.n	8005250 <_scanf_float+0x378>
 80052b0:	f011 0f04 	tst.w	r1, #4
 80052b4:	9903      	ldr	r1, [sp, #12]
 80052b6:	600a      	str	r2, [r1, #0]
 80052b8:	d1db      	bne.n	8005272 <_scanf_float+0x39a>
 80052ba:	f8d3 8000 	ldr.w	r8, [r3]
 80052be:	ee10 2a10 	vmov	r2, s0
 80052c2:	ee10 0a10 	vmov	r0, s0
 80052c6:	463b      	mov	r3, r7
 80052c8:	4639      	mov	r1, r7
 80052ca:	f7fb fc37 	bl	8000b3c <__aeabi_dcmpun>
 80052ce:	b128      	cbz	r0, 80052dc <_scanf_float+0x404>
 80052d0:	4808      	ldr	r0, [pc, #32]	; (80052f4 <_scanf_float+0x41c>)
 80052d2:	f000 f821 	bl	8005318 <nanf>
 80052d6:	ed88 0a00 	vstr	s0, [r8]
 80052da:	e7cd      	b.n	8005278 <_scanf_float+0x3a0>
 80052dc:	4630      	mov	r0, r6
 80052de:	4639      	mov	r1, r7
 80052e0:	f7fb fc8a 	bl	8000bf8 <__aeabi_d2f>
 80052e4:	f8c8 0000 	str.w	r0, [r8]
 80052e8:	e7c6      	b.n	8005278 <_scanf_float+0x3a0>
 80052ea:	2500      	movs	r5, #0
 80052ec:	e635      	b.n	8004f5a <_scanf_float+0x82>
 80052ee:	bf00      	nop
 80052f0:	08009014 	.word	0x08009014
 80052f4:	08009430 	.word	0x08009430

080052f8 <_sbrk_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4d06      	ldr	r5, [pc, #24]	; (8005314 <_sbrk_r+0x1c>)
 80052fc:	2300      	movs	r3, #0
 80052fe:	4604      	mov	r4, r0
 8005300:	4608      	mov	r0, r1
 8005302:	602b      	str	r3, [r5, #0]
 8005304:	f7fc fd84 	bl	8001e10 <_sbrk>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d102      	bne.n	8005312 <_sbrk_r+0x1a>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b103      	cbz	r3, 8005312 <_sbrk_r+0x1a>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	20000538 	.word	0x20000538

08005318 <nanf>:
 8005318:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005320 <nanf+0x8>
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	7fc00000 	.word	0x7fc00000

08005324 <siprintf>:
 8005324:	b40e      	push	{r1, r2, r3}
 8005326:	b500      	push	{lr}
 8005328:	b09c      	sub	sp, #112	; 0x70
 800532a:	ab1d      	add	r3, sp, #116	; 0x74
 800532c:	9002      	str	r0, [sp, #8]
 800532e:	9006      	str	r0, [sp, #24]
 8005330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005334:	4809      	ldr	r0, [pc, #36]	; (800535c <siprintf+0x38>)
 8005336:	9107      	str	r1, [sp, #28]
 8005338:	9104      	str	r1, [sp, #16]
 800533a:	4909      	ldr	r1, [pc, #36]	; (8005360 <siprintf+0x3c>)
 800533c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005340:	9105      	str	r1, [sp, #20]
 8005342:	6800      	ldr	r0, [r0, #0]
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	a902      	add	r1, sp, #8
 8005348:	f002 fe3c 	bl	8007fc4 <_svfiprintf_r>
 800534c:	9b02      	ldr	r3, [sp, #8]
 800534e:	2200      	movs	r2, #0
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	b01c      	add	sp, #112	; 0x70
 8005354:	f85d eb04 	ldr.w	lr, [sp], #4
 8005358:	b003      	add	sp, #12
 800535a:	4770      	bx	lr
 800535c:	2000000c 	.word	0x2000000c
 8005360:	ffff0208 	.word	0xffff0208

08005364 <sulp>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	4604      	mov	r4, r0
 8005368:	460d      	mov	r5, r1
 800536a:	ec45 4b10 	vmov	d0, r4, r5
 800536e:	4616      	mov	r6, r2
 8005370:	f002 fc2c 	bl	8007bcc <__ulp>
 8005374:	ec51 0b10 	vmov	r0, r1, d0
 8005378:	b17e      	cbz	r6, 800539a <sulp+0x36>
 800537a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800537e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005382:	2b00      	cmp	r3, #0
 8005384:	dd09      	ble.n	800539a <sulp+0x36>
 8005386:	051b      	lsls	r3, r3, #20
 8005388:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800538c:	2400      	movs	r4, #0
 800538e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005392:	4622      	mov	r2, r4
 8005394:	462b      	mov	r3, r5
 8005396:	f7fb f937 	bl	8000608 <__aeabi_dmul>
 800539a:	bd70      	pop	{r4, r5, r6, pc}
 800539c:	0000      	movs	r0, r0
	...

080053a0 <_strtod_l>:
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	b0a3      	sub	sp, #140	; 0x8c
 80053a6:	461f      	mov	r7, r3
 80053a8:	2300      	movs	r3, #0
 80053aa:	931e      	str	r3, [sp, #120]	; 0x78
 80053ac:	4ba4      	ldr	r3, [pc, #656]	; (8005640 <_strtod_l+0x2a0>)
 80053ae:	9219      	str	r2, [sp, #100]	; 0x64
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	9307      	str	r3, [sp, #28]
 80053b4:	4604      	mov	r4, r0
 80053b6:	4618      	mov	r0, r3
 80053b8:	4688      	mov	r8, r1
 80053ba:	f7fa ff11 	bl	80001e0 <strlen>
 80053be:	f04f 0a00 	mov.w	sl, #0
 80053c2:	4605      	mov	r5, r0
 80053c4:	f04f 0b00 	mov.w	fp, #0
 80053c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80053cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80053ce:	781a      	ldrb	r2, [r3, #0]
 80053d0:	2a2b      	cmp	r2, #43	; 0x2b
 80053d2:	d04c      	beq.n	800546e <_strtod_l+0xce>
 80053d4:	d839      	bhi.n	800544a <_strtod_l+0xaa>
 80053d6:	2a0d      	cmp	r2, #13
 80053d8:	d832      	bhi.n	8005440 <_strtod_l+0xa0>
 80053da:	2a08      	cmp	r2, #8
 80053dc:	d832      	bhi.n	8005444 <_strtod_l+0xa4>
 80053de:	2a00      	cmp	r2, #0
 80053e0:	d03c      	beq.n	800545c <_strtod_l+0xbc>
 80053e2:	2300      	movs	r3, #0
 80053e4:	930e      	str	r3, [sp, #56]	; 0x38
 80053e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80053e8:	7833      	ldrb	r3, [r6, #0]
 80053ea:	2b30      	cmp	r3, #48	; 0x30
 80053ec:	f040 80b4 	bne.w	8005558 <_strtod_l+0x1b8>
 80053f0:	7873      	ldrb	r3, [r6, #1]
 80053f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80053f6:	2b58      	cmp	r3, #88	; 0x58
 80053f8:	d16c      	bne.n	80054d4 <_strtod_l+0x134>
 80053fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	ab1e      	add	r3, sp, #120	; 0x78
 8005400:	9702      	str	r7, [sp, #8]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	4a8f      	ldr	r2, [pc, #572]	; (8005644 <_strtod_l+0x2a4>)
 8005406:	ab1f      	add	r3, sp, #124	; 0x7c
 8005408:	a91d      	add	r1, sp, #116	; 0x74
 800540a:	4620      	mov	r0, r4
 800540c:	f001 fd40 	bl	8006e90 <__gethex>
 8005410:	f010 0707 	ands.w	r7, r0, #7
 8005414:	4605      	mov	r5, r0
 8005416:	d005      	beq.n	8005424 <_strtod_l+0x84>
 8005418:	2f06      	cmp	r7, #6
 800541a:	d12a      	bne.n	8005472 <_strtod_l+0xd2>
 800541c:	3601      	adds	r6, #1
 800541e:	2300      	movs	r3, #0
 8005420:	961d      	str	r6, [sp, #116]	; 0x74
 8005422:	930e      	str	r3, [sp, #56]	; 0x38
 8005424:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005426:	2b00      	cmp	r3, #0
 8005428:	f040 8596 	bne.w	8005f58 <_strtod_l+0xbb8>
 800542c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800542e:	b1db      	cbz	r3, 8005468 <_strtod_l+0xc8>
 8005430:	4652      	mov	r2, sl
 8005432:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005436:	ec43 2b10 	vmov	d0, r2, r3
 800543a:	b023      	add	sp, #140	; 0x8c
 800543c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005440:	2a20      	cmp	r2, #32
 8005442:	d1ce      	bne.n	80053e2 <_strtod_l+0x42>
 8005444:	3301      	adds	r3, #1
 8005446:	931d      	str	r3, [sp, #116]	; 0x74
 8005448:	e7c0      	b.n	80053cc <_strtod_l+0x2c>
 800544a:	2a2d      	cmp	r2, #45	; 0x2d
 800544c:	d1c9      	bne.n	80053e2 <_strtod_l+0x42>
 800544e:	2201      	movs	r2, #1
 8005450:	920e      	str	r2, [sp, #56]	; 0x38
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	921d      	str	r2, [sp, #116]	; 0x74
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1c4      	bne.n	80053e6 <_strtod_l+0x46>
 800545c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800545e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005462:	2b00      	cmp	r3, #0
 8005464:	f040 8576 	bne.w	8005f54 <_strtod_l+0xbb4>
 8005468:	4652      	mov	r2, sl
 800546a:	465b      	mov	r3, fp
 800546c:	e7e3      	b.n	8005436 <_strtod_l+0x96>
 800546e:	2200      	movs	r2, #0
 8005470:	e7ee      	b.n	8005450 <_strtod_l+0xb0>
 8005472:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005474:	b13a      	cbz	r2, 8005486 <_strtod_l+0xe6>
 8005476:	2135      	movs	r1, #53	; 0x35
 8005478:	a820      	add	r0, sp, #128	; 0x80
 800547a:	f002 fcb2 	bl	8007de2 <__copybits>
 800547e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005480:	4620      	mov	r0, r4
 8005482:	f002 f877 	bl	8007574 <_Bfree>
 8005486:	3f01      	subs	r7, #1
 8005488:	2f05      	cmp	r7, #5
 800548a:	d807      	bhi.n	800549c <_strtod_l+0xfc>
 800548c:	e8df f007 	tbb	[pc, r7]
 8005490:	1d180b0e 	.word	0x1d180b0e
 8005494:	030e      	.short	0x030e
 8005496:	f04f 0b00 	mov.w	fp, #0
 800549a:	46da      	mov	sl, fp
 800549c:	0728      	lsls	r0, r5, #28
 800549e:	d5c1      	bpl.n	8005424 <_strtod_l+0x84>
 80054a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80054a4:	e7be      	b.n	8005424 <_strtod_l+0x84>
 80054a6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80054aa:	e7f7      	b.n	800549c <_strtod_l+0xfc>
 80054ac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80054b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80054b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80054b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80054ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80054be:	e7ed      	b.n	800549c <_strtod_l+0xfc>
 80054c0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005648 <_strtod_l+0x2a8>
 80054c4:	f04f 0a00 	mov.w	sl, #0
 80054c8:	e7e8      	b.n	800549c <_strtod_l+0xfc>
 80054ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80054ce:	f04f 3aff 	mov.w	sl, #4294967295
 80054d2:	e7e3      	b.n	800549c <_strtod_l+0xfc>
 80054d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	921d      	str	r2, [sp, #116]	; 0x74
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	2b30      	cmp	r3, #48	; 0x30
 80054de:	d0f9      	beq.n	80054d4 <_strtod_l+0x134>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d09f      	beq.n	8005424 <_strtod_l+0x84>
 80054e4:	2301      	movs	r3, #1
 80054e6:	f04f 0900 	mov.w	r9, #0
 80054ea:	9304      	str	r3, [sp, #16]
 80054ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80054ee:	930a      	str	r3, [sp, #40]	; 0x28
 80054f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80054f4:	464f      	mov	r7, r9
 80054f6:	220a      	movs	r2, #10
 80054f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80054fa:	7806      	ldrb	r6, [r0, #0]
 80054fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005500:	b2d9      	uxtb	r1, r3
 8005502:	2909      	cmp	r1, #9
 8005504:	d92a      	bls.n	800555c <_strtod_l+0x1bc>
 8005506:	9907      	ldr	r1, [sp, #28]
 8005508:	462a      	mov	r2, r5
 800550a:	f002 fe65 	bl	80081d8 <strncmp>
 800550e:	b398      	cbz	r0, 8005578 <_strtod_l+0x1d8>
 8005510:	2000      	movs	r0, #0
 8005512:	4633      	mov	r3, r6
 8005514:	463d      	mov	r5, r7
 8005516:	9007      	str	r0, [sp, #28]
 8005518:	4602      	mov	r2, r0
 800551a:	2b65      	cmp	r3, #101	; 0x65
 800551c:	d001      	beq.n	8005522 <_strtod_l+0x182>
 800551e:	2b45      	cmp	r3, #69	; 0x45
 8005520:	d118      	bne.n	8005554 <_strtod_l+0x1b4>
 8005522:	b91d      	cbnz	r5, 800552c <_strtod_l+0x18c>
 8005524:	9b04      	ldr	r3, [sp, #16]
 8005526:	4303      	orrs	r3, r0
 8005528:	d098      	beq.n	800545c <_strtod_l+0xbc>
 800552a:	2500      	movs	r5, #0
 800552c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005530:	f108 0301 	add.w	r3, r8, #1
 8005534:	931d      	str	r3, [sp, #116]	; 0x74
 8005536:	f898 3001 	ldrb.w	r3, [r8, #1]
 800553a:	2b2b      	cmp	r3, #43	; 0x2b
 800553c:	d075      	beq.n	800562a <_strtod_l+0x28a>
 800553e:	2b2d      	cmp	r3, #45	; 0x2d
 8005540:	d07b      	beq.n	800563a <_strtod_l+0x29a>
 8005542:	f04f 0c00 	mov.w	ip, #0
 8005546:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800554a:	2909      	cmp	r1, #9
 800554c:	f240 8082 	bls.w	8005654 <_strtod_l+0x2b4>
 8005550:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005554:	2600      	movs	r6, #0
 8005556:	e09d      	b.n	8005694 <_strtod_l+0x2f4>
 8005558:	2300      	movs	r3, #0
 800555a:	e7c4      	b.n	80054e6 <_strtod_l+0x146>
 800555c:	2f08      	cmp	r7, #8
 800555e:	bfd8      	it	le
 8005560:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005562:	f100 0001 	add.w	r0, r0, #1
 8005566:	bfda      	itte	le
 8005568:	fb02 3301 	mlale	r3, r2, r1, r3
 800556c:	9309      	strle	r3, [sp, #36]	; 0x24
 800556e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005572:	3701      	adds	r7, #1
 8005574:	901d      	str	r0, [sp, #116]	; 0x74
 8005576:	e7bf      	b.n	80054f8 <_strtod_l+0x158>
 8005578:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800557a:	195a      	adds	r2, r3, r5
 800557c:	921d      	str	r2, [sp, #116]	; 0x74
 800557e:	5d5b      	ldrb	r3, [r3, r5]
 8005580:	2f00      	cmp	r7, #0
 8005582:	d037      	beq.n	80055f4 <_strtod_l+0x254>
 8005584:	9007      	str	r0, [sp, #28]
 8005586:	463d      	mov	r5, r7
 8005588:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800558c:	2a09      	cmp	r2, #9
 800558e:	d912      	bls.n	80055b6 <_strtod_l+0x216>
 8005590:	2201      	movs	r2, #1
 8005592:	e7c2      	b.n	800551a <_strtod_l+0x17a>
 8005594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	921d      	str	r2, [sp, #116]	; 0x74
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	3001      	adds	r0, #1
 800559e:	2b30      	cmp	r3, #48	; 0x30
 80055a0:	d0f8      	beq.n	8005594 <_strtod_l+0x1f4>
 80055a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80055a6:	2a08      	cmp	r2, #8
 80055a8:	f200 84db 	bhi.w	8005f62 <_strtod_l+0xbc2>
 80055ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80055ae:	9007      	str	r0, [sp, #28]
 80055b0:	2000      	movs	r0, #0
 80055b2:	920a      	str	r2, [sp, #40]	; 0x28
 80055b4:	4605      	mov	r5, r0
 80055b6:	3b30      	subs	r3, #48	; 0x30
 80055b8:	f100 0201 	add.w	r2, r0, #1
 80055bc:	d014      	beq.n	80055e8 <_strtod_l+0x248>
 80055be:	9907      	ldr	r1, [sp, #28]
 80055c0:	4411      	add	r1, r2
 80055c2:	9107      	str	r1, [sp, #28]
 80055c4:	462a      	mov	r2, r5
 80055c6:	eb00 0e05 	add.w	lr, r0, r5
 80055ca:	210a      	movs	r1, #10
 80055cc:	4572      	cmp	r2, lr
 80055ce:	d113      	bne.n	80055f8 <_strtod_l+0x258>
 80055d0:	182a      	adds	r2, r5, r0
 80055d2:	2a08      	cmp	r2, #8
 80055d4:	f105 0501 	add.w	r5, r5, #1
 80055d8:	4405      	add	r5, r0
 80055da:	dc1c      	bgt.n	8005616 <_strtod_l+0x276>
 80055dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055de:	220a      	movs	r2, #10
 80055e0:	fb02 3301 	mla	r3, r2, r1, r3
 80055e4:	9309      	str	r3, [sp, #36]	; 0x24
 80055e6:	2200      	movs	r2, #0
 80055e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80055ea:	1c59      	adds	r1, r3, #1
 80055ec:	911d      	str	r1, [sp, #116]	; 0x74
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	4610      	mov	r0, r2
 80055f2:	e7c9      	b.n	8005588 <_strtod_l+0x1e8>
 80055f4:	4638      	mov	r0, r7
 80055f6:	e7d2      	b.n	800559e <_strtod_l+0x1fe>
 80055f8:	2a08      	cmp	r2, #8
 80055fa:	dc04      	bgt.n	8005606 <_strtod_l+0x266>
 80055fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80055fe:	434e      	muls	r6, r1
 8005600:	9609      	str	r6, [sp, #36]	; 0x24
 8005602:	3201      	adds	r2, #1
 8005604:	e7e2      	b.n	80055cc <_strtod_l+0x22c>
 8005606:	f102 0c01 	add.w	ip, r2, #1
 800560a:	f1bc 0f10 	cmp.w	ip, #16
 800560e:	bfd8      	it	le
 8005610:	fb01 f909 	mulle.w	r9, r1, r9
 8005614:	e7f5      	b.n	8005602 <_strtod_l+0x262>
 8005616:	2d10      	cmp	r5, #16
 8005618:	bfdc      	itt	le
 800561a:	220a      	movle	r2, #10
 800561c:	fb02 3909 	mlale	r9, r2, r9, r3
 8005620:	e7e1      	b.n	80055e6 <_strtod_l+0x246>
 8005622:	2300      	movs	r3, #0
 8005624:	9307      	str	r3, [sp, #28]
 8005626:	2201      	movs	r2, #1
 8005628:	e77c      	b.n	8005524 <_strtod_l+0x184>
 800562a:	f04f 0c00 	mov.w	ip, #0
 800562e:	f108 0302 	add.w	r3, r8, #2
 8005632:	931d      	str	r3, [sp, #116]	; 0x74
 8005634:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005638:	e785      	b.n	8005546 <_strtod_l+0x1a6>
 800563a:	f04f 0c01 	mov.w	ip, #1
 800563e:	e7f6      	b.n	800562e <_strtod_l+0x28e>
 8005640:	08009270 	.word	0x08009270
 8005644:	0800901c 	.word	0x0800901c
 8005648:	7ff00000 	.word	0x7ff00000
 800564c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800564e:	1c59      	adds	r1, r3, #1
 8005650:	911d      	str	r1, [sp, #116]	; 0x74
 8005652:	785b      	ldrb	r3, [r3, #1]
 8005654:	2b30      	cmp	r3, #48	; 0x30
 8005656:	d0f9      	beq.n	800564c <_strtod_l+0x2ac>
 8005658:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800565c:	2908      	cmp	r1, #8
 800565e:	f63f af79 	bhi.w	8005554 <_strtod_l+0x1b4>
 8005662:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005666:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005668:	9308      	str	r3, [sp, #32]
 800566a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800566c:	1c59      	adds	r1, r3, #1
 800566e:	911d      	str	r1, [sp, #116]	; 0x74
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8005676:	2e09      	cmp	r6, #9
 8005678:	d937      	bls.n	80056ea <_strtod_l+0x34a>
 800567a:	9e08      	ldr	r6, [sp, #32]
 800567c:	1b89      	subs	r1, r1, r6
 800567e:	2908      	cmp	r1, #8
 8005680:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005684:	dc02      	bgt.n	800568c <_strtod_l+0x2ec>
 8005686:	4576      	cmp	r6, lr
 8005688:	bfa8      	it	ge
 800568a:	4676      	movge	r6, lr
 800568c:	f1bc 0f00 	cmp.w	ip, #0
 8005690:	d000      	beq.n	8005694 <_strtod_l+0x2f4>
 8005692:	4276      	negs	r6, r6
 8005694:	2d00      	cmp	r5, #0
 8005696:	d14f      	bne.n	8005738 <_strtod_l+0x398>
 8005698:	9904      	ldr	r1, [sp, #16]
 800569a:	4301      	orrs	r1, r0
 800569c:	f47f aec2 	bne.w	8005424 <_strtod_l+0x84>
 80056a0:	2a00      	cmp	r2, #0
 80056a2:	f47f aedb 	bne.w	800545c <_strtod_l+0xbc>
 80056a6:	2b69      	cmp	r3, #105	; 0x69
 80056a8:	d027      	beq.n	80056fa <_strtod_l+0x35a>
 80056aa:	dc24      	bgt.n	80056f6 <_strtod_l+0x356>
 80056ac:	2b49      	cmp	r3, #73	; 0x49
 80056ae:	d024      	beq.n	80056fa <_strtod_l+0x35a>
 80056b0:	2b4e      	cmp	r3, #78	; 0x4e
 80056b2:	f47f aed3 	bne.w	800545c <_strtod_l+0xbc>
 80056b6:	499e      	ldr	r1, [pc, #632]	; (8005930 <_strtod_l+0x590>)
 80056b8:	a81d      	add	r0, sp, #116	; 0x74
 80056ba:	f001 fe41 	bl	8007340 <__match>
 80056be:	2800      	cmp	r0, #0
 80056c0:	f43f aecc 	beq.w	800545c <_strtod_l+0xbc>
 80056c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b28      	cmp	r3, #40	; 0x28
 80056ca:	d12d      	bne.n	8005728 <_strtod_l+0x388>
 80056cc:	4999      	ldr	r1, [pc, #612]	; (8005934 <_strtod_l+0x594>)
 80056ce:	aa20      	add	r2, sp, #128	; 0x80
 80056d0:	a81d      	add	r0, sp, #116	; 0x74
 80056d2:	f001 fe49 	bl	8007368 <__hexnan>
 80056d6:	2805      	cmp	r0, #5
 80056d8:	d126      	bne.n	8005728 <_strtod_l+0x388>
 80056da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056dc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80056e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80056e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80056e8:	e69c      	b.n	8005424 <_strtod_l+0x84>
 80056ea:	210a      	movs	r1, #10
 80056ec:	fb01 3e0e 	mla	lr, r1, lr, r3
 80056f0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80056f4:	e7b9      	b.n	800566a <_strtod_l+0x2ca>
 80056f6:	2b6e      	cmp	r3, #110	; 0x6e
 80056f8:	e7db      	b.n	80056b2 <_strtod_l+0x312>
 80056fa:	498f      	ldr	r1, [pc, #572]	; (8005938 <_strtod_l+0x598>)
 80056fc:	a81d      	add	r0, sp, #116	; 0x74
 80056fe:	f001 fe1f 	bl	8007340 <__match>
 8005702:	2800      	cmp	r0, #0
 8005704:	f43f aeaa 	beq.w	800545c <_strtod_l+0xbc>
 8005708:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800570a:	498c      	ldr	r1, [pc, #560]	; (800593c <_strtod_l+0x59c>)
 800570c:	3b01      	subs	r3, #1
 800570e:	a81d      	add	r0, sp, #116	; 0x74
 8005710:	931d      	str	r3, [sp, #116]	; 0x74
 8005712:	f001 fe15 	bl	8007340 <__match>
 8005716:	b910      	cbnz	r0, 800571e <_strtod_l+0x37e>
 8005718:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800571a:	3301      	adds	r3, #1
 800571c:	931d      	str	r3, [sp, #116]	; 0x74
 800571e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800594c <_strtod_l+0x5ac>
 8005722:	f04f 0a00 	mov.w	sl, #0
 8005726:	e67d      	b.n	8005424 <_strtod_l+0x84>
 8005728:	4885      	ldr	r0, [pc, #532]	; (8005940 <_strtod_l+0x5a0>)
 800572a:	f002 fd4d 	bl	80081c8 <nan>
 800572e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005732:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005736:	e675      	b.n	8005424 <_strtod_l+0x84>
 8005738:	9b07      	ldr	r3, [sp, #28]
 800573a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800573c:	1af3      	subs	r3, r6, r3
 800573e:	2f00      	cmp	r7, #0
 8005740:	bf08      	it	eq
 8005742:	462f      	moveq	r7, r5
 8005744:	2d10      	cmp	r5, #16
 8005746:	9308      	str	r3, [sp, #32]
 8005748:	46a8      	mov	r8, r5
 800574a:	bfa8      	it	ge
 800574c:	f04f 0810 	movge.w	r8, #16
 8005750:	f7fa fee0 	bl	8000514 <__aeabi_ui2d>
 8005754:	2d09      	cmp	r5, #9
 8005756:	4682      	mov	sl, r0
 8005758:	468b      	mov	fp, r1
 800575a:	dd13      	ble.n	8005784 <_strtod_l+0x3e4>
 800575c:	4b79      	ldr	r3, [pc, #484]	; (8005944 <_strtod_l+0x5a4>)
 800575e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005762:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005766:	f7fa ff4f 	bl	8000608 <__aeabi_dmul>
 800576a:	4682      	mov	sl, r0
 800576c:	4648      	mov	r0, r9
 800576e:	468b      	mov	fp, r1
 8005770:	f7fa fed0 	bl	8000514 <__aeabi_ui2d>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4650      	mov	r0, sl
 800577a:	4659      	mov	r1, fp
 800577c:	f7fa fd8e 	bl	800029c <__adddf3>
 8005780:	4682      	mov	sl, r0
 8005782:	468b      	mov	fp, r1
 8005784:	2d0f      	cmp	r5, #15
 8005786:	dc38      	bgt.n	80057fa <_strtod_l+0x45a>
 8005788:	9b08      	ldr	r3, [sp, #32]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f43f ae4a 	beq.w	8005424 <_strtod_l+0x84>
 8005790:	dd24      	ble.n	80057dc <_strtod_l+0x43c>
 8005792:	2b16      	cmp	r3, #22
 8005794:	dc0b      	bgt.n	80057ae <_strtod_l+0x40e>
 8005796:	4d6b      	ldr	r5, [pc, #428]	; (8005944 <_strtod_l+0x5a4>)
 8005798:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800579c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80057a0:	4652      	mov	r2, sl
 80057a2:	465b      	mov	r3, fp
 80057a4:	f7fa ff30 	bl	8000608 <__aeabi_dmul>
 80057a8:	4682      	mov	sl, r0
 80057aa:	468b      	mov	fp, r1
 80057ac:	e63a      	b.n	8005424 <_strtod_l+0x84>
 80057ae:	9a08      	ldr	r2, [sp, #32]
 80057b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80057b4:	4293      	cmp	r3, r2
 80057b6:	db20      	blt.n	80057fa <_strtod_l+0x45a>
 80057b8:	4c62      	ldr	r4, [pc, #392]	; (8005944 <_strtod_l+0x5a4>)
 80057ba:	f1c5 050f 	rsb	r5, r5, #15
 80057be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80057c2:	4652      	mov	r2, sl
 80057c4:	465b      	mov	r3, fp
 80057c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057ca:	f7fa ff1d 	bl	8000608 <__aeabi_dmul>
 80057ce:	9b08      	ldr	r3, [sp, #32]
 80057d0:	1b5d      	subs	r5, r3, r5
 80057d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80057d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80057da:	e7e3      	b.n	80057a4 <_strtod_l+0x404>
 80057dc:	9b08      	ldr	r3, [sp, #32]
 80057de:	3316      	adds	r3, #22
 80057e0:	db0b      	blt.n	80057fa <_strtod_l+0x45a>
 80057e2:	9b07      	ldr	r3, [sp, #28]
 80057e4:	4a57      	ldr	r2, [pc, #348]	; (8005944 <_strtod_l+0x5a4>)
 80057e6:	1b9e      	subs	r6, r3, r6
 80057e8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80057ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057f0:	4650      	mov	r0, sl
 80057f2:	4659      	mov	r1, fp
 80057f4:	f7fb f832 	bl	800085c <__aeabi_ddiv>
 80057f8:	e7d6      	b.n	80057a8 <_strtod_l+0x408>
 80057fa:	9b08      	ldr	r3, [sp, #32]
 80057fc:	eba5 0808 	sub.w	r8, r5, r8
 8005800:	4498      	add	r8, r3
 8005802:	f1b8 0f00 	cmp.w	r8, #0
 8005806:	dd71      	ble.n	80058ec <_strtod_l+0x54c>
 8005808:	f018 030f 	ands.w	r3, r8, #15
 800580c:	d00a      	beq.n	8005824 <_strtod_l+0x484>
 800580e:	494d      	ldr	r1, [pc, #308]	; (8005944 <_strtod_l+0x5a4>)
 8005810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005814:	4652      	mov	r2, sl
 8005816:	465b      	mov	r3, fp
 8005818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800581c:	f7fa fef4 	bl	8000608 <__aeabi_dmul>
 8005820:	4682      	mov	sl, r0
 8005822:	468b      	mov	fp, r1
 8005824:	f038 080f 	bics.w	r8, r8, #15
 8005828:	d04d      	beq.n	80058c6 <_strtod_l+0x526>
 800582a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800582e:	dd22      	ble.n	8005876 <_strtod_l+0x4d6>
 8005830:	2500      	movs	r5, #0
 8005832:	462e      	mov	r6, r5
 8005834:	9509      	str	r5, [sp, #36]	; 0x24
 8005836:	9507      	str	r5, [sp, #28]
 8005838:	2322      	movs	r3, #34	; 0x22
 800583a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800594c <_strtod_l+0x5ac>
 800583e:	6023      	str	r3, [r4, #0]
 8005840:	f04f 0a00 	mov.w	sl, #0
 8005844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005846:	2b00      	cmp	r3, #0
 8005848:	f43f adec 	beq.w	8005424 <_strtod_l+0x84>
 800584c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800584e:	4620      	mov	r0, r4
 8005850:	f001 fe90 	bl	8007574 <_Bfree>
 8005854:	9907      	ldr	r1, [sp, #28]
 8005856:	4620      	mov	r0, r4
 8005858:	f001 fe8c 	bl	8007574 <_Bfree>
 800585c:	4631      	mov	r1, r6
 800585e:	4620      	mov	r0, r4
 8005860:	f001 fe88 	bl	8007574 <_Bfree>
 8005864:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005866:	4620      	mov	r0, r4
 8005868:	f001 fe84 	bl	8007574 <_Bfree>
 800586c:	4629      	mov	r1, r5
 800586e:	4620      	mov	r0, r4
 8005870:	f001 fe80 	bl	8007574 <_Bfree>
 8005874:	e5d6      	b.n	8005424 <_strtod_l+0x84>
 8005876:	2300      	movs	r3, #0
 8005878:	ea4f 1828 	mov.w	r8, r8, asr #4
 800587c:	4650      	mov	r0, sl
 800587e:	4659      	mov	r1, fp
 8005880:	4699      	mov	r9, r3
 8005882:	f1b8 0f01 	cmp.w	r8, #1
 8005886:	dc21      	bgt.n	80058cc <_strtod_l+0x52c>
 8005888:	b10b      	cbz	r3, 800588e <_strtod_l+0x4ee>
 800588a:	4682      	mov	sl, r0
 800588c:	468b      	mov	fp, r1
 800588e:	4b2e      	ldr	r3, [pc, #184]	; (8005948 <_strtod_l+0x5a8>)
 8005890:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005894:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005898:	4652      	mov	r2, sl
 800589a:	465b      	mov	r3, fp
 800589c:	e9d9 0100 	ldrd	r0, r1, [r9]
 80058a0:	f7fa feb2 	bl	8000608 <__aeabi_dmul>
 80058a4:	4b29      	ldr	r3, [pc, #164]	; (800594c <_strtod_l+0x5ac>)
 80058a6:	460a      	mov	r2, r1
 80058a8:	400b      	ands	r3, r1
 80058aa:	4929      	ldr	r1, [pc, #164]	; (8005950 <_strtod_l+0x5b0>)
 80058ac:	428b      	cmp	r3, r1
 80058ae:	4682      	mov	sl, r0
 80058b0:	d8be      	bhi.n	8005830 <_strtod_l+0x490>
 80058b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80058b6:	428b      	cmp	r3, r1
 80058b8:	bf86      	itte	hi
 80058ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005954 <_strtod_l+0x5b4>
 80058be:	f04f 3aff 	movhi.w	sl, #4294967295
 80058c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80058c6:	2300      	movs	r3, #0
 80058c8:	9304      	str	r3, [sp, #16]
 80058ca:	e081      	b.n	80059d0 <_strtod_l+0x630>
 80058cc:	f018 0f01 	tst.w	r8, #1
 80058d0:	d007      	beq.n	80058e2 <_strtod_l+0x542>
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <_strtod_l+0x5a8>)
 80058d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f7fa fe94 	bl	8000608 <__aeabi_dmul>
 80058e0:	2301      	movs	r3, #1
 80058e2:	f109 0901 	add.w	r9, r9, #1
 80058e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80058ea:	e7ca      	b.n	8005882 <_strtod_l+0x4e2>
 80058ec:	d0eb      	beq.n	80058c6 <_strtod_l+0x526>
 80058ee:	f1c8 0800 	rsb	r8, r8, #0
 80058f2:	f018 020f 	ands.w	r2, r8, #15
 80058f6:	d00a      	beq.n	800590e <_strtod_l+0x56e>
 80058f8:	4b12      	ldr	r3, [pc, #72]	; (8005944 <_strtod_l+0x5a4>)
 80058fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058fe:	4650      	mov	r0, sl
 8005900:	4659      	mov	r1, fp
 8005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005906:	f7fa ffa9 	bl	800085c <__aeabi_ddiv>
 800590a:	4682      	mov	sl, r0
 800590c:	468b      	mov	fp, r1
 800590e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005912:	d0d8      	beq.n	80058c6 <_strtod_l+0x526>
 8005914:	f1b8 0f1f 	cmp.w	r8, #31
 8005918:	dd1e      	ble.n	8005958 <_strtod_l+0x5b8>
 800591a:	2500      	movs	r5, #0
 800591c:	462e      	mov	r6, r5
 800591e:	9509      	str	r5, [sp, #36]	; 0x24
 8005920:	9507      	str	r5, [sp, #28]
 8005922:	2322      	movs	r3, #34	; 0x22
 8005924:	f04f 0a00 	mov.w	sl, #0
 8005928:	f04f 0b00 	mov.w	fp, #0
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	e789      	b.n	8005844 <_strtod_l+0x4a4>
 8005930:	08008fed 	.word	0x08008fed
 8005934:	08009030 	.word	0x08009030
 8005938:	08008fe5 	.word	0x08008fe5
 800593c:	08009174 	.word	0x08009174
 8005940:	08009430 	.word	0x08009430
 8005944:	08009310 	.word	0x08009310
 8005948:	080092e8 	.word	0x080092e8
 800594c:	7ff00000 	.word	0x7ff00000
 8005950:	7ca00000 	.word	0x7ca00000
 8005954:	7fefffff 	.word	0x7fefffff
 8005958:	f018 0310 	ands.w	r3, r8, #16
 800595c:	bf18      	it	ne
 800595e:	236a      	movne	r3, #106	; 0x6a
 8005960:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005d18 <_strtod_l+0x978>
 8005964:	9304      	str	r3, [sp, #16]
 8005966:	4650      	mov	r0, sl
 8005968:	4659      	mov	r1, fp
 800596a:	2300      	movs	r3, #0
 800596c:	f018 0f01 	tst.w	r8, #1
 8005970:	d004      	beq.n	800597c <_strtod_l+0x5dc>
 8005972:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005976:	f7fa fe47 	bl	8000608 <__aeabi_dmul>
 800597a:	2301      	movs	r3, #1
 800597c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005980:	f109 0908 	add.w	r9, r9, #8
 8005984:	d1f2      	bne.n	800596c <_strtod_l+0x5cc>
 8005986:	b10b      	cbz	r3, 800598c <_strtod_l+0x5ec>
 8005988:	4682      	mov	sl, r0
 800598a:	468b      	mov	fp, r1
 800598c:	9b04      	ldr	r3, [sp, #16]
 800598e:	b1bb      	cbz	r3, 80059c0 <_strtod_l+0x620>
 8005990:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005994:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005998:	2b00      	cmp	r3, #0
 800599a:	4659      	mov	r1, fp
 800599c:	dd10      	ble.n	80059c0 <_strtod_l+0x620>
 800599e:	2b1f      	cmp	r3, #31
 80059a0:	f340 8128 	ble.w	8005bf4 <_strtod_l+0x854>
 80059a4:	2b34      	cmp	r3, #52	; 0x34
 80059a6:	bfde      	ittt	le
 80059a8:	3b20      	suble	r3, #32
 80059aa:	f04f 32ff 	movle.w	r2, #4294967295
 80059ae:	fa02 f303 	lslle.w	r3, r2, r3
 80059b2:	f04f 0a00 	mov.w	sl, #0
 80059b6:	bfcc      	ite	gt
 80059b8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80059bc:	ea03 0b01 	andle.w	fp, r3, r1
 80059c0:	2200      	movs	r2, #0
 80059c2:	2300      	movs	r3, #0
 80059c4:	4650      	mov	r0, sl
 80059c6:	4659      	mov	r1, fp
 80059c8:	f7fb f886 	bl	8000ad8 <__aeabi_dcmpeq>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d1a4      	bne.n	800591a <_strtod_l+0x57a>
 80059d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059d6:	462b      	mov	r3, r5
 80059d8:	463a      	mov	r2, r7
 80059da:	4620      	mov	r0, r4
 80059dc:	f001 fe36 	bl	800764c <__s2b>
 80059e0:	9009      	str	r0, [sp, #36]	; 0x24
 80059e2:	2800      	cmp	r0, #0
 80059e4:	f43f af24 	beq.w	8005830 <_strtod_l+0x490>
 80059e8:	9b07      	ldr	r3, [sp, #28]
 80059ea:	1b9e      	subs	r6, r3, r6
 80059ec:	9b08      	ldr	r3, [sp, #32]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bfb4      	ite	lt
 80059f2:	4633      	movlt	r3, r6
 80059f4:	2300      	movge	r3, #0
 80059f6:	9310      	str	r3, [sp, #64]	; 0x40
 80059f8:	9b08      	ldr	r3, [sp, #32]
 80059fa:	2500      	movs	r5, #0
 80059fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005a00:	9318      	str	r3, [sp, #96]	; 0x60
 8005a02:	462e      	mov	r6, r5
 8005a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a06:	4620      	mov	r0, r4
 8005a08:	6859      	ldr	r1, [r3, #4]
 8005a0a:	f001 fd73 	bl	80074f4 <_Balloc>
 8005a0e:	9007      	str	r0, [sp, #28]
 8005a10:	2800      	cmp	r0, #0
 8005a12:	f43f af11 	beq.w	8005838 <_strtod_l+0x498>
 8005a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	3202      	adds	r2, #2
 8005a1c:	f103 010c 	add.w	r1, r3, #12
 8005a20:	0092      	lsls	r2, r2, #2
 8005a22:	300c      	adds	r0, #12
 8005a24:	f7fe fd6e 	bl	8004504 <memcpy>
 8005a28:	ec4b ab10 	vmov	d0, sl, fp
 8005a2c:	aa20      	add	r2, sp, #128	; 0x80
 8005a2e:	a91f      	add	r1, sp, #124	; 0x7c
 8005a30:	4620      	mov	r0, r4
 8005a32:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005a36:	f002 f945 	bl	8007cc4 <__d2b>
 8005a3a:	901e      	str	r0, [sp, #120]	; 0x78
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	f43f aefb 	beq.w	8005838 <_strtod_l+0x498>
 8005a42:	2101      	movs	r1, #1
 8005a44:	4620      	mov	r0, r4
 8005a46:	f001 fe9b 	bl	8007780 <__i2b>
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	f43f aef3 	beq.w	8005838 <_strtod_l+0x498>
 8005a52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a54:	9904      	ldr	r1, [sp, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bfab      	itete	ge
 8005a5a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005a5c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005a5e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005a60:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005a64:	bfac      	ite	ge
 8005a66:	eb03 0902 	addge.w	r9, r3, r2
 8005a6a:	1ad7      	sublt	r7, r2, r3
 8005a6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a6e:	eba3 0801 	sub.w	r8, r3, r1
 8005a72:	4490      	add	r8, r2
 8005a74:	4ba3      	ldr	r3, [pc, #652]	; (8005d04 <_strtod_l+0x964>)
 8005a76:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a7a:	4598      	cmp	r8, r3
 8005a7c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005a80:	f280 80cc 	bge.w	8005c1c <_strtod_l+0x87c>
 8005a84:	eba3 0308 	sub.w	r3, r3, r8
 8005a88:	2b1f      	cmp	r3, #31
 8005a8a:	eba2 0203 	sub.w	r2, r2, r3
 8005a8e:	f04f 0101 	mov.w	r1, #1
 8005a92:	f300 80b6 	bgt.w	8005c02 <_strtod_l+0x862>
 8005a96:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9a:	9311      	str	r3, [sp, #68]	; 0x44
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	930c      	str	r3, [sp, #48]	; 0x30
 8005aa0:	eb09 0802 	add.w	r8, r9, r2
 8005aa4:	9b04      	ldr	r3, [sp, #16]
 8005aa6:	45c1      	cmp	r9, r8
 8005aa8:	4417      	add	r7, r2
 8005aaa:	441f      	add	r7, r3
 8005aac:	464b      	mov	r3, r9
 8005aae:	bfa8      	it	ge
 8005ab0:	4643      	movge	r3, r8
 8005ab2:	42bb      	cmp	r3, r7
 8005ab4:	bfa8      	it	ge
 8005ab6:	463b      	movge	r3, r7
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bfc2      	ittt	gt
 8005abc:	eba8 0803 	subgt.w	r8, r8, r3
 8005ac0:	1aff      	subgt	r7, r7, r3
 8005ac2:	eba9 0903 	subgt.w	r9, r9, r3
 8005ac6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	dd17      	ble.n	8005afc <_strtod_l+0x75c>
 8005acc:	4631      	mov	r1, r6
 8005ace:	461a      	mov	r2, r3
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f001 ff11 	bl	80078f8 <__pow5mult>
 8005ad6:	4606      	mov	r6, r0
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	f43f aead 	beq.w	8005838 <_strtod_l+0x498>
 8005ade:	4601      	mov	r1, r0
 8005ae0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f001 fe62 	bl	80077ac <__multiply>
 8005ae8:	900f      	str	r0, [sp, #60]	; 0x3c
 8005aea:	2800      	cmp	r0, #0
 8005aec:	f43f aea4 	beq.w	8005838 <_strtod_l+0x498>
 8005af0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005af2:	4620      	mov	r0, r4
 8005af4:	f001 fd3e 	bl	8007574 <_Bfree>
 8005af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005afa:	931e      	str	r3, [sp, #120]	; 0x78
 8005afc:	f1b8 0f00 	cmp.w	r8, #0
 8005b00:	f300 8091 	bgt.w	8005c26 <_strtod_l+0x886>
 8005b04:	9b08      	ldr	r3, [sp, #32]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	dd08      	ble.n	8005b1c <_strtod_l+0x77c>
 8005b0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005b0c:	9907      	ldr	r1, [sp, #28]
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f001 fef2 	bl	80078f8 <__pow5mult>
 8005b14:	9007      	str	r0, [sp, #28]
 8005b16:	2800      	cmp	r0, #0
 8005b18:	f43f ae8e 	beq.w	8005838 <_strtod_l+0x498>
 8005b1c:	2f00      	cmp	r7, #0
 8005b1e:	dd08      	ble.n	8005b32 <_strtod_l+0x792>
 8005b20:	9907      	ldr	r1, [sp, #28]
 8005b22:	463a      	mov	r2, r7
 8005b24:	4620      	mov	r0, r4
 8005b26:	f001 ff41 	bl	80079ac <__lshift>
 8005b2a:	9007      	str	r0, [sp, #28]
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	f43f ae83 	beq.w	8005838 <_strtod_l+0x498>
 8005b32:	f1b9 0f00 	cmp.w	r9, #0
 8005b36:	dd08      	ble.n	8005b4a <_strtod_l+0x7aa>
 8005b38:	4631      	mov	r1, r6
 8005b3a:	464a      	mov	r2, r9
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f001 ff35 	bl	80079ac <__lshift>
 8005b42:	4606      	mov	r6, r0
 8005b44:	2800      	cmp	r0, #0
 8005b46:	f43f ae77 	beq.w	8005838 <_strtod_l+0x498>
 8005b4a:	9a07      	ldr	r2, [sp, #28]
 8005b4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f001 ffb4 	bl	8007abc <__mdiff>
 8005b54:	4605      	mov	r5, r0
 8005b56:	2800      	cmp	r0, #0
 8005b58:	f43f ae6e 	beq.w	8005838 <_strtod_l+0x498>
 8005b5c:	68c3      	ldr	r3, [r0, #12]
 8005b5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b60:	2300      	movs	r3, #0
 8005b62:	60c3      	str	r3, [r0, #12]
 8005b64:	4631      	mov	r1, r6
 8005b66:	f001 ff8d 	bl	8007a84 <__mcmp>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	da65      	bge.n	8005c3a <_strtod_l+0x89a>
 8005b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b70:	ea53 030a 	orrs.w	r3, r3, sl
 8005b74:	f040 8087 	bne.w	8005c86 <_strtod_l+0x8e6>
 8005b78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f040 8082 	bne.w	8005c86 <_strtod_l+0x8e6>
 8005b82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b86:	0d1b      	lsrs	r3, r3, #20
 8005b88:	051b      	lsls	r3, r3, #20
 8005b8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005b8e:	d97a      	bls.n	8005c86 <_strtod_l+0x8e6>
 8005b90:	696b      	ldr	r3, [r5, #20]
 8005b92:	b913      	cbnz	r3, 8005b9a <_strtod_l+0x7fa>
 8005b94:	692b      	ldr	r3, [r5, #16]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	dd75      	ble.n	8005c86 <_strtod_l+0x8e6>
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f001 ff04 	bl	80079ac <__lshift>
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4605      	mov	r5, r0
 8005ba8:	f001 ff6c 	bl	8007a84 <__mcmp>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	dd6a      	ble.n	8005c86 <_strtod_l+0x8e6>
 8005bb0:	9904      	ldr	r1, [sp, #16]
 8005bb2:	4a55      	ldr	r2, [pc, #340]	; (8005d08 <_strtod_l+0x968>)
 8005bb4:	465b      	mov	r3, fp
 8005bb6:	2900      	cmp	r1, #0
 8005bb8:	f000 8085 	beq.w	8005cc6 <_strtod_l+0x926>
 8005bbc:	ea02 010b 	and.w	r1, r2, fp
 8005bc0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005bc4:	dc7f      	bgt.n	8005cc6 <_strtod_l+0x926>
 8005bc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005bca:	f77f aeaa 	ble.w	8005922 <_strtod_l+0x582>
 8005bce:	4a4f      	ldr	r2, [pc, #316]	; (8005d0c <_strtod_l+0x96c>)
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8005bd6:	4650      	mov	r0, sl
 8005bd8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005bdc:	4659      	mov	r1, fp
 8005bde:	f7fa fd13 	bl	8000608 <__aeabi_dmul>
 8005be2:	460b      	mov	r3, r1
 8005be4:	4303      	orrs	r3, r0
 8005be6:	bf08      	it	eq
 8005be8:	2322      	moveq	r3, #34	; 0x22
 8005bea:	4682      	mov	sl, r0
 8005bec:	468b      	mov	fp, r1
 8005bee:	bf08      	it	eq
 8005bf0:	6023      	streq	r3, [r4, #0]
 8005bf2:	e62b      	b.n	800584c <_strtod_l+0x4ac>
 8005bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	ea03 0a0a 	and.w	sl, r3, sl
 8005c00:	e6de      	b.n	80059c0 <_strtod_l+0x620>
 8005c02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005c06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005c0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005c0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005c12:	fa01 f308 	lsl.w	r3, r1, r8
 8005c16:	930c      	str	r3, [sp, #48]	; 0x30
 8005c18:	9111      	str	r1, [sp, #68]	; 0x44
 8005c1a:	e741      	b.n	8005aa0 <_strtod_l+0x700>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	930c      	str	r3, [sp, #48]	; 0x30
 8005c20:	2301      	movs	r3, #1
 8005c22:	9311      	str	r3, [sp, #68]	; 0x44
 8005c24:	e73c      	b.n	8005aa0 <_strtod_l+0x700>
 8005c26:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005c28:	4642      	mov	r2, r8
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f001 febe 	bl	80079ac <__lshift>
 8005c30:	901e      	str	r0, [sp, #120]	; 0x78
 8005c32:	2800      	cmp	r0, #0
 8005c34:	f47f af66 	bne.w	8005b04 <_strtod_l+0x764>
 8005c38:	e5fe      	b.n	8005838 <_strtod_l+0x498>
 8005c3a:	465f      	mov	r7, fp
 8005c3c:	d16e      	bne.n	8005d1c <_strtod_l+0x97c>
 8005c3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c44:	b342      	cbz	r2, 8005c98 <_strtod_l+0x8f8>
 8005c46:	4a32      	ldr	r2, [pc, #200]	; (8005d10 <_strtod_l+0x970>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d128      	bne.n	8005c9e <_strtod_l+0x8fe>
 8005c4c:	9b04      	ldr	r3, [sp, #16]
 8005c4e:	4650      	mov	r0, sl
 8005c50:	b1eb      	cbz	r3, 8005c8e <_strtod_l+0x8ee>
 8005c52:	4a2d      	ldr	r2, [pc, #180]	; (8005d08 <_strtod_l+0x968>)
 8005c54:	403a      	ands	r2, r7
 8005c56:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8005c5e:	d819      	bhi.n	8005c94 <_strtod_l+0x8f4>
 8005c60:	0d12      	lsrs	r2, r2, #20
 8005c62:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005c66:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6a:	4298      	cmp	r0, r3
 8005c6c:	d117      	bne.n	8005c9e <_strtod_l+0x8fe>
 8005c6e:	4b29      	ldr	r3, [pc, #164]	; (8005d14 <_strtod_l+0x974>)
 8005c70:	429f      	cmp	r7, r3
 8005c72:	d102      	bne.n	8005c7a <_strtod_l+0x8da>
 8005c74:	3001      	adds	r0, #1
 8005c76:	f43f addf 	beq.w	8005838 <_strtod_l+0x498>
 8005c7a:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <_strtod_l+0x968>)
 8005c7c:	403b      	ands	r3, r7
 8005c7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005c82:	f04f 0a00 	mov.w	sl, #0
 8005c86:	9b04      	ldr	r3, [sp, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1a0      	bne.n	8005bce <_strtod_l+0x82e>
 8005c8c:	e5de      	b.n	800584c <_strtod_l+0x4ac>
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c92:	e7ea      	b.n	8005c6a <_strtod_l+0x8ca>
 8005c94:	460b      	mov	r3, r1
 8005c96:	e7e8      	b.n	8005c6a <_strtod_l+0x8ca>
 8005c98:	ea53 030a 	orrs.w	r3, r3, sl
 8005c9c:	d088      	beq.n	8005bb0 <_strtod_l+0x810>
 8005c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ca0:	b1db      	cbz	r3, 8005cda <_strtod_l+0x93a>
 8005ca2:	423b      	tst	r3, r7
 8005ca4:	d0ef      	beq.n	8005c86 <_strtod_l+0x8e6>
 8005ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ca8:	9a04      	ldr	r2, [sp, #16]
 8005caa:	4650      	mov	r0, sl
 8005cac:	4659      	mov	r1, fp
 8005cae:	b1c3      	cbz	r3, 8005ce2 <_strtod_l+0x942>
 8005cb0:	f7ff fb58 	bl	8005364 <sulp>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cbc:	f7fa faee 	bl	800029c <__adddf3>
 8005cc0:	4682      	mov	sl, r0
 8005cc2:	468b      	mov	fp, r1
 8005cc4:	e7df      	b.n	8005c86 <_strtod_l+0x8e6>
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005ccc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005cd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005cd4:	f04f 3aff 	mov.w	sl, #4294967295
 8005cd8:	e7d5      	b.n	8005c86 <_strtod_l+0x8e6>
 8005cda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cdc:	ea13 0f0a 	tst.w	r3, sl
 8005ce0:	e7e0      	b.n	8005ca4 <_strtod_l+0x904>
 8005ce2:	f7ff fb3f 	bl	8005364 <sulp>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cee:	f7fa fad3 	bl	8000298 <__aeabi_dsub>
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	4682      	mov	sl, r0
 8005cf8:	468b      	mov	fp, r1
 8005cfa:	f7fa feed 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d0c1      	beq.n	8005c86 <_strtod_l+0x8e6>
 8005d02:	e60e      	b.n	8005922 <_strtod_l+0x582>
 8005d04:	fffffc02 	.word	0xfffffc02
 8005d08:	7ff00000 	.word	0x7ff00000
 8005d0c:	39500000 	.word	0x39500000
 8005d10:	000fffff 	.word	0x000fffff
 8005d14:	7fefffff 	.word	0x7fefffff
 8005d18:	08009048 	.word	0x08009048
 8005d1c:	4631      	mov	r1, r6
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f002 f82c 	bl	8007d7c <__ratio>
 8005d24:	ec59 8b10 	vmov	r8, r9, d0
 8005d28:	ee10 0a10 	vmov	r0, s0
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d32:	4649      	mov	r1, r9
 8005d34:	f7fa fee4 	bl	8000b00 <__aeabi_dcmple>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d07c      	beq.n	8005e36 <_strtod_l+0xa96>
 8005d3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d04c      	beq.n	8005ddc <_strtod_l+0xa3c>
 8005d42:	4b95      	ldr	r3, [pc, #596]	; (8005f98 <_strtod_l+0xbf8>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005d4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005f98 <_strtod_l+0xbf8>
 8005d4e:	f04f 0800 	mov.w	r8, #0
 8005d52:	4b92      	ldr	r3, [pc, #584]	; (8005f9c <_strtod_l+0xbfc>)
 8005d54:	403b      	ands	r3, r7
 8005d56:	9311      	str	r3, [sp, #68]	; 0x44
 8005d58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d5a:	4b91      	ldr	r3, [pc, #580]	; (8005fa0 <_strtod_l+0xc00>)
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	f040 80b2 	bne.w	8005ec6 <_strtod_l+0xb26>
 8005d62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d6a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005d6e:	ec4b ab10 	vmov	d0, sl, fp
 8005d72:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005d76:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005d7a:	f001 ff27 	bl	8007bcc <__ulp>
 8005d7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d82:	ec53 2b10 	vmov	r2, r3, d0
 8005d86:	f7fa fc3f 	bl	8000608 <__aeabi_dmul>
 8005d8a:	4652      	mov	r2, sl
 8005d8c:	465b      	mov	r3, fp
 8005d8e:	f7fa fa85 	bl	800029c <__adddf3>
 8005d92:	460b      	mov	r3, r1
 8005d94:	4981      	ldr	r1, [pc, #516]	; (8005f9c <_strtod_l+0xbfc>)
 8005d96:	4a83      	ldr	r2, [pc, #524]	; (8005fa4 <_strtod_l+0xc04>)
 8005d98:	4019      	ands	r1, r3
 8005d9a:	4291      	cmp	r1, r2
 8005d9c:	4682      	mov	sl, r0
 8005d9e:	d95e      	bls.n	8005e5e <_strtod_l+0xabe>
 8005da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005da2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d103      	bne.n	8005db2 <_strtod_l+0xa12>
 8005daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dac:	3301      	adds	r3, #1
 8005dae:	f43f ad43 	beq.w	8005838 <_strtod_l+0x498>
 8005db2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8005fb0 <_strtod_l+0xc10>
 8005db6:	f04f 3aff 	mov.w	sl, #4294967295
 8005dba:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f001 fbd9 	bl	8007574 <_Bfree>
 8005dc2:	9907      	ldr	r1, [sp, #28]
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f001 fbd5 	bl	8007574 <_Bfree>
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f001 fbd1 	bl	8007574 <_Bfree>
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f001 fbcd 	bl	8007574 <_Bfree>
 8005dda:	e613      	b.n	8005a04 <_strtod_l+0x664>
 8005ddc:	f1ba 0f00 	cmp.w	sl, #0
 8005de0:	d11b      	bne.n	8005e1a <_strtod_l+0xa7a>
 8005de2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005de6:	b9f3      	cbnz	r3, 8005e26 <_strtod_l+0xa86>
 8005de8:	4b6b      	ldr	r3, [pc, #428]	; (8005f98 <_strtod_l+0xbf8>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	4640      	mov	r0, r8
 8005dee:	4649      	mov	r1, r9
 8005df0:	f7fa fe7c 	bl	8000aec <__aeabi_dcmplt>
 8005df4:	b9d0      	cbnz	r0, 8005e2c <_strtod_l+0xa8c>
 8005df6:	4640      	mov	r0, r8
 8005df8:	4649      	mov	r1, r9
 8005dfa:	4b6b      	ldr	r3, [pc, #428]	; (8005fa8 <_strtod_l+0xc08>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f7fa fc03 	bl	8000608 <__aeabi_dmul>
 8005e02:	4680      	mov	r8, r0
 8005e04:	4689      	mov	r9, r1
 8005e06:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005e0a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005e0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e10:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005e14:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005e18:	e79b      	b.n	8005d52 <_strtod_l+0x9b2>
 8005e1a:	f1ba 0f01 	cmp.w	sl, #1
 8005e1e:	d102      	bne.n	8005e26 <_strtod_l+0xa86>
 8005e20:	2f00      	cmp	r7, #0
 8005e22:	f43f ad7e 	beq.w	8005922 <_strtod_l+0x582>
 8005e26:	4b61      	ldr	r3, [pc, #388]	; (8005fac <_strtod_l+0xc0c>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	e78c      	b.n	8005d46 <_strtod_l+0x9a6>
 8005e2c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005fa8 <_strtod_l+0xc08>
 8005e30:	f04f 0800 	mov.w	r8, #0
 8005e34:	e7e7      	b.n	8005e06 <_strtod_l+0xa66>
 8005e36:	4b5c      	ldr	r3, [pc, #368]	; (8005fa8 <_strtod_l+0xc08>)
 8005e38:	4640      	mov	r0, r8
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f7fa fbe3 	bl	8000608 <__aeabi_dmul>
 8005e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e44:	4680      	mov	r8, r0
 8005e46:	4689      	mov	r9, r1
 8005e48:	b933      	cbnz	r3, 8005e58 <_strtod_l+0xab8>
 8005e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e4e:	9012      	str	r0, [sp, #72]	; 0x48
 8005e50:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005e56:	e7dd      	b.n	8005e14 <_strtod_l+0xa74>
 8005e58:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8005e5c:	e7f9      	b.n	8005e52 <_strtod_l+0xab2>
 8005e5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005e62:	9b04      	ldr	r3, [sp, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1a8      	bne.n	8005dba <_strtod_l+0xa1a>
 8005e68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005e6e:	0d1b      	lsrs	r3, r3, #20
 8005e70:	051b      	lsls	r3, r3, #20
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d1a1      	bne.n	8005dba <_strtod_l+0xa1a>
 8005e76:	4640      	mov	r0, r8
 8005e78:	4649      	mov	r1, r9
 8005e7a:	f7fa ff25 	bl	8000cc8 <__aeabi_d2lz>
 8005e7e:	f7fa fb95 	bl	80005ac <__aeabi_l2d>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4640      	mov	r0, r8
 8005e88:	4649      	mov	r1, r9
 8005e8a:	f7fa fa05 	bl	8000298 <__aeabi_dsub>
 8005e8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e94:	ea43 030a 	orr.w	r3, r3, sl
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	4680      	mov	r8, r0
 8005e9c:	4689      	mov	r9, r1
 8005e9e:	d053      	beq.n	8005f48 <_strtod_l+0xba8>
 8005ea0:	a335      	add	r3, pc, #212	; (adr r3, 8005f78 <_strtod_l+0xbd8>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa fe21 	bl	8000aec <__aeabi_dcmplt>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	f47f acce 	bne.w	800584c <_strtod_l+0x4ac>
 8005eb0:	a333      	add	r3, pc, #204	; (adr r3, 8005f80 <_strtod_l+0xbe0>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	4649      	mov	r1, r9
 8005eba:	f7fa fe35 	bl	8000b28 <__aeabi_dcmpgt>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	f43f af7b 	beq.w	8005dba <_strtod_l+0xa1a>
 8005ec4:	e4c2      	b.n	800584c <_strtod_l+0x4ac>
 8005ec6:	9b04      	ldr	r3, [sp, #16]
 8005ec8:	b333      	cbz	r3, 8005f18 <_strtod_l+0xb78>
 8005eca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ecc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005ed0:	d822      	bhi.n	8005f18 <_strtod_l+0xb78>
 8005ed2:	a32d      	add	r3, pc, #180	; (adr r3, 8005f88 <_strtod_l+0xbe8>)
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	4640      	mov	r0, r8
 8005eda:	4649      	mov	r1, r9
 8005edc:	f7fa fe10 	bl	8000b00 <__aeabi_dcmple>
 8005ee0:	b1a0      	cbz	r0, 8005f0c <_strtod_l+0xb6c>
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	f7fa fe67 	bl	8000bb8 <__aeabi_d2uiz>
 8005eea:	2801      	cmp	r0, #1
 8005eec:	bf38      	it	cc
 8005eee:	2001      	movcc	r0, #1
 8005ef0:	f7fa fb10 	bl	8000514 <__aeabi_ui2d>
 8005ef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ef6:	4680      	mov	r8, r0
 8005ef8:	4689      	mov	r9, r1
 8005efa:	bb13      	cbnz	r3, 8005f42 <_strtod_l+0xba2>
 8005efc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f00:	9014      	str	r0, [sp, #80]	; 0x50
 8005f02:	9315      	str	r3, [sp, #84]	; 0x54
 8005f04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005f08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005f10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	930d      	str	r3, [sp, #52]	; 0x34
 8005f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f1c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005f20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005f24:	f001 fe52 	bl	8007bcc <__ulp>
 8005f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f2c:	ec53 2b10 	vmov	r2, r3, d0
 8005f30:	f7fa fb6a 	bl	8000608 <__aeabi_dmul>
 8005f34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f38:	f7fa f9b0 	bl	800029c <__adddf3>
 8005f3c:	4682      	mov	sl, r0
 8005f3e:	468b      	mov	fp, r1
 8005f40:	e78f      	b.n	8005e62 <_strtod_l+0xac2>
 8005f42:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005f46:	e7dd      	b.n	8005f04 <_strtod_l+0xb64>
 8005f48:	a311      	add	r3, pc, #68	; (adr r3, 8005f90 <_strtod_l+0xbf0>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa fdcd 	bl	8000aec <__aeabi_dcmplt>
 8005f52:	e7b4      	b.n	8005ebe <_strtod_l+0xb1e>
 8005f54:	2300      	movs	r3, #0
 8005f56:	930e      	str	r3, [sp, #56]	; 0x38
 8005f58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005f5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	f7ff ba65 	b.w	800542c <_strtod_l+0x8c>
 8005f62:	2b65      	cmp	r3, #101	; 0x65
 8005f64:	f43f ab5d 	beq.w	8005622 <_strtod_l+0x282>
 8005f68:	2b45      	cmp	r3, #69	; 0x45
 8005f6a:	f43f ab5a 	beq.w	8005622 <_strtod_l+0x282>
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f7ff bb92 	b.w	8005698 <_strtod_l+0x2f8>
 8005f74:	f3af 8000 	nop.w
 8005f78:	94a03595 	.word	0x94a03595
 8005f7c:	3fdfffff 	.word	0x3fdfffff
 8005f80:	35afe535 	.word	0x35afe535
 8005f84:	3fe00000 	.word	0x3fe00000
 8005f88:	ffc00000 	.word	0xffc00000
 8005f8c:	41dfffff 	.word	0x41dfffff
 8005f90:	94a03595 	.word	0x94a03595
 8005f94:	3fcfffff 	.word	0x3fcfffff
 8005f98:	3ff00000 	.word	0x3ff00000
 8005f9c:	7ff00000 	.word	0x7ff00000
 8005fa0:	7fe00000 	.word	0x7fe00000
 8005fa4:	7c9fffff 	.word	0x7c9fffff
 8005fa8:	3fe00000 	.word	0x3fe00000
 8005fac:	bff00000 	.word	0xbff00000
 8005fb0:	7fefffff 	.word	0x7fefffff

08005fb4 <_strtod_r>:
 8005fb4:	4b01      	ldr	r3, [pc, #4]	; (8005fbc <_strtod_r+0x8>)
 8005fb6:	f7ff b9f3 	b.w	80053a0 <_strtod_l>
 8005fba:	bf00      	nop
 8005fbc:	20000074 	.word	0x20000074

08005fc0 <_strtol_l.isra.0>:
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc6:	d001      	beq.n	8005fcc <_strtol_l.isra.0+0xc>
 8005fc8:	2b24      	cmp	r3, #36	; 0x24
 8005fca:	d906      	bls.n	8005fda <_strtol_l.isra.0+0x1a>
 8005fcc:	f7fe fa70 	bl	80044b0 <__errno>
 8005fd0:	2316      	movs	r3, #22
 8005fd2:	6003      	str	r3, [r0, #0]
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fda:	4f3a      	ldr	r7, [pc, #232]	; (80060c4 <_strtol_l.isra.0+0x104>)
 8005fdc:	468e      	mov	lr, r1
 8005fde:	4676      	mov	r6, lr
 8005fe0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005fe4:	5de5      	ldrb	r5, [r4, r7]
 8005fe6:	f015 0508 	ands.w	r5, r5, #8
 8005fea:	d1f8      	bne.n	8005fde <_strtol_l.isra.0+0x1e>
 8005fec:	2c2d      	cmp	r4, #45	; 0x2d
 8005fee:	d134      	bne.n	800605a <_strtol_l.isra.0+0x9a>
 8005ff0:	f89e 4000 	ldrb.w	r4, [lr]
 8005ff4:	f04f 0801 	mov.w	r8, #1
 8005ff8:	f106 0e02 	add.w	lr, r6, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d05c      	beq.n	80060ba <_strtol_l.isra.0+0xfa>
 8006000:	2b10      	cmp	r3, #16
 8006002:	d10c      	bne.n	800601e <_strtol_l.isra.0+0x5e>
 8006004:	2c30      	cmp	r4, #48	; 0x30
 8006006:	d10a      	bne.n	800601e <_strtol_l.isra.0+0x5e>
 8006008:	f89e 4000 	ldrb.w	r4, [lr]
 800600c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006010:	2c58      	cmp	r4, #88	; 0x58
 8006012:	d14d      	bne.n	80060b0 <_strtol_l.isra.0+0xf0>
 8006014:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006018:	2310      	movs	r3, #16
 800601a:	f10e 0e02 	add.w	lr, lr, #2
 800601e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006022:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006026:	2600      	movs	r6, #0
 8006028:	fbbc f9f3 	udiv	r9, ip, r3
 800602c:	4635      	mov	r5, r6
 800602e:	fb03 ca19 	mls	sl, r3, r9, ip
 8006032:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006036:	2f09      	cmp	r7, #9
 8006038:	d818      	bhi.n	800606c <_strtol_l.isra.0+0xac>
 800603a:	463c      	mov	r4, r7
 800603c:	42a3      	cmp	r3, r4
 800603e:	dd24      	ble.n	800608a <_strtol_l.isra.0+0xca>
 8006040:	2e00      	cmp	r6, #0
 8006042:	db1f      	blt.n	8006084 <_strtol_l.isra.0+0xc4>
 8006044:	45a9      	cmp	r9, r5
 8006046:	d31d      	bcc.n	8006084 <_strtol_l.isra.0+0xc4>
 8006048:	d101      	bne.n	800604e <_strtol_l.isra.0+0x8e>
 800604a:	45a2      	cmp	sl, r4
 800604c:	db1a      	blt.n	8006084 <_strtol_l.isra.0+0xc4>
 800604e:	fb05 4503 	mla	r5, r5, r3, r4
 8006052:	2601      	movs	r6, #1
 8006054:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006058:	e7eb      	b.n	8006032 <_strtol_l.isra.0+0x72>
 800605a:	2c2b      	cmp	r4, #43	; 0x2b
 800605c:	bf08      	it	eq
 800605e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006062:	46a8      	mov	r8, r5
 8006064:	bf08      	it	eq
 8006066:	f106 0e02 	addeq.w	lr, r6, #2
 800606a:	e7c7      	b.n	8005ffc <_strtol_l.isra.0+0x3c>
 800606c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006070:	2f19      	cmp	r7, #25
 8006072:	d801      	bhi.n	8006078 <_strtol_l.isra.0+0xb8>
 8006074:	3c37      	subs	r4, #55	; 0x37
 8006076:	e7e1      	b.n	800603c <_strtol_l.isra.0+0x7c>
 8006078:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800607c:	2f19      	cmp	r7, #25
 800607e:	d804      	bhi.n	800608a <_strtol_l.isra.0+0xca>
 8006080:	3c57      	subs	r4, #87	; 0x57
 8006082:	e7db      	b.n	800603c <_strtol_l.isra.0+0x7c>
 8006084:	f04f 36ff 	mov.w	r6, #4294967295
 8006088:	e7e4      	b.n	8006054 <_strtol_l.isra.0+0x94>
 800608a:	2e00      	cmp	r6, #0
 800608c:	da05      	bge.n	800609a <_strtol_l.isra.0+0xda>
 800608e:	2322      	movs	r3, #34	; 0x22
 8006090:	6003      	str	r3, [r0, #0]
 8006092:	4665      	mov	r5, ip
 8006094:	b942      	cbnz	r2, 80060a8 <_strtol_l.isra.0+0xe8>
 8006096:	4628      	mov	r0, r5
 8006098:	e79d      	b.n	8005fd6 <_strtol_l.isra.0+0x16>
 800609a:	f1b8 0f00 	cmp.w	r8, #0
 800609e:	d000      	beq.n	80060a2 <_strtol_l.isra.0+0xe2>
 80060a0:	426d      	negs	r5, r5
 80060a2:	2a00      	cmp	r2, #0
 80060a4:	d0f7      	beq.n	8006096 <_strtol_l.isra.0+0xd6>
 80060a6:	b10e      	cbz	r6, 80060ac <_strtol_l.isra.0+0xec>
 80060a8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80060ac:	6011      	str	r1, [r2, #0]
 80060ae:	e7f2      	b.n	8006096 <_strtol_l.isra.0+0xd6>
 80060b0:	2430      	movs	r4, #48	; 0x30
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1b3      	bne.n	800601e <_strtol_l.isra.0+0x5e>
 80060b6:	2308      	movs	r3, #8
 80060b8:	e7b1      	b.n	800601e <_strtol_l.isra.0+0x5e>
 80060ba:	2c30      	cmp	r4, #48	; 0x30
 80060bc:	d0a4      	beq.n	8006008 <_strtol_l.isra.0+0x48>
 80060be:	230a      	movs	r3, #10
 80060c0:	e7ad      	b.n	800601e <_strtol_l.isra.0+0x5e>
 80060c2:	bf00      	nop
 80060c4:	08009071 	.word	0x08009071

080060c8 <_strtol_r>:
 80060c8:	f7ff bf7a 	b.w	8005fc0 <_strtol_l.isra.0>

080060cc <quorem>:
 80060cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d0:	6903      	ldr	r3, [r0, #16]
 80060d2:	690c      	ldr	r4, [r1, #16]
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	4607      	mov	r7, r0
 80060d8:	f2c0 8081 	blt.w	80061de <quorem+0x112>
 80060dc:	3c01      	subs	r4, #1
 80060de:	f101 0814 	add.w	r8, r1, #20
 80060e2:	f100 0514 	add.w	r5, r0, #20
 80060e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060f4:	3301      	adds	r3, #1
 80060f6:	429a      	cmp	r2, r3
 80060f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80060fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006100:	fbb2 f6f3 	udiv	r6, r2, r3
 8006104:	d331      	bcc.n	800616a <quorem+0x9e>
 8006106:	f04f 0e00 	mov.w	lr, #0
 800610a:	4640      	mov	r0, r8
 800610c:	46ac      	mov	ip, r5
 800610e:	46f2      	mov	sl, lr
 8006110:	f850 2b04 	ldr.w	r2, [r0], #4
 8006114:	b293      	uxth	r3, r2
 8006116:	fb06 e303 	mla	r3, r6, r3, lr
 800611a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800611e:	b29b      	uxth	r3, r3
 8006120:	ebaa 0303 	sub.w	r3, sl, r3
 8006124:	0c12      	lsrs	r2, r2, #16
 8006126:	f8dc a000 	ldr.w	sl, [ip]
 800612a:	fb06 e202 	mla	r2, r6, r2, lr
 800612e:	fa13 f38a 	uxtah	r3, r3, sl
 8006132:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006136:	fa1f fa82 	uxth.w	sl, r2
 800613a:	f8dc 2000 	ldr.w	r2, [ip]
 800613e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006142:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006146:	b29b      	uxth	r3, r3
 8006148:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800614c:	4581      	cmp	r9, r0
 800614e:	f84c 3b04 	str.w	r3, [ip], #4
 8006152:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006156:	d2db      	bcs.n	8006110 <quorem+0x44>
 8006158:	f855 300b 	ldr.w	r3, [r5, fp]
 800615c:	b92b      	cbnz	r3, 800616a <quorem+0x9e>
 800615e:	9b01      	ldr	r3, [sp, #4]
 8006160:	3b04      	subs	r3, #4
 8006162:	429d      	cmp	r5, r3
 8006164:	461a      	mov	r2, r3
 8006166:	d32e      	bcc.n	80061c6 <quorem+0xfa>
 8006168:	613c      	str	r4, [r7, #16]
 800616a:	4638      	mov	r0, r7
 800616c:	f001 fc8a 	bl	8007a84 <__mcmp>
 8006170:	2800      	cmp	r0, #0
 8006172:	db24      	blt.n	80061be <quorem+0xf2>
 8006174:	3601      	adds	r6, #1
 8006176:	4628      	mov	r0, r5
 8006178:	f04f 0c00 	mov.w	ip, #0
 800617c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006180:	f8d0 e000 	ldr.w	lr, [r0]
 8006184:	b293      	uxth	r3, r2
 8006186:	ebac 0303 	sub.w	r3, ip, r3
 800618a:	0c12      	lsrs	r2, r2, #16
 800618c:	fa13 f38e 	uxtah	r3, r3, lr
 8006190:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006194:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006198:	b29b      	uxth	r3, r3
 800619a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800619e:	45c1      	cmp	r9, r8
 80061a0:	f840 3b04 	str.w	r3, [r0], #4
 80061a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061a8:	d2e8      	bcs.n	800617c <quorem+0xb0>
 80061aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061b2:	b922      	cbnz	r2, 80061be <quorem+0xf2>
 80061b4:	3b04      	subs	r3, #4
 80061b6:	429d      	cmp	r5, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	d30a      	bcc.n	80061d2 <quorem+0x106>
 80061bc:	613c      	str	r4, [r7, #16]
 80061be:	4630      	mov	r0, r6
 80061c0:	b003      	add	sp, #12
 80061c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	3b04      	subs	r3, #4
 80061ca:	2a00      	cmp	r2, #0
 80061cc:	d1cc      	bne.n	8006168 <quorem+0x9c>
 80061ce:	3c01      	subs	r4, #1
 80061d0:	e7c7      	b.n	8006162 <quorem+0x96>
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	3b04      	subs	r3, #4
 80061d6:	2a00      	cmp	r2, #0
 80061d8:	d1f0      	bne.n	80061bc <quorem+0xf0>
 80061da:	3c01      	subs	r4, #1
 80061dc:	e7eb      	b.n	80061b6 <quorem+0xea>
 80061de:	2000      	movs	r0, #0
 80061e0:	e7ee      	b.n	80061c0 <quorem+0xf4>
 80061e2:	0000      	movs	r0, r0
 80061e4:	0000      	movs	r0, r0
	...

080061e8 <_dtoa_r>:
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	ed2d 8b02 	vpush	{d8}
 80061f0:	ec57 6b10 	vmov	r6, r7, d0
 80061f4:	b095      	sub	sp, #84	; 0x54
 80061f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80061f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80061fc:	9105      	str	r1, [sp, #20]
 80061fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006202:	4604      	mov	r4, r0
 8006204:	9209      	str	r2, [sp, #36]	; 0x24
 8006206:	930f      	str	r3, [sp, #60]	; 0x3c
 8006208:	b975      	cbnz	r5, 8006228 <_dtoa_r+0x40>
 800620a:	2010      	movs	r0, #16
 800620c:	f001 f94c 	bl	80074a8 <malloc>
 8006210:	4602      	mov	r2, r0
 8006212:	6260      	str	r0, [r4, #36]	; 0x24
 8006214:	b920      	cbnz	r0, 8006220 <_dtoa_r+0x38>
 8006216:	4bb2      	ldr	r3, [pc, #712]	; (80064e0 <_dtoa_r+0x2f8>)
 8006218:	21ea      	movs	r1, #234	; 0xea
 800621a:	48b2      	ldr	r0, [pc, #712]	; (80064e4 <_dtoa_r+0x2fc>)
 800621c:	f001 fffc 	bl	8008218 <__assert_func>
 8006220:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006224:	6005      	str	r5, [r0, #0]
 8006226:	60c5      	str	r5, [r0, #12]
 8006228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800622a:	6819      	ldr	r1, [r3, #0]
 800622c:	b151      	cbz	r1, 8006244 <_dtoa_r+0x5c>
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	604a      	str	r2, [r1, #4]
 8006232:	2301      	movs	r3, #1
 8006234:	4093      	lsls	r3, r2
 8006236:	608b      	str	r3, [r1, #8]
 8006238:	4620      	mov	r0, r4
 800623a:	f001 f99b 	bl	8007574 <_Bfree>
 800623e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	1e3b      	subs	r3, r7, #0
 8006246:	bfb9      	ittee	lt
 8006248:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800624c:	9303      	strlt	r3, [sp, #12]
 800624e:	2300      	movge	r3, #0
 8006250:	f8c8 3000 	strge.w	r3, [r8]
 8006254:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006258:	4ba3      	ldr	r3, [pc, #652]	; (80064e8 <_dtoa_r+0x300>)
 800625a:	bfbc      	itt	lt
 800625c:	2201      	movlt	r2, #1
 800625e:	f8c8 2000 	strlt.w	r2, [r8]
 8006262:	ea33 0309 	bics.w	r3, r3, r9
 8006266:	d11b      	bne.n	80062a0 <_dtoa_r+0xb8>
 8006268:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800626a:	f242 730f 	movw	r3, #9999	; 0x270f
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006274:	4333      	orrs	r3, r6
 8006276:	f000 857a 	beq.w	8006d6e <_dtoa_r+0xb86>
 800627a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800627c:	b963      	cbnz	r3, 8006298 <_dtoa_r+0xb0>
 800627e:	4b9b      	ldr	r3, [pc, #620]	; (80064ec <_dtoa_r+0x304>)
 8006280:	e024      	b.n	80062cc <_dtoa_r+0xe4>
 8006282:	4b9b      	ldr	r3, [pc, #620]	; (80064f0 <_dtoa_r+0x308>)
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	3308      	adds	r3, #8
 8006288:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	9800      	ldr	r0, [sp, #0]
 800628e:	b015      	add	sp, #84	; 0x54
 8006290:	ecbd 8b02 	vpop	{d8}
 8006294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006298:	4b94      	ldr	r3, [pc, #592]	; (80064ec <_dtoa_r+0x304>)
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	3303      	adds	r3, #3
 800629e:	e7f3      	b.n	8006288 <_dtoa_r+0xa0>
 80062a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062a4:	2200      	movs	r2, #0
 80062a6:	ec51 0b17 	vmov	r0, r1, d7
 80062aa:	2300      	movs	r3, #0
 80062ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80062b0:	f7fa fc12 	bl	8000ad8 <__aeabi_dcmpeq>
 80062b4:	4680      	mov	r8, r0
 80062b6:	b158      	cbz	r0, 80062d0 <_dtoa_r+0xe8>
 80062b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062ba:	2301      	movs	r3, #1
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 8551 	beq.w	8006d68 <_dtoa_r+0xb80>
 80062c6:	488b      	ldr	r0, [pc, #556]	; (80064f4 <_dtoa_r+0x30c>)
 80062c8:	6018      	str	r0, [r3, #0]
 80062ca:	1e43      	subs	r3, r0, #1
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	e7dd      	b.n	800628c <_dtoa_r+0xa4>
 80062d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80062d4:	aa12      	add	r2, sp, #72	; 0x48
 80062d6:	a913      	add	r1, sp, #76	; 0x4c
 80062d8:	4620      	mov	r0, r4
 80062da:	f001 fcf3 	bl	8007cc4 <__d2b>
 80062de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80062e2:	4683      	mov	fp, r0
 80062e4:	2d00      	cmp	r5, #0
 80062e6:	d07c      	beq.n	80063e2 <_dtoa_r+0x1fa>
 80062e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80062ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80062f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80062fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80062fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006302:	4b7d      	ldr	r3, [pc, #500]	; (80064f8 <_dtoa_r+0x310>)
 8006304:	2200      	movs	r2, #0
 8006306:	4630      	mov	r0, r6
 8006308:	4639      	mov	r1, r7
 800630a:	f7f9 ffc5 	bl	8000298 <__aeabi_dsub>
 800630e:	a36e      	add	r3, pc, #440	; (adr r3, 80064c8 <_dtoa_r+0x2e0>)
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	f7fa f978 	bl	8000608 <__aeabi_dmul>
 8006318:	a36d      	add	r3, pc, #436	; (adr r3, 80064d0 <_dtoa_r+0x2e8>)
 800631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631e:	f7f9 ffbd 	bl	800029c <__adddf3>
 8006322:	4606      	mov	r6, r0
 8006324:	4628      	mov	r0, r5
 8006326:	460f      	mov	r7, r1
 8006328:	f7fa f904 	bl	8000534 <__aeabi_i2d>
 800632c:	a36a      	add	r3, pc, #424	; (adr r3, 80064d8 <_dtoa_r+0x2f0>)
 800632e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006332:	f7fa f969 	bl	8000608 <__aeabi_dmul>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4630      	mov	r0, r6
 800633c:	4639      	mov	r1, r7
 800633e:	f7f9 ffad 	bl	800029c <__adddf3>
 8006342:	4606      	mov	r6, r0
 8006344:	460f      	mov	r7, r1
 8006346:	f7fa fc0f 	bl	8000b68 <__aeabi_d2iz>
 800634a:	2200      	movs	r2, #0
 800634c:	4682      	mov	sl, r0
 800634e:	2300      	movs	r3, #0
 8006350:	4630      	mov	r0, r6
 8006352:	4639      	mov	r1, r7
 8006354:	f7fa fbca 	bl	8000aec <__aeabi_dcmplt>
 8006358:	b148      	cbz	r0, 800636e <_dtoa_r+0x186>
 800635a:	4650      	mov	r0, sl
 800635c:	f7fa f8ea 	bl	8000534 <__aeabi_i2d>
 8006360:	4632      	mov	r2, r6
 8006362:	463b      	mov	r3, r7
 8006364:	f7fa fbb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006368:	b908      	cbnz	r0, 800636e <_dtoa_r+0x186>
 800636a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800636e:	f1ba 0f16 	cmp.w	sl, #22
 8006372:	d854      	bhi.n	800641e <_dtoa_r+0x236>
 8006374:	4b61      	ldr	r3, [pc, #388]	; (80064fc <_dtoa_r+0x314>)
 8006376:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006382:	f7fa fbb3 	bl	8000aec <__aeabi_dcmplt>
 8006386:	2800      	cmp	r0, #0
 8006388:	d04b      	beq.n	8006422 <_dtoa_r+0x23a>
 800638a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800638e:	2300      	movs	r3, #0
 8006390:	930e      	str	r3, [sp, #56]	; 0x38
 8006392:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006394:	1b5d      	subs	r5, r3, r5
 8006396:	1e6b      	subs	r3, r5, #1
 8006398:	9304      	str	r3, [sp, #16]
 800639a:	bf43      	ittte	mi
 800639c:	2300      	movmi	r3, #0
 800639e:	f1c5 0801 	rsbmi	r8, r5, #1
 80063a2:	9304      	strmi	r3, [sp, #16]
 80063a4:	f04f 0800 	movpl.w	r8, #0
 80063a8:	f1ba 0f00 	cmp.w	sl, #0
 80063ac:	db3b      	blt.n	8006426 <_dtoa_r+0x23e>
 80063ae:	9b04      	ldr	r3, [sp, #16]
 80063b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80063b4:	4453      	add	r3, sl
 80063b6:	9304      	str	r3, [sp, #16]
 80063b8:	2300      	movs	r3, #0
 80063ba:	9306      	str	r3, [sp, #24]
 80063bc:	9b05      	ldr	r3, [sp, #20]
 80063be:	2b09      	cmp	r3, #9
 80063c0:	d869      	bhi.n	8006496 <_dtoa_r+0x2ae>
 80063c2:	2b05      	cmp	r3, #5
 80063c4:	bfc4      	itt	gt
 80063c6:	3b04      	subgt	r3, #4
 80063c8:	9305      	strgt	r3, [sp, #20]
 80063ca:	9b05      	ldr	r3, [sp, #20]
 80063cc:	f1a3 0302 	sub.w	r3, r3, #2
 80063d0:	bfcc      	ite	gt
 80063d2:	2500      	movgt	r5, #0
 80063d4:	2501      	movle	r5, #1
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d869      	bhi.n	80064ae <_dtoa_r+0x2c6>
 80063da:	e8df f003 	tbb	[pc, r3]
 80063de:	4e2c      	.short	0x4e2c
 80063e0:	5a4c      	.short	0x5a4c
 80063e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80063e6:	441d      	add	r5, r3
 80063e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	bfc1      	itttt	gt
 80063f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80063f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80063f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80063fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006400:	bfda      	itte	le
 8006402:	f1c3 0320 	rsble	r3, r3, #32
 8006406:	fa06 f003 	lslle.w	r0, r6, r3
 800640a:	4318      	orrgt	r0, r3
 800640c:	f7fa f882 	bl	8000514 <__aeabi_ui2d>
 8006410:	2301      	movs	r3, #1
 8006412:	4606      	mov	r6, r0
 8006414:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006418:	3d01      	subs	r5, #1
 800641a:	9310      	str	r3, [sp, #64]	; 0x40
 800641c:	e771      	b.n	8006302 <_dtoa_r+0x11a>
 800641e:	2301      	movs	r3, #1
 8006420:	e7b6      	b.n	8006390 <_dtoa_r+0x1a8>
 8006422:	900e      	str	r0, [sp, #56]	; 0x38
 8006424:	e7b5      	b.n	8006392 <_dtoa_r+0x1aa>
 8006426:	f1ca 0300 	rsb	r3, sl, #0
 800642a:	9306      	str	r3, [sp, #24]
 800642c:	2300      	movs	r3, #0
 800642e:	eba8 080a 	sub.w	r8, r8, sl
 8006432:	930d      	str	r3, [sp, #52]	; 0x34
 8006434:	e7c2      	b.n	80063bc <_dtoa_r+0x1d4>
 8006436:	2300      	movs	r3, #0
 8006438:	9308      	str	r3, [sp, #32]
 800643a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	dc39      	bgt.n	80064b4 <_dtoa_r+0x2cc>
 8006440:	f04f 0901 	mov.w	r9, #1
 8006444:	f8cd 9004 	str.w	r9, [sp, #4]
 8006448:	464b      	mov	r3, r9
 800644a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800644e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006450:	2200      	movs	r2, #0
 8006452:	6042      	str	r2, [r0, #4]
 8006454:	2204      	movs	r2, #4
 8006456:	f102 0614 	add.w	r6, r2, #20
 800645a:	429e      	cmp	r6, r3
 800645c:	6841      	ldr	r1, [r0, #4]
 800645e:	d92f      	bls.n	80064c0 <_dtoa_r+0x2d8>
 8006460:	4620      	mov	r0, r4
 8006462:	f001 f847 	bl	80074f4 <_Balloc>
 8006466:	9000      	str	r0, [sp, #0]
 8006468:	2800      	cmp	r0, #0
 800646a:	d14b      	bne.n	8006504 <_dtoa_r+0x31c>
 800646c:	4b24      	ldr	r3, [pc, #144]	; (8006500 <_dtoa_r+0x318>)
 800646e:	4602      	mov	r2, r0
 8006470:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006474:	e6d1      	b.n	800621a <_dtoa_r+0x32>
 8006476:	2301      	movs	r3, #1
 8006478:	e7de      	b.n	8006438 <_dtoa_r+0x250>
 800647a:	2300      	movs	r3, #0
 800647c:	9308      	str	r3, [sp, #32]
 800647e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006480:	eb0a 0903 	add.w	r9, sl, r3
 8006484:	f109 0301 	add.w	r3, r9, #1
 8006488:	2b01      	cmp	r3, #1
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	bfb8      	it	lt
 800648e:	2301      	movlt	r3, #1
 8006490:	e7dd      	b.n	800644e <_dtoa_r+0x266>
 8006492:	2301      	movs	r3, #1
 8006494:	e7f2      	b.n	800647c <_dtoa_r+0x294>
 8006496:	2501      	movs	r5, #1
 8006498:	2300      	movs	r3, #0
 800649a:	9305      	str	r3, [sp, #20]
 800649c:	9508      	str	r5, [sp, #32]
 800649e:	f04f 39ff 	mov.w	r9, #4294967295
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80064a8:	2312      	movs	r3, #18
 80064aa:	9209      	str	r2, [sp, #36]	; 0x24
 80064ac:	e7cf      	b.n	800644e <_dtoa_r+0x266>
 80064ae:	2301      	movs	r3, #1
 80064b0:	9308      	str	r3, [sp, #32]
 80064b2:	e7f4      	b.n	800649e <_dtoa_r+0x2b6>
 80064b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80064b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80064bc:	464b      	mov	r3, r9
 80064be:	e7c6      	b.n	800644e <_dtoa_r+0x266>
 80064c0:	3101      	adds	r1, #1
 80064c2:	6041      	str	r1, [r0, #4]
 80064c4:	0052      	lsls	r2, r2, #1
 80064c6:	e7c6      	b.n	8006456 <_dtoa_r+0x26e>
 80064c8:	636f4361 	.word	0x636f4361
 80064cc:	3fd287a7 	.word	0x3fd287a7
 80064d0:	8b60c8b3 	.word	0x8b60c8b3
 80064d4:	3fc68a28 	.word	0x3fc68a28
 80064d8:	509f79fb 	.word	0x509f79fb
 80064dc:	3fd34413 	.word	0x3fd34413
 80064e0:	0800917e 	.word	0x0800917e
 80064e4:	08009195 	.word	0x08009195
 80064e8:	7ff00000 	.word	0x7ff00000
 80064ec:	0800917a 	.word	0x0800917a
 80064f0:	08009171 	.word	0x08009171
 80064f4:	08008ff1 	.word	0x08008ff1
 80064f8:	3ff80000 	.word	0x3ff80000
 80064fc:	08009310 	.word	0x08009310
 8006500:	080091f4 	.word	0x080091f4
 8006504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006506:	9a00      	ldr	r2, [sp, #0]
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	9b01      	ldr	r3, [sp, #4]
 800650c:	2b0e      	cmp	r3, #14
 800650e:	f200 80ad 	bhi.w	800666c <_dtoa_r+0x484>
 8006512:	2d00      	cmp	r5, #0
 8006514:	f000 80aa 	beq.w	800666c <_dtoa_r+0x484>
 8006518:	f1ba 0f00 	cmp.w	sl, #0
 800651c:	dd36      	ble.n	800658c <_dtoa_r+0x3a4>
 800651e:	4ac3      	ldr	r2, [pc, #780]	; (800682c <_dtoa_r+0x644>)
 8006520:	f00a 030f 	and.w	r3, sl, #15
 8006524:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006528:	ed93 7b00 	vldr	d7, [r3]
 800652c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006530:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006534:	eeb0 8a47 	vmov.f32	s16, s14
 8006538:	eef0 8a67 	vmov.f32	s17, s15
 800653c:	d016      	beq.n	800656c <_dtoa_r+0x384>
 800653e:	4bbc      	ldr	r3, [pc, #752]	; (8006830 <_dtoa_r+0x648>)
 8006540:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006544:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006548:	f7fa f988 	bl	800085c <__aeabi_ddiv>
 800654c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006550:	f007 070f 	and.w	r7, r7, #15
 8006554:	2503      	movs	r5, #3
 8006556:	4eb6      	ldr	r6, [pc, #728]	; (8006830 <_dtoa_r+0x648>)
 8006558:	b957      	cbnz	r7, 8006570 <_dtoa_r+0x388>
 800655a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800655e:	ec53 2b18 	vmov	r2, r3, d8
 8006562:	f7fa f97b 	bl	800085c <__aeabi_ddiv>
 8006566:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800656a:	e029      	b.n	80065c0 <_dtoa_r+0x3d8>
 800656c:	2502      	movs	r5, #2
 800656e:	e7f2      	b.n	8006556 <_dtoa_r+0x36e>
 8006570:	07f9      	lsls	r1, r7, #31
 8006572:	d508      	bpl.n	8006586 <_dtoa_r+0x39e>
 8006574:	ec51 0b18 	vmov	r0, r1, d8
 8006578:	e9d6 2300 	ldrd	r2, r3, [r6]
 800657c:	f7fa f844 	bl	8000608 <__aeabi_dmul>
 8006580:	ec41 0b18 	vmov	d8, r0, r1
 8006584:	3501      	adds	r5, #1
 8006586:	107f      	asrs	r7, r7, #1
 8006588:	3608      	adds	r6, #8
 800658a:	e7e5      	b.n	8006558 <_dtoa_r+0x370>
 800658c:	f000 80a6 	beq.w	80066dc <_dtoa_r+0x4f4>
 8006590:	f1ca 0600 	rsb	r6, sl, #0
 8006594:	4ba5      	ldr	r3, [pc, #660]	; (800682c <_dtoa_r+0x644>)
 8006596:	4fa6      	ldr	r7, [pc, #664]	; (8006830 <_dtoa_r+0x648>)
 8006598:	f006 020f 	and.w	r2, r6, #15
 800659c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065a8:	f7fa f82e 	bl	8000608 <__aeabi_dmul>
 80065ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065b0:	1136      	asrs	r6, r6, #4
 80065b2:	2300      	movs	r3, #0
 80065b4:	2502      	movs	r5, #2
 80065b6:	2e00      	cmp	r6, #0
 80065b8:	f040 8085 	bne.w	80066c6 <_dtoa_r+0x4de>
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1d2      	bne.n	8006566 <_dtoa_r+0x37e>
 80065c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 808c 	beq.w	80066e0 <_dtoa_r+0x4f8>
 80065c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065cc:	4b99      	ldr	r3, [pc, #612]	; (8006834 <_dtoa_r+0x64c>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	4630      	mov	r0, r6
 80065d2:	4639      	mov	r1, r7
 80065d4:	f7fa fa8a 	bl	8000aec <__aeabi_dcmplt>
 80065d8:	2800      	cmp	r0, #0
 80065da:	f000 8081 	beq.w	80066e0 <_dtoa_r+0x4f8>
 80065de:	9b01      	ldr	r3, [sp, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d07d      	beq.n	80066e0 <_dtoa_r+0x4f8>
 80065e4:	f1b9 0f00 	cmp.w	r9, #0
 80065e8:	dd3c      	ble.n	8006664 <_dtoa_r+0x47c>
 80065ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80065ee:	9307      	str	r3, [sp, #28]
 80065f0:	2200      	movs	r2, #0
 80065f2:	4b91      	ldr	r3, [pc, #580]	; (8006838 <_dtoa_r+0x650>)
 80065f4:	4630      	mov	r0, r6
 80065f6:	4639      	mov	r1, r7
 80065f8:	f7fa f806 	bl	8000608 <__aeabi_dmul>
 80065fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006600:	3501      	adds	r5, #1
 8006602:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006606:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800660a:	4628      	mov	r0, r5
 800660c:	f7f9 ff92 	bl	8000534 <__aeabi_i2d>
 8006610:	4632      	mov	r2, r6
 8006612:	463b      	mov	r3, r7
 8006614:	f7f9 fff8 	bl	8000608 <__aeabi_dmul>
 8006618:	4b88      	ldr	r3, [pc, #544]	; (800683c <_dtoa_r+0x654>)
 800661a:	2200      	movs	r2, #0
 800661c:	f7f9 fe3e 	bl	800029c <__adddf3>
 8006620:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006628:	9303      	str	r3, [sp, #12]
 800662a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800662c:	2b00      	cmp	r3, #0
 800662e:	d15c      	bne.n	80066ea <_dtoa_r+0x502>
 8006630:	4b83      	ldr	r3, [pc, #524]	; (8006840 <_dtoa_r+0x658>)
 8006632:	2200      	movs	r2, #0
 8006634:	4630      	mov	r0, r6
 8006636:	4639      	mov	r1, r7
 8006638:	f7f9 fe2e 	bl	8000298 <__aeabi_dsub>
 800663c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006640:	4606      	mov	r6, r0
 8006642:	460f      	mov	r7, r1
 8006644:	f7fa fa70 	bl	8000b28 <__aeabi_dcmpgt>
 8006648:	2800      	cmp	r0, #0
 800664a:	f040 8296 	bne.w	8006b7a <_dtoa_r+0x992>
 800664e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006652:	4630      	mov	r0, r6
 8006654:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006658:	4639      	mov	r1, r7
 800665a:	f7fa fa47 	bl	8000aec <__aeabi_dcmplt>
 800665e:	2800      	cmp	r0, #0
 8006660:	f040 8288 	bne.w	8006b74 <_dtoa_r+0x98c>
 8006664:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006668:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800666c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800666e:	2b00      	cmp	r3, #0
 8006670:	f2c0 8158 	blt.w	8006924 <_dtoa_r+0x73c>
 8006674:	f1ba 0f0e 	cmp.w	sl, #14
 8006678:	f300 8154 	bgt.w	8006924 <_dtoa_r+0x73c>
 800667c:	4b6b      	ldr	r3, [pc, #428]	; (800682c <_dtoa_r+0x644>)
 800667e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006682:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	f280 80e3 	bge.w	8006854 <_dtoa_r+0x66c>
 800668e:	9b01      	ldr	r3, [sp, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	f300 80df 	bgt.w	8006854 <_dtoa_r+0x66c>
 8006696:	f040 826d 	bne.w	8006b74 <_dtoa_r+0x98c>
 800669a:	4b69      	ldr	r3, [pc, #420]	; (8006840 <_dtoa_r+0x658>)
 800669c:	2200      	movs	r2, #0
 800669e:	4640      	mov	r0, r8
 80066a0:	4649      	mov	r1, r9
 80066a2:	f7f9 ffb1 	bl	8000608 <__aeabi_dmul>
 80066a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066aa:	f7fa fa33 	bl	8000b14 <__aeabi_dcmpge>
 80066ae:	9e01      	ldr	r6, [sp, #4]
 80066b0:	4637      	mov	r7, r6
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f040 8243 	bne.w	8006b3e <_dtoa_r+0x956>
 80066b8:	9d00      	ldr	r5, [sp, #0]
 80066ba:	2331      	movs	r3, #49	; 0x31
 80066bc:	f805 3b01 	strb.w	r3, [r5], #1
 80066c0:	f10a 0a01 	add.w	sl, sl, #1
 80066c4:	e23f      	b.n	8006b46 <_dtoa_r+0x95e>
 80066c6:	07f2      	lsls	r2, r6, #31
 80066c8:	d505      	bpl.n	80066d6 <_dtoa_r+0x4ee>
 80066ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ce:	f7f9 ff9b 	bl	8000608 <__aeabi_dmul>
 80066d2:	3501      	adds	r5, #1
 80066d4:	2301      	movs	r3, #1
 80066d6:	1076      	asrs	r6, r6, #1
 80066d8:	3708      	adds	r7, #8
 80066da:	e76c      	b.n	80065b6 <_dtoa_r+0x3ce>
 80066dc:	2502      	movs	r5, #2
 80066de:	e76f      	b.n	80065c0 <_dtoa_r+0x3d8>
 80066e0:	9b01      	ldr	r3, [sp, #4]
 80066e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80066e6:	930c      	str	r3, [sp, #48]	; 0x30
 80066e8:	e78d      	b.n	8006606 <_dtoa_r+0x41e>
 80066ea:	9900      	ldr	r1, [sp, #0]
 80066ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80066ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066f0:	4b4e      	ldr	r3, [pc, #312]	; (800682c <_dtoa_r+0x644>)
 80066f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066f6:	4401      	add	r1, r0
 80066f8:	9102      	str	r1, [sp, #8]
 80066fa:	9908      	ldr	r1, [sp, #32]
 80066fc:	eeb0 8a47 	vmov.f32	s16, s14
 8006700:	eef0 8a67 	vmov.f32	s17, s15
 8006704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006708:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800670c:	2900      	cmp	r1, #0
 800670e:	d045      	beq.n	800679c <_dtoa_r+0x5b4>
 8006710:	494c      	ldr	r1, [pc, #304]	; (8006844 <_dtoa_r+0x65c>)
 8006712:	2000      	movs	r0, #0
 8006714:	f7fa f8a2 	bl	800085c <__aeabi_ddiv>
 8006718:	ec53 2b18 	vmov	r2, r3, d8
 800671c:	f7f9 fdbc 	bl	8000298 <__aeabi_dsub>
 8006720:	9d00      	ldr	r5, [sp, #0]
 8006722:	ec41 0b18 	vmov	d8, r0, r1
 8006726:	4639      	mov	r1, r7
 8006728:	4630      	mov	r0, r6
 800672a:	f7fa fa1d 	bl	8000b68 <__aeabi_d2iz>
 800672e:	900c      	str	r0, [sp, #48]	; 0x30
 8006730:	f7f9 ff00 	bl	8000534 <__aeabi_i2d>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4630      	mov	r0, r6
 800673a:	4639      	mov	r1, r7
 800673c:	f7f9 fdac 	bl	8000298 <__aeabi_dsub>
 8006740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006742:	3330      	adds	r3, #48	; 0x30
 8006744:	f805 3b01 	strb.w	r3, [r5], #1
 8006748:	ec53 2b18 	vmov	r2, r3, d8
 800674c:	4606      	mov	r6, r0
 800674e:	460f      	mov	r7, r1
 8006750:	f7fa f9cc 	bl	8000aec <__aeabi_dcmplt>
 8006754:	2800      	cmp	r0, #0
 8006756:	d165      	bne.n	8006824 <_dtoa_r+0x63c>
 8006758:	4632      	mov	r2, r6
 800675a:	463b      	mov	r3, r7
 800675c:	4935      	ldr	r1, [pc, #212]	; (8006834 <_dtoa_r+0x64c>)
 800675e:	2000      	movs	r0, #0
 8006760:	f7f9 fd9a 	bl	8000298 <__aeabi_dsub>
 8006764:	ec53 2b18 	vmov	r2, r3, d8
 8006768:	f7fa f9c0 	bl	8000aec <__aeabi_dcmplt>
 800676c:	2800      	cmp	r0, #0
 800676e:	f040 80b9 	bne.w	80068e4 <_dtoa_r+0x6fc>
 8006772:	9b02      	ldr	r3, [sp, #8]
 8006774:	429d      	cmp	r5, r3
 8006776:	f43f af75 	beq.w	8006664 <_dtoa_r+0x47c>
 800677a:	4b2f      	ldr	r3, [pc, #188]	; (8006838 <_dtoa_r+0x650>)
 800677c:	ec51 0b18 	vmov	r0, r1, d8
 8006780:	2200      	movs	r2, #0
 8006782:	f7f9 ff41 	bl	8000608 <__aeabi_dmul>
 8006786:	4b2c      	ldr	r3, [pc, #176]	; (8006838 <_dtoa_r+0x650>)
 8006788:	ec41 0b18 	vmov	d8, r0, r1
 800678c:	2200      	movs	r2, #0
 800678e:	4630      	mov	r0, r6
 8006790:	4639      	mov	r1, r7
 8006792:	f7f9 ff39 	bl	8000608 <__aeabi_dmul>
 8006796:	4606      	mov	r6, r0
 8006798:	460f      	mov	r7, r1
 800679a:	e7c4      	b.n	8006726 <_dtoa_r+0x53e>
 800679c:	ec51 0b17 	vmov	r0, r1, d7
 80067a0:	f7f9 ff32 	bl	8000608 <__aeabi_dmul>
 80067a4:	9b02      	ldr	r3, [sp, #8]
 80067a6:	9d00      	ldr	r5, [sp, #0]
 80067a8:	930c      	str	r3, [sp, #48]	; 0x30
 80067aa:	ec41 0b18 	vmov	d8, r0, r1
 80067ae:	4639      	mov	r1, r7
 80067b0:	4630      	mov	r0, r6
 80067b2:	f7fa f9d9 	bl	8000b68 <__aeabi_d2iz>
 80067b6:	9011      	str	r0, [sp, #68]	; 0x44
 80067b8:	f7f9 febc 	bl	8000534 <__aeabi_i2d>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4630      	mov	r0, r6
 80067c2:	4639      	mov	r1, r7
 80067c4:	f7f9 fd68 	bl	8000298 <__aeabi_dsub>
 80067c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067ca:	3330      	adds	r3, #48	; 0x30
 80067cc:	f805 3b01 	strb.w	r3, [r5], #1
 80067d0:	9b02      	ldr	r3, [sp, #8]
 80067d2:	429d      	cmp	r5, r3
 80067d4:	4606      	mov	r6, r0
 80067d6:	460f      	mov	r7, r1
 80067d8:	f04f 0200 	mov.w	r2, #0
 80067dc:	d134      	bne.n	8006848 <_dtoa_r+0x660>
 80067de:	4b19      	ldr	r3, [pc, #100]	; (8006844 <_dtoa_r+0x65c>)
 80067e0:	ec51 0b18 	vmov	r0, r1, d8
 80067e4:	f7f9 fd5a 	bl	800029c <__adddf3>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4630      	mov	r0, r6
 80067ee:	4639      	mov	r1, r7
 80067f0:	f7fa f99a 	bl	8000b28 <__aeabi_dcmpgt>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d175      	bne.n	80068e4 <_dtoa_r+0x6fc>
 80067f8:	ec53 2b18 	vmov	r2, r3, d8
 80067fc:	4911      	ldr	r1, [pc, #68]	; (8006844 <_dtoa_r+0x65c>)
 80067fe:	2000      	movs	r0, #0
 8006800:	f7f9 fd4a 	bl	8000298 <__aeabi_dsub>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4630      	mov	r0, r6
 800680a:	4639      	mov	r1, r7
 800680c:	f7fa f96e 	bl	8000aec <__aeabi_dcmplt>
 8006810:	2800      	cmp	r0, #0
 8006812:	f43f af27 	beq.w	8006664 <_dtoa_r+0x47c>
 8006816:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006818:	1e6b      	subs	r3, r5, #1
 800681a:	930c      	str	r3, [sp, #48]	; 0x30
 800681c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006820:	2b30      	cmp	r3, #48	; 0x30
 8006822:	d0f8      	beq.n	8006816 <_dtoa_r+0x62e>
 8006824:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006828:	e04a      	b.n	80068c0 <_dtoa_r+0x6d8>
 800682a:	bf00      	nop
 800682c:	08009310 	.word	0x08009310
 8006830:	080092e8 	.word	0x080092e8
 8006834:	3ff00000 	.word	0x3ff00000
 8006838:	40240000 	.word	0x40240000
 800683c:	401c0000 	.word	0x401c0000
 8006840:	40140000 	.word	0x40140000
 8006844:	3fe00000 	.word	0x3fe00000
 8006848:	4baf      	ldr	r3, [pc, #700]	; (8006b08 <_dtoa_r+0x920>)
 800684a:	f7f9 fedd 	bl	8000608 <__aeabi_dmul>
 800684e:	4606      	mov	r6, r0
 8006850:	460f      	mov	r7, r1
 8006852:	e7ac      	b.n	80067ae <_dtoa_r+0x5c6>
 8006854:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006858:	9d00      	ldr	r5, [sp, #0]
 800685a:	4642      	mov	r2, r8
 800685c:	464b      	mov	r3, r9
 800685e:	4630      	mov	r0, r6
 8006860:	4639      	mov	r1, r7
 8006862:	f7f9 fffb 	bl	800085c <__aeabi_ddiv>
 8006866:	f7fa f97f 	bl	8000b68 <__aeabi_d2iz>
 800686a:	9002      	str	r0, [sp, #8]
 800686c:	f7f9 fe62 	bl	8000534 <__aeabi_i2d>
 8006870:	4642      	mov	r2, r8
 8006872:	464b      	mov	r3, r9
 8006874:	f7f9 fec8 	bl	8000608 <__aeabi_dmul>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4630      	mov	r0, r6
 800687e:	4639      	mov	r1, r7
 8006880:	f7f9 fd0a 	bl	8000298 <__aeabi_dsub>
 8006884:	9e02      	ldr	r6, [sp, #8]
 8006886:	9f01      	ldr	r7, [sp, #4]
 8006888:	3630      	adds	r6, #48	; 0x30
 800688a:	f805 6b01 	strb.w	r6, [r5], #1
 800688e:	9e00      	ldr	r6, [sp, #0]
 8006890:	1bae      	subs	r6, r5, r6
 8006892:	42b7      	cmp	r7, r6
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	d137      	bne.n	800690a <_dtoa_r+0x722>
 800689a:	f7f9 fcff 	bl	800029c <__adddf3>
 800689e:	4642      	mov	r2, r8
 80068a0:	464b      	mov	r3, r9
 80068a2:	4606      	mov	r6, r0
 80068a4:	460f      	mov	r7, r1
 80068a6:	f7fa f93f 	bl	8000b28 <__aeabi_dcmpgt>
 80068aa:	b9c8      	cbnz	r0, 80068e0 <_dtoa_r+0x6f8>
 80068ac:	4642      	mov	r2, r8
 80068ae:	464b      	mov	r3, r9
 80068b0:	4630      	mov	r0, r6
 80068b2:	4639      	mov	r1, r7
 80068b4:	f7fa f910 	bl	8000ad8 <__aeabi_dcmpeq>
 80068b8:	b110      	cbz	r0, 80068c0 <_dtoa_r+0x6d8>
 80068ba:	9b02      	ldr	r3, [sp, #8]
 80068bc:	07d9      	lsls	r1, r3, #31
 80068be:	d40f      	bmi.n	80068e0 <_dtoa_r+0x6f8>
 80068c0:	4620      	mov	r0, r4
 80068c2:	4659      	mov	r1, fp
 80068c4:	f000 fe56 	bl	8007574 <_Bfree>
 80068c8:	2300      	movs	r3, #0
 80068ca:	702b      	strb	r3, [r5, #0]
 80068cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068ce:	f10a 0001 	add.w	r0, sl, #1
 80068d2:	6018      	str	r0, [r3, #0]
 80068d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f43f acd8 	beq.w	800628c <_dtoa_r+0xa4>
 80068dc:	601d      	str	r5, [r3, #0]
 80068de:	e4d5      	b.n	800628c <_dtoa_r+0xa4>
 80068e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80068e4:	462b      	mov	r3, r5
 80068e6:	461d      	mov	r5, r3
 80068e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068ec:	2a39      	cmp	r2, #57	; 0x39
 80068ee:	d108      	bne.n	8006902 <_dtoa_r+0x71a>
 80068f0:	9a00      	ldr	r2, [sp, #0]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d1f7      	bne.n	80068e6 <_dtoa_r+0x6fe>
 80068f6:	9a07      	ldr	r2, [sp, #28]
 80068f8:	9900      	ldr	r1, [sp, #0]
 80068fa:	3201      	adds	r2, #1
 80068fc:	9207      	str	r2, [sp, #28]
 80068fe:	2230      	movs	r2, #48	; 0x30
 8006900:	700a      	strb	r2, [r1, #0]
 8006902:	781a      	ldrb	r2, [r3, #0]
 8006904:	3201      	adds	r2, #1
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	e78c      	b.n	8006824 <_dtoa_r+0x63c>
 800690a:	4b7f      	ldr	r3, [pc, #508]	; (8006b08 <_dtoa_r+0x920>)
 800690c:	2200      	movs	r2, #0
 800690e:	f7f9 fe7b 	bl	8000608 <__aeabi_dmul>
 8006912:	2200      	movs	r2, #0
 8006914:	2300      	movs	r3, #0
 8006916:	4606      	mov	r6, r0
 8006918:	460f      	mov	r7, r1
 800691a:	f7fa f8dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800691e:	2800      	cmp	r0, #0
 8006920:	d09b      	beq.n	800685a <_dtoa_r+0x672>
 8006922:	e7cd      	b.n	80068c0 <_dtoa_r+0x6d8>
 8006924:	9a08      	ldr	r2, [sp, #32]
 8006926:	2a00      	cmp	r2, #0
 8006928:	f000 80c4 	beq.w	8006ab4 <_dtoa_r+0x8cc>
 800692c:	9a05      	ldr	r2, [sp, #20]
 800692e:	2a01      	cmp	r2, #1
 8006930:	f300 80a8 	bgt.w	8006a84 <_dtoa_r+0x89c>
 8006934:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006936:	2a00      	cmp	r2, #0
 8006938:	f000 80a0 	beq.w	8006a7c <_dtoa_r+0x894>
 800693c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006940:	9e06      	ldr	r6, [sp, #24]
 8006942:	4645      	mov	r5, r8
 8006944:	9a04      	ldr	r2, [sp, #16]
 8006946:	2101      	movs	r1, #1
 8006948:	441a      	add	r2, r3
 800694a:	4620      	mov	r0, r4
 800694c:	4498      	add	r8, r3
 800694e:	9204      	str	r2, [sp, #16]
 8006950:	f000 ff16 	bl	8007780 <__i2b>
 8006954:	4607      	mov	r7, r0
 8006956:	2d00      	cmp	r5, #0
 8006958:	dd0b      	ble.n	8006972 <_dtoa_r+0x78a>
 800695a:	9b04      	ldr	r3, [sp, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	dd08      	ble.n	8006972 <_dtoa_r+0x78a>
 8006960:	42ab      	cmp	r3, r5
 8006962:	9a04      	ldr	r2, [sp, #16]
 8006964:	bfa8      	it	ge
 8006966:	462b      	movge	r3, r5
 8006968:	eba8 0803 	sub.w	r8, r8, r3
 800696c:	1aed      	subs	r5, r5, r3
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	9304      	str	r3, [sp, #16]
 8006972:	9b06      	ldr	r3, [sp, #24]
 8006974:	b1fb      	cbz	r3, 80069b6 <_dtoa_r+0x7ce>
 8006976:	9b08      	ldr	r3, [sp, #32]
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 809f 	beq.w	8006abc <_dtoa_r+0x8d4>
 800697e:	2e00      	cmp	r6, #0
 8006980:	dd11      	ble.n	80069a6 <_dtoa_r+0x7be>
 8006982:	4639      	mov	r1, r7
 8006984:	4632      	mov	r2, r6
 8006986:	4620      	mov	r0, r4
 8006988:	f000 ffb6 	bl	80078f8 <__pow5mult>
 800698c:	465a      	mov	r2, fp
 800698e:	4601      	mov	r1, r0
 8006990:	4607      	mov	r7, r0
 8006992:	4620      	mov	r0, r4
 8006994:	f000 ff0a 	bl	80077ac <__multiply>
 8006998:	4659      	mov	r1, fp
 800699a:	9007      	str	r0, [sp, #28]
 800699c:	4620      	mov	r0, r4
 800699e:	f000 fde9 	bl	8007574 <_Bfree>
 80069a2:	9b07      	ldr	r3, [sp, #28]
 80069a4:	469b      	mov	fp, r3
 80069a6:	9b06      	ldr	r3, [sp, #24]
 80069a8:	1b9a      	subs	r2, r3, r6
 80069aa:	d004      	beq.n	80069b6 <_dtoa_r+0x7ce>
 80069ac:	4659      	mov	r1, fp
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 ffa2 	bl	80078f8 <__pow5mult>
 80069b4:	4683      	mov	fp, r0
 80069b6:	2101      	movs	r1, #1
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 fee1 	bl	8007780 <__i2b>
 80069be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	4606      	mov	r6, r0
 80069c4:	dd7c      	ble.n	8006ac0 <_dtoa_r+0x8d8>
 80069c6:	461a      	mov	r2, r3
 80069c8:	4601      	mov	r1, r0
 80069ca:	4620      	mov	r0, r4
 80069cc:	f000 ff94 	bl	80078f8 <__pow5mult>
 80069d0:	9b05      	ldr	r3, [sp, #20]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	4606      	mov	r6, r0
 80069d6:	dd76      	ble.n	8006ac6 <_dtoa_r+0x8de>
 80069d8:	2300      	movs	r3, #0
 80069da:	9306      	str	r3, [sp, #24]
 80069dc:	6933      	ldr	r3, [r6, #16]
 80069de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80069e2:	6918      	ldr	r0, [r3, #16]
 80069e4:	f000 fe7c 	bl	80076e0 <__hi0bits>
 80069e8:	f1c0 0020 	rsb	r0, r0, #32
 80069ec:	9b04      	ldr	r3, [sp, #16]
 80069ee:	4418      	add	r0, r3
 80069f0:	f010 001f 	ands.w	r0, r0, #31
 80069f4:	f000 8086 	beq.w	8006b04 <_dtoa_r+0x91c>
 80069f8:	f1c0 0320 	rsb	r3, r0, #32
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	dd7f      	ble.n	8006b00 <_dtoa_r+0x918>
 8006a00:	f1c0 001c 	rsb	r0, r0, #28
 8006a04:	9b04      	ldr	r3, [sp, #16]
 8006a06:	4403      	add	r3, r0
 8006a08:	4480      	add	r8, r0
 8006a0a:	4405      	add	r5, r0
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	f1b8 0f00 	cmp.w	r8, #0
 8006a12:	dd05      	ble.n	8006a20 <_dtoa_r+0x838>
 8006a14:	4659      	mov	r1, fp
 8006a16:	4642      	mov	r2, r8
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 ffc7 	bl	80079ac <__lshift>
 8006a1e:	4683      	mov	fp, r0
 8006a20:	9b04      	ldr	r3, [sp, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	dd05      	ble.n	8006a32 <_dtoa_r+0x84a>
 8006a26:	4631      	mov	r1, r6
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f000 ffbe 	bl	80079ac <__lshift>
 8006a30:	4606      	mov	r6, r0
 8006a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d069      	beq.n	8006b0c <_dtoa_r+0x924>
 8006a38:	4631      	mov	r1, r6
 8006a3a:	4658      	mov	r0, fp
 8006a3c:	f001 f822 	bl	8007a84 <__mcmp>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	da63      	bge.n	8006b0c <_dtoa_r+0x924>
 8006a44:	2300      	movs	r3, #0
 8006a46:	4659      	mov	r1, fp
 8006a48:	220a      	movs	r2, #10
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 fdb4 	bl	80075b8 <__multadd>
 8006a50:	9b08      	ldr	r3, [sp, #32]
 8006a52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a56:	4683      	mov	fp, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 818f 	beq.w	8006d7c <_dtoa_r+0xb94>
 8006a5e:	4639      	mov	r1, r7
 8006a60:	2300      	movs	r3, #0
 8006a62:	220a      	movs	r2, #10
 8006a64:	4620      	mov	r0, r4
 8006a66:	f000 fda7 	bl	80075b8 <__multadd>
 8006a6a:	f1b9 0f00 	cmp.w	r9, #0
 8006a6e:	4607      	mov	r7, r0
 8006a70:	f300 808e 	bgt.w	8006b90 <_dtoa_r+0x9a8>
 8006a74:	9b05      	ldr	r3, [sp, #20]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	dc50      	bgt.n	8006b1c <_dtoa_r+0x934>
 8006a7a:	e089      	b.n	8006b90 <_dtoa_r+0x9a8>
 8006a7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a82:	e75d      	b.n	8006940 <_dtoa_r+0x758>
 8006a84:	9b01      	ldr	r3, [sp, #4]
 8006a86:	1e5e      	subs	r6, r3, #1
 8006a88:	9b06      	ldr	r3, [sp, #24]
 8006a8a:	42b3      	cmp	r3, r6
 8006a8c:	bfbf      	itttt	lt
 8006a8e:	9b06      	ldrlt	r3, [sp, #24]
 8006a90:	9606      	strlt	r6, [sp, #24]
 8006a92:	1af2      	sublt	r2, r6, r3
 8006a94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006a96:	bfb6      	itet	lt
 8006a98:	189b      	addlt	r3, r3, r2
 8006a9a:	1b9e      	subge	r6, r3, r6
 8006a9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006a9e:	9b01      	ldr	r3, [sp, #4]
 8006aa0:	bfb8      	it	lt
 8006aa2:	2600      	movlt	r6, #0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bfb5      	itete	lt
 8006aa8:	eba8 0503 	sublt.w	r5, r8, r3
 8006aac:	9b01      	ldrge	r3, [sp, #4]
 8006aae:	2300      	movlt	r3, #0
 8006ab0:	4645      	movge	r5, r8
 8006ab2:	e747      	b.n	8006944 <_dtoa_r+0x75c>
 8006ab4:	9e06      	ldr	r6, [sp, #24]
 8006ab6:	9f08      	ldr	r7, [sp, #32]
 8006ab8:	4645      	mov	r5, r8
 8006aba:	e74c      	b.n	8006956 <_dtoa_r+0x76e>
 8006abc:	9a06      	ldr	r2, [sp, #24]
 8006abe:	e775      	b.n	80069ac <_dtoa_r+0x7c4>
 8006ac0:	9b05      	ldr	r3, [sp, #20]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	dc18      	bgt.n	8006af8 <_dtoa_r+0x910>
 8006ac6:	9b02      	ldr	r3, [sp, #8]
 8006ac8:	b9b3      	cbnz	r3, 8006af8 <_dtoa_r+0x910>
 8006aca:	9b03      	ldr	r3, [sp, #12]
 8006acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ad0:	b9a3      	cbnz	r3, 8006afc <_dtoa_r+0x914>
 8006ad2:	9b03      	ldr	r3, [sp, #12]
 8006ad4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ad8:	0d1b      	lsrs	r3, r3, #20
 8006ada:	051b      	lsls	r3, r3, #20
 8006adc:	b12b      	cbz	r3, 8006aea <_dtoa_r+0x902>
 8006ade:	9b04      	ldr	r3, [sp, #16]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	9304      	str	r3, [sp, #16]
 8006ae4:	f108 0801 	add.w	r8, r8, #1
 8006ae8:	2301      	movs	r3, #1
 8006aea:	9306      	str	r3, [sp, #24]
 8006aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f47f af74 	bne.w	80069dc <_dtoa_r+0x7f4>
 8006af4:	2001      	movs	r0, #1
 8006af6:	e779      	b.n	80069ec <_dtoa_r+0x804>
 8006af8:	2300      	movs	r3, #0
 8006afa:	e7f6      	b.n	8006aea <_dtoa_r+0x902>
 8006afc:	9b02      	ldr	r3, [sp, #8]
 8006afe:	e7f4      	b.n	8006aea <_dtoa_r+0x902>
 8006b00:	d085      	beq.n	8006a0e <_dtoa_r+0x826>
 8006b02:	4618      	mov	r0, r3
 8006b04:	301c      	adds	r0, #28
 8006b06:	e77d      	b.n	8006a04 <_dtoa_r+0x81c>
 8006b08:	40240000 	.word	0x40240000
 8006b0c:	9b01      	ldr	r3, [sp, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	dc38      	bgt.n	8006b84 <_dtoa_r+0x99c>
 8006b12:	9b05      	ldr	r3, [sp, #20]
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	dd35      	ble.n	8006b84 <_dtoa_r+0x99c>
 8006b18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006b1c:	f1b9 0f00 	cmp.w	r9, #0
 8006b20:	d10d      	bne.n	8006b3e <_dtoa_r+0x956>
 8006b22:	4631      	mov	r1, r6
 8006b24:	464b      	mov	r3, r9
 8006b26:	2205      	movs	r2, #5
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 fd45 	bl	80075b8 <__multadd>
 8006b2e:	4601      	mov	r1, r0
 8006b30:	4606      	mov	r6, r0
 8006b32:	4658      	mov	r0, fp
 8006b34:	f000 ffa6 	bl	8007a84 <__mcmp>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	f73f adbd 	bgt.w	80066b8 <_dtoa_r+0x4d0>
 8006b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b40:	9d00      	ldr	r5, [sp, #0]
 8006b42:	ea6f 0a03 	mvn.w	sl, r3
 8006b46:	f04f 0800 	mov.w	r8, #0
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f000 fd11 	bl	8007574 <_Bfree>
 8006b52:	2f00      	cmp	r7, #0
 8006b54:	f43f aeb4 	beq.w	80068c0 <_dtoa_r+0x6d8>
 8006b58:	f1b8 0f00 	cmp.w	r8, #0
 8006b5c:	d005      	beq.n	8006b6a <_dtoa_r+0x982>
 8006b5e:	45b8      	cmp	r8, r7
 8006b60:	d003      	beq.n	8006b6a <_dtoa_r+0x982>
 8006b62:	4641      	mov	r1, r8
 8006b64:	4620      	mov	r0, r4
 8006b66:	f000 fd05 	bl	8007574 <_Bfree>
 8006b6a:	4639      	mov	r1, r7
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f000 fd01 	bl	8007574 <_Bfree>
 8006b72:	e6a5      	b.n	80068c0 <_dtoa_r+0x6d8>
 8006b74:	2600      	movs	r6, #0
 8006b76:	4637      	mov	r7, r6
 8006b78:	e7e1      	b.n	8006b3e <_dtoa_r+0x956>
 8006b7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006b7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006b80:	4637      	mov	r7, r6
 8006b82:	e599      	b.n	80066b8 <_dtoa_r+0x4d0>
 8006b84:	9b08      	ldr	r3, [sp, #32]
 8006b86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 80fd 	beq.w	8006d8a <_dtoa_r+0xba2>
 8006b90:	2d00      	cmp	r5, #0
 8006b92:	dd05      	ble.n	8006ba0 <_dtoa_r+0x9b8>
 8006b94:	4639      	mov	r1, r7
 8006b96:	462a      	mov	r2, r5
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 ff07 	bl	80079ac <__lshift>
 8006b9e:	4607      	mov	r7, r0
 8006ba0:	9b06      	ldr	r3, [sp, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d05c      	beq.n	8006c60 <_dtoa_r+0xa78>
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 fca3 	bl	80074f4 <_Balloc>
 8006bae:	4605      	mov	r5, r0
 8006bb0:	b928      	cbnz	r0, 8006bbe <_dtoa_r+0x9d6>
 8006bb2:	4b80      	ldr	r3, [pc, #512]	; (8006db4 <_dtoa_r+0xbcc>)
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006bba:	f7ff bb2e 	b.w	800621a <_dtoa_r+0x32>
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	3202      	adds	r2, #2
 8006bc2:	0092      	lsls	r2, r2, #2
 8006bc4:	f107 010c 	add.w	r1, r7, #12
 8006bc8:	300c      	adds	r0, #12
 8006bca:	f7fd fc9b 	bl	8004504 <memcpy>
 8006bce:	2201      	movs	r2, #1
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 feea 	bl	80079ac <__lshift>
 8006bd8:	9b00      	ldr	r3, [sp, #0]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	9b00      	ldr	r3, [sp, #0]
 8006be0:	444b      	add	r3, r9
 8006be2:	9307      	str	r3, [sp, #28]
 8006be4:	9b02      	ldr	r3, [sp, #8]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	46b8      	mov	r8, r7
 8006bec:	9306      	str	r3, [sp, #24]
 8006bee:	4607      	mov	r7, r0
 8006bf0:	9b01      	ldr	r3, [sp, #4]
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	4658      	mov	r0, fp
 8006bf8:	9302      	str	r3, [sp, #8]
 8006bfa:	f7ff fa67 	bl	80060cc <quorem>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	3330      	adds	r3, #48	; 0x30
 8006c02:	9004      	str	r0, [sp, #16]
 8006c04:	4641      	mov	r1, r8
 8006c06:	4658      	mov	r0, fp
 8006c08:	9308      	str	r3, [sp, #32]
 8006c0a:	f000 ff3b 	bl	8007a84 <__mcmp>
 8006c0e:	463a      	mov	r2, r7
 8006c10:	4681      	mov	r9, r0
 8006c12:	4631      	mov	r1, r6
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 ff51 	bl	8007abc <__mdiff>
 8006c1a:	68c2      	ldr	r2, [r0, #12]
 8006c1c:	9b08      	ldr	r3, [sp, #32]
 8006c1e:	4605      	mov	r5, r0
 8006c20:	bb02      	cbnz	r2, 8006c64 <_dtoa_r+0xa7c>
 8006c22:	4601      	mov	r1, r0
 8006c24:	4658      	mov	r0, fp
 8006c26:	f000 ff2d 	bl	8007a84 <__mcmp>
 8006c2a:	9b08      	ldr	r3, [sp, #32]
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	4629      	mov	r1, r5
 8006c30:	4620      	mov	r0, r4
 8006c32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006c36:	f000 fc9d 	bl	8007574 <_Bfree>
 8006c3a:	9b05      	ldr	r3, [sp, #20]
 8006c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c3e:	9d01      	ldr	r5, [sp, #4]
 8006c40:	ea43 0102 	orr.w	r1, r3, r2
 8006c44:	9b06      	ldr	r3, [sp, #24]
 8006c46:	430b      	orrs	r3, r1
 8006c48:	9b08      	ldr	r3, [sp, #32]
 8006c4a:	d10d      	bne.n	8006c68 <_dtoa_r+0xa80>
 8006c4c:	2b39      	cmp	r3, #57	; 0x39
 8006c4e:	d029      	beq.n	8006ca4 <_dtoa_r+0xabc>
 8006c50:	f1b9 0f00 	cmp.w	r9, #0
 8006c54:	dd01      	ble.n	8006c5a <_dtoa_r+0xa72>
 8006c56:	9b04      	ldr	r3, [sp, #16]
 8006c58:	3331      	adds	r3, #49	; 0x31
 8006c5a:	9a02      	ldr	r2, [sp, #8]
 8006c5c:	7013      	strb	r3, [r2, #0]
 8006c5e:	e774      	b.n	8006b4a <_dtoa_r+0x962>
 8006c60:	4638      	mov	r0, r7
 8006c62:	e7b9      	b.n	8006bd8 <_dtoa_r+0x9f0>
 8006c64:	2201      	movs	r2, #1
 8006c66:	e7e2      	b.n	8006c2e <_dtoa_r+0xa46>
 8006c68:	f1b9 0f00 	cmp.w	r9, #0
 8006c6c:	db06      	blt.n	8006c7c <_dtoa_r+0xa94>
 8006c6e:	9905      	ldr	r1, [sp, #20]
 8006c70:	ea41 0909 	orr.w	r9, r1, r9
 8006c74:	9906      	ldr	r1, [sp, #24]
 8006c76:	ea59 0101 	orrs.w	r1, r9, r1
 8006c7a:	d120      	bne.n	8006cbe <_dtoa_r+0xad6>
 8006c7c:	2a00      	cmp	r2, #0
 8006c7e:	ddec      	ble.n	8006c5a <_dtoa_r+0xa72>
 8006c80:	4659      	mov	r1, fp
 8006c82:	2201      	movs	r2, #1
 8006c84:	4620      	mov	r0, r4
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	f000 fe90 	bl	80079ac <__lshift>
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	4683      	mov	fp, r0
 8006c90:	f000 fef8 	bl	8007a84 <__mcmp>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	9b01      	ldr	r3, [sp, #4]
 8006c98:	dc02      	bgt.n	8006ca0 <_dtoa_r+0xab8>
 8006c9a:	d1de      	bne.n	8006c5a <_dtoa_r+0xa72>
 8006c9c:	07da      	lsls	r2, r3, #31
 8006c9e:	d5dc      	bpl.n	8006c5a <_dtoa_r+0xa72>
 8006ca0:	2b39      	cmp	r3, #57	; 0x39
 8006ca2:	d1d8      	bne.n	8006c56 <_dtoa_r+0xa6e>
 8006ca4:	9a02      	ldr	r2, [sp, #8]
 8006ca6:	2339      	movs	r3, #57	; 0x39
 8006ca8:	7013      	strb	r3, [r2, #0]
 8006caa:	462b      	mov	r3, r5
 8006cac:	461d      	mov	r5, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006cb4:	2a39      	cmp	r2, #57	; 0x39
 8006cb6:	d050      	beq.n	8006d5a <_dtoa_r+0xb72>
 8006cb8:	3201      	adds	r2, #1
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	e745      	b.n	8006b4a <_dtoa_r+0x962>
 8006cbe:	2a00      	cmp	r2, #0
 8006cc0:	dd03      	ble.n	8006cca <_dtoa_r+0xae2>
 8006cc2:	2b39      	cmp	r3, #57	; 0x39
 8006cc4:	d0ee      	beq.n	8006ca4 <_dtoa_r+0xabc>
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	e7c7      	b.n	8006c5a <_dtoa_r+0xa72>
 8006cca:	9a01      	ldr	r2, [sp, #4]
 8006ccc:	9907      	ldr	r1, [sp, #28]
 8006cce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006cd2:	428a      	cmp	r2, r1
 8006cd4:	d02a      	beq.n	8006d2c <_dtoa_r+0xb44>
 8006cd6:	4659      	mov	r1, fp
 8006cd8:	2300      	movs	r3, #0
 8006cda:	220a      	movs	r2, #10
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f000 fc6b 	bl	80075b8 <__multadd>
 8006ce2:	45b8      	cmp	r8, r7
 8006ce4:	4683      	mov	fp, r0
 8006ce6:	f04f 0300 	mov.w	r3, #0
 8006cea:	f04f 020a 	mov.w	r2, #10
 8006cee:	4641      	mov	r1, r8
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	d107      	bne.n	8006d04 <_dtoa_r+0xb1c>
 8006cf4:	f000 fc60 	bl	80075b8 <__multadd>
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	4607      	mov	r7, r0
 8006cfc:	9b01      	ldr	r3, [sp, #4]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	e775      	b.n	8006bf0 <_dtoa_r+0xa08>
 8006d04:	f000 fc58 	bl	80075b8 <__multadd>
 8006d08:	4639      	mov	r1, r7
 8006d0a:	4680      	mov	r8, r0
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	220a      	movs	r2, #10
 8006d10:	4620      	mov	r0, r4
 8006d12:	f000 fc51 	bl	80075b8 <__multadd>
 8006d16:	4607      	mov	r7, r0
 8006d18:	e7f0      	b.n	8006cfc <_dtoa_r+0xb14>
 8006d1a:	f1b9 0f00 	cmp.w	r9, #0
 8006d1e:	9a00      	ldr	r2, [sp, #0]
 8006d20:	bfcc      	ite	gt
 8006d22:	464d      	movgt	r5, r9
 8006d24:	2501      	movle	r5, #1
 8006d26:	4415      	add	r5, r2
 8006d28:	f04f 0800 	mov.w	r8, #0
 8006d2c:	4659      	mov	r1, fp
 8006d2e:	2201      	movs	r2, #1
 8006d30:	4620      	mov	r0, r4
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	f000 fe3a 	bl	80079ac <__lshift>
 8006d38:	4631      	mov	r1, r6
 8006d3a:	4683      	mov	fp, r0
 8006d3c:	f000 fea2 	bl	8007a84 <__mcmp>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	dcb2      	bgt.n	8006caa <_dtoa_r+0xac2>
 8006d44:	d102      	bne.n	8006d4c <_dtoa_r+0xb64>
 8006d46:	9b01      	ldr	r3, [sp, #4]
 8006d48:	07db      	lsls	r3, r3, #31
 8006d4a:	d4ae      	bmi.n	8006caa <_dtoa_r+0xac2>
 8006d4c:	462b      	mov	r3, r5
 8006d4e:	461d      	mov	r5, r3
 8006d50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d54:	2a30      	cmp	r2, #48	; 0x30
 8006d56:	d0fa      	beq.n	8006d4e <_dtoa_r+0xb66>
 8006d58:	e6f7      	b.n	8006b4a <_dtoa_r+0x962>
 8006d5a:	9a00      	ldr	r2, [sp, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d1a5      	bne.n	8006cac <_dtoa_r+0xac4>
 8006d60:	f10a 0a01 	add.w	sl, sl, #1
 8006d64:	2331      	movs	r3, #49	; 0x31
 8006d66:	e779      	b.n	8006c5c <_dtoa_r+0xa74>
 8006d68:	4b13      	ldr	r3, [pc, #76]	; (8006db8 <_dtoa_r+0xbd0>)
 8006d6a:	f7ff baaf 	b.w	80062cc <_dtoa_r+0xe4>
 8006d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f47f aa86 	bne.w	8006282 <_dtoa_r+0x9a>
 8006d76:	4b11      	ldr	r3, [pc, #68]	; (8006dbc <_dtoa_r+0xbd4>)
 8006d78:	f7ff baa8 	b.w	80062cc <_dtoa_r+0xe4>
 8006d7c:	f1b9 0f00 	cmp.w	r9, #0
 8006d80:	dc03      	bgt.n	8006d8a <_dtoa_r+0xba2>
 8006d82:	9b05      	ldr	r3, [sp, #20]
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	f73f aec9 	bgt.w	8006b1c <_dtoa_r+0x934>
 8006d8a:	9d00      	ldr	r5, [sp, #0]
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	4658      	mov	r0, fp
 8006d90:	f7ff f99c 	bl	80060cc <quorem>
 8006d94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d98:	f805 3b01 	strb.w	r3, [r5], #1
 8006d9c:	9a00      	ldr	r2, [sp, #0]
 8006d9e:	1aaa      	subs	r2, r5, r2
 8006da0:	4591      	cmp	r9, r2
 8006da2:	ddba      	ble.n	8006d1a <_dtoa_r+0xb32>
 8006da4:	4659      	mov	r1, fp
 8006da6:	2300      	movs	r3, #0
 8006da8:	220a      	movs	r2, #10
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 fc04 	bl	80075b8 <__multadd>
 8006db0:	4683      	mov	fp, r0
 8006db2:	e7eb      	b.n	8006d8c <_dtoa_r+0xba4>
 8006db4:	080091f4 	.word	0x080091f4
 8006db8:	08008ff0 	.word	0x08008ff0
 8006dbc:	08009171 	.word	0x08009171

08006dc0 <rshift>:
 8006dc0:	6903      	ldr	r3, [r0, #16]
 8006dc2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006dc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dca:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006dce:	f100 0414 	add.w	r4, r0, #20
 8006dd2:	dd45      	ble.n	8006e60 <rshift+0xa0>
 8006dd4:	f011 011f 	ands.w	r1, r1, #31
 8006dd8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006ddc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006de0:	d10c      	bne.n	8006dfc <rshift+0x3c>
 8006de2:	f100 0710 	add.w	r7, r0, #16
 8006de6:	4629      	mov	r1, r5
 8006de8:	42b1      	cmp	r1, r6
 8006dea:	d334      	bcc.n	8006e56 <rshift+0x96>
 8006dec:	1a9b      	subs	r3, r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	1eea      	subs	r2, r5, #3
 8006df2:	4296      	cmp	r6, r2
 8006df4:	bf38      	it	cc
 8006df6:	2300      	movcc	r3, #0
 8006df8:	4423      	add	r3, r4
 8006dfa:	e015      	b.n	8006e28 <rshift+0x68>
 8006dfc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006e00:	f1c1 0820 	rsb	r8, r1, #32
 8006e04:	40cf      	lsrs	r7, r1
 8006e06:	f105 0e04 	add.w	lr, r5, #4
 8006e0a:	46a1      	mov	r9, r4
 8006e0c:	4576      	cmp	r6, lr
 8006e0e:	46f4      	mov	ip, lr
 8006e10:	d815      	bhi.n	8006e3e <rshift+0x7e>
 8006e12:	1a9b      	subs	r3, r3, r2
 8006e14:	009a      	lsls	r2, r3, #2
 8006e16:	3a04      	subs	r2, #4
 8006e18:	3501      	adds	r5, #1
 8006e1a:	42ae      	cmp	r6, r5
 8006e1c:	bf38      	it	cc
 8006e1e:	2200      	movcc	r2, #0
 8006e20:	18a3      	adds	r3, r4, r2
 8006e22:	50a7      	str	r7, [r4, r2]
 8006e24:	b107      	cbz	r7, 8006e28 <rshift+0x68>
 8006e26:	3304      	adds	r3, #4
 8006e28:	1b1a      	subs	r2, r3, r4
 8006e2a:	42a3      	cmp	r3, r4
 8006e2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006e30:	bf08      	it	eq
 8006e32:	2300      	moveq	r3, #0
 8006e34:	6102      	str	r2, [r0, #16]
 8006e36:	bf08      	it	eq
 8006e38:	6143      	streq	r3, [r0, #20]
 8006e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e3e:	f8dc c000 	ldr.w	ip, [ip]
 8006e42:	fa0c fc08 	lsl.w	ip, ip, r8
 8006e46:	ea4c 0707 	orr.w	r7, ip, r7
 8006e4a:	f849 7b04 	str.w	r7, [r9], #4
 8006e4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e52:	40cf      	lsrs	r7, r1
 8006e54:	e7da      	b.n	8006e0c <rshift+0x4c>
 8006e56:	f851 cb04 	ldr.w	ip, [r1], #4
 8006e5a:	f847 cf04 	str.w	ip, [r7, #4]!
 8006e5e:	e7c3      	b.n	8006de8 <rshift+0x28>
 8006e60:	4623      	mov	r3, r4
 8006e62:	e7e1      	b.n	8006e28 <rshift+0x68>

08006e64 <__hexdig_fun>:
 8006e64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006e68:	2b09      	cmp	r3, #9
 8006e6a:	d802      	bhi.n	8006e72 <__hexdig_fun+0xe>
 8006e6c:	3820      	subs	r0, #32
 8006e6e:	b2c0      	uxtb	r0, r0
 8006e70:	4770      	bx	lr
 8006e72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	d801      	bhi.n	8006e7e <__hexdig_fun+0x1a>
 8006e7a:	3847      	subs	r0, #71	; 0x47
 8006e7c:	e7f7      	b.n	8006e6e <__hexdig_fun+0xa>
 8006e7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006e82:	2b05      	cmp	r3, #5
 8006e84:	d801      	bhi.n	8006e8a <__hexdig_fun+0x26>
 8006e86:	3827      	subs	r0, #39	; 0x27
 8006e88:	e7f1      	b.n	8006e6e <__hexdig_fun+0xa>
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	4770      	bx	lr
	...

08006e90 <__gethex>:
 8006e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e94:	ed2d 8b02 	vpush	{d8}
 8006e98:	b089      	sub	sp, #36	; 0x24
 8006e9a:	ee08 0a10 	vmov	s16, r0
 8006e9e:	9304      	str	r3, [sp, #16]
 8006ea0:	4bbc      	ldr	r3, [pc, #752]	; (8007194 <__gethex+0x304>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	9301      	str	r3, [sp, #4]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	468b      	mov	fp, r1
 8006eaa:	4690      	mov	r8, r2
 8006eac:	f7f9 f998 	bl	80001e0 <strlen>
 8006eb0:	9b01      	ldr	r3, [sp, #4]
 8006eb2:	f8db 2000 	ldr.w	r2, [fp]
 8006eb6:	4403      	add	r3, r0
 8006eb8:	4682      	mov	sl, r0
 8006eba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006ebe:	9305      	str	r3, [sp, #20]
 8006ec0:	1c93      	adds	r3, r2, #2
 8006ec2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006ec6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006eca:	32fe      	adds	r2, #254	; 0xfe
 8006ecc:	18d1      	adds	r1, r2, r3
 8006ece:	461f      	mov	r7, r3
 8006ed0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006ed4:	9100      	str	r1, [sp, #0]
 8006ed6:	2830      	cmp	r0, #48	; 0x30
 8006ed8:	d0f8      	beq.n	8006ecc <__gethex+0x3c>
 8006eda:	f7ff ffc3 	bl	8006e64 <__hexdig_fun>
 8006ede:	4604      	mov	r4, r0
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d13a      	bne.n	8006f5a <__gethex+0xca>
 8006ee4:	9901      	ldr	r1, [sp, #4]
 8006ee6:	4652      	mov	r2, sl
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f001 f975 	bl	80081d8 <strncmp>
 8006eee:	4605      	mov	r5, r0
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d168      	bne.n	8006fc6 <__gethex+0x136>
 8006ef4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006ef8:	eb07 060a 	add.w	r6, r7, sl
 8006efc:	f7ff ffb2 	bl	8006e64 <__hexdig_fun>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d062      	beq.n	8006fca <__gethex+0x13a>
 8006f04:	4633      	mov	r3, r6
 8006f06:	7818      	ldrb	r0, [r3, #0]
 8006f08:	2830      	cmp	r0, #48	; 0x30
 8006f0a:	461f      	mov	r7, r3
 8006f0c:	f103 0301 	add.w	r3, r3, #1
 8006f10:	d0f9      	beq.n	8006f06 <__gethex+0x76>
 8006f12:	f7ff ffa7 	bl	8006e64 <__hexdig_fun>
 8006f16:	2301      	movs	r3, #1
 8006f18:	fab0 f480 	clz	r4, r0
 8006f1c:	0964      	lsrs	r4, r4, #5
 8006f1e:	4635      	mov	r5, r6
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	463a      	mov	r2, r7
 8006f24:	4616      	mov	r6, r2
 8006f26:	3201      	adds	r2, #1
 8006f28:	7830      	ldrb	r0, [r6, #0]
 8006f2a:	f7ff ff9b 	bl	8006e64 <__hexdig_fun>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d1f8      	bne.n	8006f24 <__gethex+0x94>
 8006f32:	9901      	ldr	r1, [sp, #4]
 8006f34:	4652      	mov	r2, sl
 8006f36:	4630      	mov	r0, r6
 8006f38:	f001 f94e 	bl	80081d8 <strncmp>
 8006f3c:	b980      	cbnz	r0, 8006f60 <__gethex+0xd0>
 8006f3e:	b94d      	cbnz	r5, 8006f54 <__gethex+0xc4>
 8006f40:	eb06 050a 	add.w	r5, r6, sl
 8006f44:	462a      	mov	r2, r5
 8006f46:	4616      	mov	r6, r2
 8006f48:	3201      	adds	r2, #1
 8006f4a:	7830      	ldrb	r0, [r6, #0]
 8006f4c:	f7ff ff8a 	bl	8006e64 <__hexdig_fun>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d1f8      	bne.n	8006f46 <__gethex+0xb6>
 8006f54:	1bad      	subs	r5, r5, r6
 8006f56:	00ad      	lsls	r5, r5, #2
 8006f58:	e004      	b.n	8006f64 <__gethex+0xd4>
 8006f5a:	2400      	movs	r4, #0
 8006f5c:	4625      	mov	r5, r4
 8006f5e:	e7e0      	b.n	8006f22 <__gethex+0x92>
 8006f60:	2d00      	cmp	r5, #0
 8006f62:	d1f7      	bne.n	8006f54 <__gethex+0xc4>
 8006f64:	7833      	ldrb	r3, [r6, #0]
 8006f66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f6a:	2b50      	cmp	r3, #80	; 0x50
 8006f6c:	d13b      	bne.n	8006fe6 <__gethex+0x156>
 8006f6e:	7873      	ldrb	r3, [r6, #1]
 8006f70:	2b2b      	cmp	r3, #43	; 0x2b
 8006f72:	d02c      	beq.n	8006fce <__gethex+0x13e>
 8006f74:	2b2d      	cmp	r3, #45	; 0x2d
 8006f76:	d02e      	beq.n	8006fd6 <__gethex+0x146>
 8006f78:	1c71      	adds	r1, r6, #1
 8006f7a:	f04f 0900 	mov.w	r9, #0
 8006f7e:	7808      	ldrb	r0, [r1, #0]
 8006f80:	f7ff ff70 	bl	8006e64 <__hexdig_fun>
 8006f84:	1e43      	subs	r3, r0, #1
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b18      	cmp	r3, #24
 8006f8a:	d82c      	bhi.n	8006fe6 <__gethex+0x156>
 8006f8c:	f1a0 0210 	sub.w	r2, r0, #16
 8006f90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006f94:	f7ff ff66 	bl	8006e64 <__hexdig_fun>
 8006f98:	1e43      	subs	r3, r0, #1
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b18      	cmp	r3, #24
 8006f9e:	d91d      	bls.n	8006fdc <__gethex+0x14c>
 8006fa0:	f1b9 0f00 	cmp.w	r9, #0
 8006fa4:	d000      	beq.n	8006fa8 <__gethex+0x118>
 8006fa6:	4252      	negs	r2, r2
 8006fa8:	4415      	add	r5, r2
 8006faa:	f8cb 1000 	str.w	r1, [fp]
 8006fae:	b1e4      	cbz	r4, 8006fea <__gethex+0x15a>
 8006fb0:	9b00      	ldr	r3, [sp, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	bf14      	ite	ne
 8006fb6:	2700      	movne	r7, #0
 8006fb8:	2706      	moveq	r7, #6
 8006fba:	4638      	mov	r0, r7
 8006fbc:	b009      	add	sp, #36	; 0x24
 8006fbe:	ecbd 8b02 	vpop	{d8}
 8006fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc6:	463e      	mov	r6, r7
 8006fc8:	4625      	mov	r5, r4
 8006fca:	2401      	movs	r4, #1
 8006fcc:	e7ca      	b.n	8006f64 <__gethex+0xd4>
 8006fce:	f04f 0900 	mov.w	r9, #0
 8006fd2:	1cb1      	adds	r1, r6, #2
 8006fd4:	e7d3      	b.n	8006f7e <__gethex+0xee>
 8006fd6:	f04f 0901 	mov.w	r9, #1
 8006fda:	e7fa      	b.n	8006fd2 <__gethex+0x142>
 8006fdc:	230a      	movs	r3, #10
 8006fde:	fb03 0202 	mla	r2, r3, r2, r0
 8006fe2:	3a10      	subs	r2, #16
 8006fe4:	e7d4      	b.n	8006f90 <__gethex+0x100>
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	e7df      	b.n	8006faa <__gethex+0x11a>
 8006fea:	1bf3      	subs	r3, r6, r7
 8006fec:	3b01      	subs	r3, #1
 8006fee:	4621      	mov	r1, r4
 8006ff0:	2b07      	cmp	r3, #7
 8006ff2:	dc0b      	bgt.n	800700c <__gethex+0x17c>
 8006ff4:	ee18 0a10 	vmov	r0, s16
 8006ff8:	f000 fa7c 	bl	80074f4 <_Balloc>
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	b940      	cbnz	r0, 8007012 <__gethex+0x182>
 8007000:	4b65      	ldr	r3, [pc, #404]	; (8007198 <__gethex+0x308>)
 8007002:	4602      	mov	r2, r0
 8007004:	21de      	movs	r1, #222	; 0xde
 8007006:	4865      	ldr	r0, [pc, #404]	; (800719c <__gethex+0x30c>)
 8007008:	f001 f906 	bl	8008218 <__assert_func>
 800700c:	3101      	adds	r1, #1
 800700e:	105b      	asrs	r3, r3, #1
 8007010:	e7ee      	b.n	8006ff0 <__gethex+0x160>
 8007012:	f100 0914 	add.w	r9, r0, #20
 8007016:	f04f 0b00 	mov.w	fp, #0
 800701a:	f1ca 0301 	rsb	r3, sl, #1
 800701e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007022:	f8cd b000 	str.w	fp, [sp]
 8007026:	9306      	str	r3, [sp, #24]
 8007028:	42b7      	cmp	r7, r6
 800702a:	d340      	bcc.n	80070ae <__gethex+0x21e>
 800702c:	9802      	ldr	r0, [sp, #8]
 800702e:	9b00      	ldr	r3, [sp, #0]
 8007030:	f840 3b04 	str.w	r3, [r0], #4
 8007034:	eba0 0009 	sub.w	r0, r0, r9
 8007038:	1080      	asrs	r0, r0, #2
 800703a:	0146      	lsls	r6, r0, #5
 800703c:	6120      	str	r0, [r4, #16]
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fb4e 	bl	80076e0 <__hi0bits>
 8007044:	1a30      	subs	r0, r6, r0
 8007046:	f8d8 6000 	ldr.w	r6, [r8]
 800704a:	42b0      	cmp	r0, r6
 800704c:	dd63      	ble.n	8007116 <__gethex+0x286>
 800704e:	1b87      	subs	r7, r0, r6
 8007050:	4639      	mov	r1, r7
 8007052:	4620      	mov	r0, r4
 8007054:	f000 fee8 	bl	8007e28 <__any_on>
 8007058:	4682      	mov	sl, r0
 800705a:	b1a8      	cbz	r0, 8007088 <__gethex+0x1f8>
 800705c:	1e7b      	subs	r3, r7, #1
 800705e:	1159      	asrs	r1, r3, #5
 8007060:	f003 021f 	and.w	r2, r3, #31
 8007064:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007068:	f04f 0a01 	mov.w	sl, #1
 800706c:	fa0a f202 	lsl.w	r2, sl, r2
 8007070:	420a      	tst	r2, r1
 8007072:	d009      	beq.n	8007088 <__gethex+0x1f8>
 8007074:	4553      	cmp	r3, sl
 8007076:	dd05      	ble.n	8007084 <__gethex+0x1f4>
 8007078:	1eb9      	subs	r1, r7, #2
 800707a:	4620      	mov	r0, r4
 800707c:	f000 fed4 	bl	8007e28 <__any_on>
 8007080:	2800      	cmp	r0, #0
 8007082:	d145      	bne.n	8007110 <__gethex+0x280>
 8007084:	f04f 0a02 	mov.w	sl, #2
 8007088:	4639      	mov	r1, r7
 800708a:	4620      	mov	r0, r4
 800708c:	f7ff fe98 	bl	8006dc0 <rshift>
 8007090:	443d      	add	r5, r7
 8007092:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007096:	42ab      	cmp	r3, r5
 8007098:	da4c      	bge.n	8007134 <__gethex+0x2a4>
 800709a:	ee18 0a10 	vmov	r0, s16
 800709e:	4621      	mov	r1, r4
 80070a0:	f000 fa68 	bl	8007574 <_Bfree>
 80070a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070a6:	2300      	movs	r3, #0
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	27a3      	movs	r7, #163	; 0xa3
 80070ac:	e785      	b.n	8006fba <__gethex+0x12a>
 80070ae:	1e73      	subs	r3, r6, #1
 80070b0:	9a05      	ldr	r2, [sp, #20]
 80070b2:	9303      	str	r3, [sp, #12]
 80070b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d019      	beq.n	80070f0 <__gethex+0x260>
 80070bc:	f1bb 0f20 	cmp.w	fp, #32
 80070c0:	d107      	bne.n	80070d2 <__gethex+0x242>
 80070c2:	9b02      	ldr	r3, [sp, #8]
 80070c4:	9a00      	ldr	r2, [sp, #0]
 80070c6:	f843 2b04 	str.w	r2, [r3], #4
 80070ca:	9302      	str	r3, [sp, #8]
 80070cc:	2300      	movs	r3, #0
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	469b      	mov	fp, r3
 80070d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80070d6:	f7ff fec5 	bl	8006e64 <__hexdig_fun>
 80070da:	9b00      	ldr	r3, [sp, #0]
 80070dc:	f000 000f 	and.w	r0, r0, #15
 80070e0:	fa00 f00b 	lsl.w	r0, r0, fp
 80070e4:	4303      	orrs	r3, r0
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	f10b 0b04 	add.w	fp, fp, #4
 80070ec:	9b03      	ldr	r3, [sp, #12]
 80070ee:	e00d      	b.n	800710c <__gethex+0x27c>
 80070f0:	9b03      	ldr	r3, [sp, #12]
 80070f2:	9a06      	ldr	r2, [sp, #24]
 80070f4:	4413      	add	r3, r2
 80070f6:	42bb      	cmp	r3, r7
 80070f8:	d3e0      	bcc.n	80070bc <__gethex+0x22c>
 80070fa:	4618      	mov	r0, r3
 80070fc:	9901      	ldr	r1, [sp, #4]
 80070fe:	9307      	str	r3, [sp, #28]
 8007100:	4652      	mov	r2, sl
 8007102:	f001 f869 	bl	80081d8 <strncmp>
 8007106:	9b07      	ldr	r3, [sp, #28]
 8007108:	2800      	cmp	r0, #0
 800710a:	d1d7      	bne.n	80070bc <__gethex+0x22c>
 800710c:	461e      	mov	r6, r3
 800710e:	e78b      	b.n	8007028 <__gethex+0x198>
 8007110:	f04f 0a03 	mov.w	sl, #3
 8007114:	e7b8      	b.n	8007088 <__gethex+0x1f8>
 8007116:	da0a      	bge.n	800712e <__gethex+0x29e>
 8007118:	1a37      	subs	r7, r6, r0
 800711a:	4621      	mov	r1, r4
 800711c:	ee18 0a10 	vmov	r0, s16
 8007120:	463a      	mov	r2, r7
 8007122:	f000 fc43 	bl	80079ac <__lshift>
 8007126:	1bed      	subs	r5, r5, r7
 8007128:	4604      	mov	r4, r0
 800712a:	f100 0914 	add.w	r9, r0, #20
 800712e:	f04f 0a00 	mov.w	sl, #0
 8007132:	e7ae      	b.n	8007092 <__gethex+0x202>
 8007134:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007138:	42a8      	cmp	r0, r5
 800713a:	dd72      	ble.n	8007222 <__gethex+0x392>
 800713c:	1b45      	subs	r5, r0, r5
 800713e:	42ae      	cmp	r6, r5
 8007140:	dc36      	bgt.n	80071b0 <__gethex+0x320>
 8007142:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d02a      	beq.n	80071a0 <__gethex+0x310>
 800714a:	2b03      	cmp	r3, #3
 800714c:	d02c      	beq.n	80071a8 <__gethex+0x318>
 800714e:	2b01      	cmp	r3, #1
 8007150:	d115      	bne.n	800717e <__gethex+0x2ee>
 8007152:	42ae      	cmp	r6, r5
 8007154:	d113      	bne.n	800717e <__gethex+0x2ee>
 8007156:	2e01      	cmp	r6, #1
 8007158:	d10b      	bne.n	8007172 <__gethex+0x2e2>
 800715a:	9a04      	ldr	r2, [sp, #16]
 800715c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	2301      	movs	r3, #1
 8007164:	6123      	str	r3, [r4, #16]
 8007166:	f8c9 3000 	str.w	r3, [r9]
 800716a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800716c:	2762      	movs	r7, #98	; 0x62
 800716e:	601c      	str	r4, [r3, #0]
 8007170:	e723      	b.n	8006fba <__gethex+0x12a>
 8007172:	1e71      	subs	r1, r6, #1
 8007174:	4620      	mov	r0, r4
 8007176:	f000 fe57 	bl	8007e28 <__any_on>
 800717a:	2800      	cmp	r0, #0
 800717c:	d1ed      	bne.n	800715a <__gethex+0x2ca>
 800717e:	ee18 0a10 	vmov	r0, s16
 8007182:	4621      	mov	r1, r4
 8007184:	f000 f9f6 	bl	8007574 <_Bfree>
 8007188:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800718a:	2300      	movs	r3, #0
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	2750      	movs	r7, #80	; 0x50
 8007190:	e713      	b.n	8006fba <__gethex+0x12a>
 8007192:	bf00      	nop
 8007194:	08009270 	.word	0x08009270
 8007198:	080091f4 	.word	0x080091f4
 800719c:	08009205 	.word	0x08009205
 80071a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1eb      	bne.n	800717e <__gethex+0x2ee>
 80071a6:	e7d8      	b.n	800715a <__gethex+0x2ca>
 80071a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1d5      	bne.n	800715a <__gethex+0x2ca>
 80071ae:	e7e6      	b.n	800717e <__gethex+0x2ee>
 80071b0:	1e6f      	subs	r7, r5, #1
 80071b2:	f1ba 0f00 	cmp.w	sl, #0
 80071b6:	d131      	bne.n	800721c <__gethex+0x38c>
 80071b8:	b127      	cbz	r7, 80071c4 <__gethex+0x334>
 80071ba:	4639      	mov	r1, r7
 80071bc:	4620      	mov	r0, r4
 80071be:	f000 fe33 	bl	8007e28 <__any_on>
 80071c2:	4682      	mov	sl, r0
 80071c4:	117b      	asrs	r3, r7, #5
 80071c6:	2101      	movs	r1, #1
 80071c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80071cc:	f007 071f 	and.w	r7, r7, #31
 80071d0:	fa01 f707 	lsl.w	r7, r1, r7
 80071d4:	421f      	tst	r7, r3
 80071d6:	4629      	mov	r1, r5
 80071d8:	4620      	mov	r0, r4
 80071da:	bf18      	it	ne
 80071dc:	f04a 0a02 	orrne.w	sl, sl, #2
 80071e0:	1b76      	subs	r6, r6, r5
 80071e2:	f7ff fded 	bl	8006dc0 <rshift>
 80071e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80071ea:	2702      	movs	r7, #2
 80071ec:	f1ba 0f00 	cmp.w	sl, #0
 80071f0:	d048      	beq.n	8007284 <__gethex+0x3f4>
 80071f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d015      	beq.n	8007226 <__gethex+0x396>
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d017      	beq.n	800722e <__gethex+0x39e>
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d109      	bne.n	8007216 <__gethex+0x386>
 8007202:	f01a 0f02 	tst.w	sl, #2
 8007206:	d006      	beq.n	8007216 <__gethex+0x386>
 8007208:	f8d9 0000 	ldr.w	r0, [r9]
 800720c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007210:	f01a 0f01 	tst.w	sl, #1
 8007214:	d10e      	bne.n	8007234 <__gethex+0x3a4>
 8007216:	f047 0710 	orr.w	r7, r7, #16
 800721a:	e033      	b.n	8007284 <__gethex+0x3f4>
 800721c:	f04f 0a01 	mov.w	sl, #1
 8007220:	e7d0      	b.n	80071c4 <__gethex+0x334>
 8007222:	2701      	movs	r7, #1
 8007224:	e7e2      	b.n	80071ec <__gethex+0x35c>
 8007226:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007228:	f1c3 0301 	rsb	r3, r3, #1
 800722c:	9315      	str	r3, [sp, #84]	; 0x54
 800722e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0f0      	beq.n	8007216 <__gethex+0x386>
 8007234:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007238:	f104 0314 	add.w	r3, r4, #20
 800723c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007240:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007244:	f04f 0c00 	mov.w	ip, #0
 8007248:	4618      	mov	r0, r3
 800724a:	f853 2b04 	ldr.w	r2, [r3], #4
 800724e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007252:	d01c      	beq.n	800728e <__gethex+0x3fe>
 8007254:	3201      	adds	r2, #1
 8007256:	6002      	str	r2, [r0, #0]
 8007258:	2f02      	cmp	r7, #2
 800725a:	f104 0314 	add.w	r3, r4, #20
 800725e:	d13f      	bne.n	80072e0 <__gethex+0x450>
 8007260:	f8d8 2000 	ldr.w	r2, [r8]
 8007264:	3a01      	subs	r2, #1
 8007266:	42b2      	cmp	r2, r6
 8007268:	d10a      	bne.n	8007280 <__gethex+0x3f0>
 800726a:	1171      	asrs	r1, r6, #5
 800726c:	2201      	movs	r2, #1
 800726e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007272:	f006 061f 	and.w	r6, r6, #31
 8007276:	fa02 f606 	lsl.w	r6, r2, r6
 800727a:	421e      	tst	r6, r3
 800727c:	bf18      	it	ne
 800727e:	4617      	movne	r7, r2
 8007280:	f047 0720 	orr.w	r7, r7, #32
 8007284:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007286:	601c      	str	r4, [r3, #0]
 8007288:	9b04      	ldr	r3, [sp, #16]
 800728a:	601d      	str	r5, [r3, #0]
 800728c:	e695      	b.n	8006fba <__gethex+0x12a>
 800728e:	4299      	cmp	r1, r3
 8007290:	f843 cc04 	str.w	ip, [r3, #-4]
 8007294:	d8d8      	bhi.n	8007248 <__gethex+0x3b8>
 8007296:	68a3      	ldr	r3, [r4, #8]
 8007298:	459b      	cmp	fp, r3
 800729a:	db19      	blt.n	80072d0 <__gethex+0x440>
 800729c:	6861      	ldr	r1, [r4, #4]
 800729e:	ee18 0a10 	vmov	r0, s16
 80072a2:	3101      	adds	r1, #1
 80072a4:	f000 f926 	bl	80074f4 <_Balloc>
 80072a8:	4681      	mov	r9, r0
 80072aa:	b918      	cbnz	r0, 80072b4 <__gethex+0x424>
 80072ac:	4b1a      	ldr	r3, [pc, #104]	; (8007318 <__gethex+0x488>)
 80072ae:	4602      	mov	r2, r0
 80072b0:	2184      	movs	r1, #132	; 0x84
 80072b2:	e6a8      	b.n	8007006 <__gethex+0x176>
 80072b4:	6922      	ldr	r2, [r4, #16]
 80072b6:	3202      	adds	r2, #2
 80072b8:	f104 010c 	add.w	r1, r4, #12
 80072bc:	0092      	lsls	r2, r2, #2
 80072be:	300c      	adds	r0, #12
 80072c0:	f7fd f920 	bl	8004504 <memcpy>
 80072c4:	4621      	mov	r1, r4
 80072c6:	ee18 0a10 	vmov	r0, s16
 80072ca:	f000 f953 	bl	8007574 <_Bfree>
 80072ce:	464c      	mov	r4, r9
 80072d0:	6923      	ldr	r3, [r4, #16]
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072d8:	6122      	str	r2, [r4, #16]
 80072da:	2201      	movs	r2, #1
 80072dc:	615a      	str	r2, [r3, #20]
 80072de:	e7bb      	b.n	8007258 <__gethex+0x3c8>
 80072e0:	6922      	ldr	r2, [r4, #16]
 80072e2:	455a      	cmp	r2, fp
 80072e4:	dd0b      	ble.n	80072fe <__gethex+0x46e>
 80072e6:	2101      	movs	r1, #1
 80072e8:	4620      	mov	r0, r4
 80072ea:	f7ff fd69 	bl	8006dc0 <rshift>
 80072ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072f2:	3501      	adds	r5, #1
 80072f4:	42ab      	cmp	r3, r5
 80072f6:	f6ff aed0 	blt.w	800709a <__gethex+0x20a>
 80072fa:	2701      	movs	r7, #1
 80072fc:	e7c0      	b.n	8007280 <__gethex+0x3f0>
 80072fe:	f016 061f 	ands.w	r6, r6, #31
 8007302:	d0fa      	beq.n	80072fa <__gethex+0x46a>
 8007304:	449a      	add	sl, r3
 8007306:	f1c6 0620 	rsb	r6, r6, #32
 800730a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800730e:	f000 f9e7 	bl	80076e0 <__hi0bits>
 8007312:	42b0      	cmp	r0, r6
 8007314:	dbe7      	blt.n	80072e6 <__gethex+0x456>
 8007316:	e7f0      	b.n	80072fa <__gethex+0x46a>
 8007318:	080091f4 	.word	0x080091f4

0800731c <L_shift>:
 800731c:	f1c2 0208 	rsb	r2, r2, #8
 8007320:	0092      	lsls	r2, r2, #2
 8007322:	b570      	push	{r4, r5, r6, lr}
 8007324:	f1c2 0620 	rsb	r6, r2, #32
 8007328:	6843      	ldr	r3, [r0, #4]
 800732a:	6804      	ldr	r4, [r0, #0]
 800732c:	fa03 f506 	lsl.w	r5, r3, r6
 8007330:	432c      	orrs	r4, r5
 8007332:	40d3      	lsrs	r3, r2
 8007334:	6004      	str	r4, [r0, #0]
 8007336:	f840 3f04 	str.w	r3, [r0, #4]!
 800733a:	4288      	cmp	r0, r1
 800733c:	d3f4      	bcc.n	8007328 <L_shift+0xc>
 800733e:	bd70      	pop	{r4, r5, r6, pc}

08007340 <__match>:
 8007340:	b530      	push	{r4, r5, lr}
 8007342:	6803      	ldr	r3, [r0, #0]
 8007344:	3301      	adds	r3, #1
 8007346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800734a:	b914      	cbnz	r4, 8007352 <__match+0x12>
 800734c:	6003      	str	r3, [r0, #0]
 800734e:	2001      	movs	r0, #1
 8007350:	bd30      	pop	{r4, r5, pc}
 8007352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007356:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800735a:	2d19      	cmp	r5, #25
 800735c:	bf98      	it	ls
 800735e:	3220      	addls	r2, #32
 8007360:	42a2      	cmp	r2, r4
 8007362:	d0f0      	beq.n	8007346 <__match+0x6>
 8007364:	2000      	movs	r0, #0
 8007366:	e7f3      	b.n	8007350 <__match+0x10>

08007368 <__hexnan>:
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	680b      	ldr	r3, [r1, #0]
 800736e:	6801      	ldr	r1, [r0, #0]
 8007370:	115e      	asrs	r6, r3, #5
 8007372:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007376:	f013 031f 	ands.w	r3, r3, #31
 800737a:	b087      	sub	sp, #28
 800737c:	bf18      	it	ne
 800737e:	3604      	addne	r6, #4
 8007380:	2500      	movs	r5, #0
 8007382:	1f37      	subs	r7, r6, #4
 8007384:	4682      	mov	sl, r0
 8007386:	4690      	mov	r8, r2
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	f846 5c04 	str.w	r5, [r6, #-4]
 800738e:	46b9      	mov	r9, r7
 8007390:	463c      	mov	r4, r7
 8007392:	9502      	str	r5, [sp, #8]
 8007394:	46ab      	mov	fp, r5
 8007396:	784a      	ldrb	r2, [r1, #1]
 8007398:	1c4b      	adds	r3, r1, #1
 800739a:	9303      	str	r3, [sp, #12]
 800739c:	b342      	cbz	r2, 80073f0 <__hexnan+0x88>
 800739e:	4610      	mov	r0, r2
 80073a0:	9105      	str	r1, [sp, #20]
 80073a2:	9204      	str	r2, [sp, #16]
 80073a4:	f7ff fd5e 	bl	8006e64 <__hexdig_fun>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d14f      	bne.n	800744c <__hexnan+0xe4>
 80073ac:	9a04      	ldr	r2, [sp, #16]
 80073ae:	9905      	ldr	r1, [sp, #20]
 80073b0:	2a20      	cmp	r2, #32
 80073b2:	d818      	bhi.n	80073e6 <__hexnan+0x7e>
 80073b4:	9b02      	ldr	r3, [sp, #8]
 80073b6:	459b      	cmp	fp, r3
 80073b8:	dd13      	ble.n	80073e2 <__hexnan+0x7a>
 80073ba:	454c      	cmp	r4, r9
 80073bc:	d206      	bcs.n	80073cc <__hexnan+0x64>
 80073be:	2d07      	cmp	r5, #7
 80073c0:	dc04      	bgt.n	80073cc <__hexnan+0x64>
 80073c2:	462a      	mov	r2, r5
 80073c4:	4649      	mov	r1, r9
 80073c6:	4620      	mov	r0, r4
 80073c8:	f7ff ffa8 	bl	800731c <L_shift>
 80073cc:	4544      	cmp	r4, r8
 80073ce:	d950      	bls.n	8007472 <__hexnan+0x10a>
 80073d0:	2300      	movs	r3, #0
 80073d2:	f1a4 0904 	sub.w	r9, r4, #4
 80073d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80073da:	f8cd b008 	str.w	fp, [sp, #8]
 80073de:	464c      	mov	r4, r9
 80073e0:	461d      	mov	r5, r3
 80073e2:	9903      	ldr	r1, [sp, #12]
 80073e4:	e7d7      	b.n	8007396 <__hexnan+0x2e>
 80073e6:	2a29      	cmp	r2, #41	; 0x29
 80073e8:	d156      	bne.n	8007498 <__hexnan+0x130>
 80073ea:	3102      	adds	r1, #2
 80073ec:	f8ca 1000 	str.w	r1, [sl]
 80073f0:	f1bb 0f00 	cmp.w	fp, #0
 80073f4:	d050      	beq.n	8007498 <__hexnan+0x130>
 80073f6:	454c      	cmp	r4, r9
 80073f8:	d206      	bcs.n	8007408 <__hexnan+0xa0>
 80073fa:	2d07      	cmp	r5, #7
 80073fc:	dc04      	bgt.n	8007408 <__hexnan+0xa0>
 80073fe:	462a      	mov	r2, r5
 8007400:	4649      	mov	r1, r9
 8007402:	4620      	mov	r0, r4
 8007404:	f7ff ff8a 	bl	800731c <L_shift>
 8007408:	4544      	cmp	r4, r8
 800740a:	d934      	bls.n	8007476 <__hexnan+0x10e>
 800740c:	f1a8 0204 	sub.w	r2, r8, #4
 8007410:	4623      	mov	r3, r4
 8007412:	f853 1b04 	ldr.w	r1, [r3], #4
 8007416:	f842 1f04 	str.w	r1, [r2, #4]!
 800741a:	429f      	cmp	r7, r3
 800741c:	d2f9      	bcs.n	8007412 <__hexnan+0xaa>
 800741e:	1b3b      	subs	r3, r7, r4
 8007420:	f023 0303 	bic.w	r3, r3, #3
 8007424:	3304      	adds	r3, #4
 8007426:	3401      	adds	r4, #1
 8007428:	3e03      	subs	r6, #3
 800742a:	42b4      	cmp	r4, r6
 800742c:	bf88      	it	hi
 800742e:	2304      	movhi	r3, #4
 8007430:	4443      	add	r3, r8
 8007432:	2200      	movs	r2, #0
 8007434:	f843 2b04 	str.w	r2, [r3], #4
 8007438:	429f      	cmp	r7, r3
 800743a:	d2fb      	bcs.n	8007434 <__hexnan+0xcc>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	b91b      	cbnz	r3, 8007448 <__hexnan+0xe0>
 8007440:	4547      	cmp	r7, r8
 8007442:	d127      	bne.n	8007494 <__hexnan+0x12c>
 8007444:	2301      	movs	r3, #1
 8007446:	603b      	str	r3, [r7, #0]
 8007448:	2005      	movs	r0, #5
 800744a:	e026      	b.n	800749a <__hexnan+0x132>
 800744c:	3501      	adds	r5, #1
 800744e:	2d08      	cmp	r5, #8
 8007450:	f10b 0b01 	add.w	fp, fp, #1
 8007454:	dd06      	ble.n	8007464 <__hexnan+0xfc>
 8007456:	4544      	cmp	r4, r8
 8007458:	d9c3      	bls.n	80073e2 <__hexnan+0x7a>
 800745a:	2300      	movs	r3, #0
 800745c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007460:	2501      	movs	r5, #1
 8007462:	3c04      	subs	r4, #4
 8007464:	6822      	ldr	r2, [r4, #0]
 8007466:	f000 000f 	and.w	r0, r0, #15
 800746a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800746e:	6022      	str	r2, [r4, #0]
 8007470:	e7b7      	b.n	80073e2 <__hexnan+0x7a>
 8007472:	2508      	movs	r5, #8
 8007474:	e7b5      	b.n	80073e2 <__hexnan+0x7a>
 8007476:	9b01      	ldr	r3, [sp, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0df      	beq.n	800743c <__hexnan+0xd4>
 800747c:	f04f 32ff 	mov.w	r2, #4294967295
 8007480:	f1c3 0320 	rsb	r3, r3, #32
 8007484:	fa22 f303 	lsr.w	r3, r2, r3
 8007488:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800748c:	401a      	ands	r2, r3
 800748e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007492:	e7d3      	b.n	800743c <__hexnan+0xd4>
 8007494:	3f04      	subs	r7, #4
 8007496:	e7d1      	b.n	800743c <__hexnan+0xd4>
 8007498:	2004      	movs	r0, #4
 800749a:	b007      	add	sp, #28
 800749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074a0 <_localeconv_r>:
 80074a0:	4800      	ldr	r0, [pc, #0]	; (80074a4 <_localeconv_r+0x4>)
 80074a2:	4770      	bx	lr
 80074a4:	20000164 	.word	0x20000164

080074a8 <malloc>:
 80074a8:	4b02      	ldr	r3, [pc, #8]	; (80074b4 <malloc+0xc>)
 80074aa:	4601      	mov	r1, r0
 80074ac:	6818      	ldr	r0, [r3, #0]
 80074ae:	f7fd b84f 	b.w	8004550 <_malloc_r>
 80074b2:	bf00      	nop
 80074b4:	2000000c 	.word	0x2000000c

080074b8 <__ascii_mbtowc>:
 80074b8:	b082      	sub	sp, #8
 80074ba:	b901      	cbnz	r1, 80074be <__ascii_mbtowc+0x6>
 80074bc:	a901      	add	r1, sp, #4
 80074be:	b142      	cbz	r2, 80074d2 <__ascii_mbtowc+0x1a>
 80074c0:	b14b      	cbz	r3, 80074d6 <__ascii_mbtowc+0x1e>
 80074c2:	7813      	ldrb	r3, [r2, #0]
 80074c4:	600b      	str	r3, [r1, #0]
 80074c6:	7812      	ldrb	r2, [r2, #0]
 80074c8:	1e10      	subs	r0, r2, #0
 80074ca:	bf18      	it	ne
 80074cc:	2001      	movne	r0, #1
 80074ce:	b002      	add	sp, #8
 80074d0:	4770      	bx	lr
 80074d2:	4610      	mov	r0, r2
 80074d4:	e7fb      	b.n	80074ce <__ascii_mbtowc+0x16>
 80074d6:	f06f 0001 	mvn.w	r0, #1
 80074da:	e7f8      	b.n	80074ce <__ascii_mbtowc+0x16>

080074dc <__malloc_lock>:
 80074dc:	4801      	ldr	r0, [pc, #4]	; (80074e4 <__malloc_lock+0x8>)
 80074de:	f000 becc 	b.w	800827a <__retarget_lock_acquire_recursive>
 80074e2:	bf00      	nop
 80074e4:	20000540 	.word	0x20000540

080074e8 <__malloc_unlock>:
 80074e8:	4801      	ldr	r0, [pc, #4]	; (80074f0 <__malloc_unlock+0x8>)
 80074ea:	f000 bec7 	b.w	800827c <__retarget_lock_release_recursive>
 80074ee:	bf00      	nop
 80074f0:	20000540 	.word	0x20000540

080074f4 <_Balloc>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074f8:	4604      	mov	r4, r0
 80074fa:	460d      	mov	r5, r1
 80074fc:	b976      	cbnz	r6, 800751c <_Balloc+0x28>
 80074fe:	2010      	movs	r0, #16
 8007500:	f7ff ffd2 	bl	80074a8 <malloc>
 8007504:	4602      	mov	r2, r0
 8007506:	6260      	str	r0, [r4, #36]	; 0x24
 8007508:	b920      	cbnz	r0, 8007514 <_Balloc+0x20>
 800750a:	4b18      	ldr	r3, [pc, #96]	; (800756c <_Balloc+0x78>)
 800750c:	4818      	ldr	r0, [pc, #96]	; (8007570 <_Balloc+0x7c>)
 800750e:	2166      	movs	r1, #102	; 0x66
 8007510:	f000 fe82 	bl	8008218 <__assert_func>
 8007514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007518:	6006      	str	r6, [r0, #0]
 800751a:	60c6      	str	r6, [r0, #12]
 800751c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800751e:	68f3      	ldr	r3, [r6, #12]
 8007520:	b183      	cbz	r3, 8007544 <_Balloc+0x50>
 8007522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800752a:	b9b8      	cbnz	r0, 800755c <_Balloc+0x68>
 800752c:	2101      	movs	r1, #1
 800752e:	fa01 f605 	lsl.w	r6, r1, r5
 8007532:	1d72      	adds	r2, r6, #5
 8007534:	0092      	lsls	r2, r2, #2
 8007536:	4620      	mov	r0, r4
 8007538:	f7fc fffa 	bl	8004530 <_calloc_r>
 800753c:	b160      	cbz	r0, 8007558 <_Balloc+0x64>
 800753e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007542:	e00e      	b.n	8007562 <_Balloc+0x6e>
 8007544:	2221      	movs	r2, #33	; 0x21
 8007546:	2104      	movs	r1, #4
 8007548:	4620      	mov	r0, r4
 800754a:	f7fc fff1 	bl	8004530 <_calloc_r>
 800754e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007550:	60f0      	str	r0, [r6, #12]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e4      	bne.n	8007522 <_Balloc+0x2e>
 8007558:	2000      	movs	r0, #0
 800755a:	bd70      	pop	{r4, r5, r6, pc}
 800755c:	6802      	ldr	r2, [r0, #0]
 800755e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007562:	2300      	movs	r3, #0
 8007564:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007568:	e7f7      	b.n	800755a <_Balloc+0x66>
 800756a:	bf00      	nop
 800756c:	0800917e 	.word	0x0800917e
 8007570:	08009284 	.word	0x08009284

08007574 <_Bfree>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007578:	4605      	mov	r5, r0
 800757a:	460c      	mov	r4, r1
 800757c:	b976      	cbnz	r6, 800759c <_Bfree+0x28>
 800757e:	2010      	movs	r0, #16
 8007580:	f7ff ff92 	bl	80074a8 <malloc>
 8007584:	4602      	mov	r2, r0
 8007586:	6268      	str	r0, [r5, #36]	; 0x24
 8007588:	b920      	cbnz	r0, 8007594 <_Bfree+0x20>
 800758a:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <_Bfree+0x3c>)
 800758c:	4809      	ldr	r0, [pc, #36]	; (80075b4 <_Bfree+0x40>)
 800758e:	218a      	movs	r1, #138	; 0x8a
 8007590:	f000 fe42 	bl	8008218 <__assert_func>
 8007594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007598:	6006      	str	r6, [r0, #0]
 800759a:	60c6      	str	r6, [r0, #12]
 800759c:	b13c      	cbz	r4, 80075ae <_Bfree+0x3a>
 800759e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075a0:	6862      	ldr	r2, [r4, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075a8:	6021      	str	r1, [r4, #0]
 80075aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	0800917e 	.word	0x0800917e
 80075b4:	08009284 	.word	0x08009284

080075b8 <__multadd>:
 80075b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075bc:	690e      	ldr	r6, [r1, #16]
 80075be:	4607      	mov	r7, r0
 80075c0:	4698      	mov	r8, r3
 80075c2:	460c      	mov	r4, r1
 80075c4:	f101 0014 	add.w	r0, r1, #20
 80075c8:	2300      	movs	r3, #0
 80075ca:	6805      	ldr	r5, [r0, #0]
 80075cc:	b2a9      	uxth	r1, r5
 80075ce:	fb02 8101 	mla	r1, r2, r1, r8
 80075d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80075d6:	0c2d      	lsrs	r5, r5, #16
 80075d8:	fb02 c505 	mla	r5, r2, r5, ip
 80075dc:	b289      	uxth	r1, r1
 80075de:	3301      	adds	r3, #1
 80075e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80075e4:	429e      	cmp	r6, r3
 80075e6:	f840 1b04 	str.w	r1, [r0], #4
 80075ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80075ee:	dcec      	bgt.n	80075ca <__multadd+0x12>
 80075f0:	f1b8 0f00 	cmp.w	r8, #0
 80075f4:	d022      	beq.n	800763c <__multadd+0x84>
 80075f6:	68a3      	ldr	r3, [r4, #8]
 80075f8:	42b3      	cmp	r3, r6
 80075fa:	dc19      	bgt.n	8007630 <__multadd+0x78>
 80075fc:	6861      	ldr	r1, [r4, #4]
 80075fe:	4638      	mov	r0, r7
 8007600:	3101      	adds	r1, #1
 8007602:	f7ff ff77 	bl	80074f4 <_Balloc>
 8007606:	4605      	mov	r5, r0
 8007608:	b928      	cbnz	r0, 8007616 <__multadd+0x5e>
 800760a:	4602      	mov	r2, r0
 800760c:	4b0d      	ldr	r3, [pc, #52]	; (8007644 <__multadd+0x8c>)
 800760e:	480e      	ldr	r0, [pc, #56]	; (8007648 <__multadd+0x90>)
 8007610:	21b5      	movs	r1, #181	; 0xb5
 8007612:	f000 fe01 	bl	8008218 <__assert_func>
 8007616:	6922      	ldr	r2, [r4, #16]
 8007618:	3202      	adds	r2, #2
 800761a:	f104 010c 	add.w	r1, r4, #12
 800761e:	0092      	lsls	r2, r2, #2
 8007620:	300c      	adds	r0, #12
 8007622:	f7fc ff6f 	bl	8004504 <memcpy>
 8007626:	4621      	mov	r1, r4
 8007628:	4638      	mov	r0, r7
 800762a:	f7ff ffa3 	bl	8007574 <_Bfree>
 800762e:	462c      	mov	r4, r5
 8007630:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007634:	3601      	adds	r6, #1
 8007636:	f8c3 8014 	str.w	r8, [r3, #20]
 800763a:	6126      	str	r6, [r4, #16]
 800763c:	4620      	mov	r0, r4
 800763e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007642:	bf00      	nop
 8007644:	080091f4 	.word	0x080091f4
 8007648:	08009284 	.word	0x08009284

0800764c <__s2b>:
 800764c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007650:	460c      	mov	r4, r1
 8007652:	4615      	mov	r5, r2
 8007654:	461f      	mov	r7, r3
 8007656:	2209      	movs	r2, #9
 8007658:	3308      	adds	r3, #8
 800765a:	4606      	mov	r6, r0
 800765c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007660:	2100      	movs	r1, #0
 8007662:	2201      	movs	r2, #1
 8007664:	429a      	cmp	r2, r3
 8007666:	db09      	blt.n	800767c <__s2b+0x30>
 8007668:	4630      	mov	r0, r6
 800766a:	f7ff ff43 	bl	80074f4 <_Balloc>
 800766e:	b940      	cbnz	r0, 8007682 <__s2b+0x36>
 8007670:	4602      	mov	r2, r0
 8007672:	4b19      	ldr	r3, [pc, #100]	; (80076d8 <__s2b+0x8c>)
 8007674:	4819      	ldr	r0, [pc, #100]	; (80076dc <__s2b+0x90>)
 8007676:	21ce      	movs	r1, #206	; 0xce
 8007678:	f000 fdce 	bl	8008218 <__assert_func>
 800767c:	0052      	lsls	r2, r2, #1
 800767e:	3101      	adds	r1, #1
 8007680:	e7f0      	b.n	8007664 <__s2b+0x18>
 8007682:	9b08      	ldr	r3, [sp, #32]
 8007684:	6143      	str	r3, [r0, #20]
 8007686:	2d09      	cmp	r5, #9
 8007688:	f04f 0301 	mov.w	r3, #1
 800768c:	6103      	str	r3, [r0, #16]
 800768e:	dd16      	ble.n	80076be <__s2b+0x72>
 8007690:	f104 0909 	add.w	r9, r4, #9
 8007694:	46c8      	mov	r8, r9
 8007696:	442c      	add	r4, r5
 8007698:	f818 3b01 	ldrb.w	r3, [r8], #1
 800769c:	4601      	mov	r1, r0
 800769e:	3b30      	subs	r3, #48	; 0x30
 80076a0:	220a      	movs	r2, #10
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7ff ff88 	bl	80075b8 <__multadd>
 80076a8:	45a0      	cmp	r8, r4
 80076aa:	d1f5      	bne.n	8007698 <__s2b+0x4c>
 80076ac:	f1a5 0408 	sub.w	r4, r5, #8
 80076b0:	444c      	add	r4, r9
 80076b2:	1b2d      	subs	r5, r5, r4
 80076b4:	1963      	adds	r3, r4, r5
 80076b6:	42bb      	cmp	r3, r7
 80076b8:	db04      	blt.n	80076c4 <__s2b+0x78>
 80076ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076be:	340a      	adds	r4, #10
 80076c0:	2509      	movs	r5, #9
 80076c2:	e7f6      	b.n	80076b2 <__s2b+0x66>
 80076c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076c8:	4601      	mov	r1, r0
 80076ca:	3b30      	subs	r3, #48	; 0x30
 80076cc:	220a      	movs	r2, #10
 80076ce:	4630      	mov	r0, r6
 80076d0:	f7ff ff72 	bl	80075b8 <__multadd>
 80076d4:	e7ee      	b.n	80076b4 <__s2b+0x68>
 80076d6:	bf00      	nop
 80076d8:	080091f4 	.word	0x080091f4
 80076dc:	08009284 	.word	0x08009284

080076e0 <__hi0bits>:
 80076e0:	0c03      	lsrs	r3, r0, #16
 80076e2:	041b      	lsls	r3, r3, #16
 80076e4:	b9d3      	cbnz	r3, 800771c <__hi0bits+0x3c>
 80076e6:	0400      	lsls	r0, r0, #16
 80076e8:	2310      	movs	r3, #16
 80076ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076ee:	bf04      	itt	eq
 80076f0:	0200      	lsleq	r0, r0, #8
 80076f2:	3308      	addeq	r3, #8
 80076f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076f8:	bf04      	itt	eq
 80076fa:	0100      	lsleq	r0, r0, #4
 80076fc:	3304      	addeq	r3, #4
 80076fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007702:	bf04      	itt	eq
 8007704:	0080      	lsleq	r0, r0, #2
 8007706:	3302      	addeq	r3, #2
 8007708:	2800      	cmp	r0, #0
 800770a:	db05      	blt.n	8007718 <__hi0bits+0x38>
 800770c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007710:	f103 0301 	add.w	r3, r3, #1
 8007714:	bf08      	it	eq
 8007716:	2320      	moveq	r3, #32
 8007718:	4618      	mov	r0, r3
 800771a:	4770      	bx	lr
 800771c:	2300      	movs	r3, #0
 800771e:	e7e4      	b.n	80076ea <__hi0bits+0xa>

08007720 <__lo0bits>:
 8007720:	6803      	ldr	r3, [r0, #0]
 8007722:	f013 0207 	ands.w	r2, r3, #7
 8007726:	4601      	mov	r1, r0
 8007728:	d00b      	beq.n	8007742 <__lo0bits+0x22>
 800772a:	07da      	lsls	r2, r3, #31
 800772c:	d424      	bmi.n	8007778 <__lo0bits+0x58>
 800772e:	0798      	lsls	r0, r3, #30
 8007730:	bf49      	itett	mi
 8007732:	085b      	lsrmi	r3, r3, #1
 8007734:	089b      	lsrpl	r3, r3, #2
 8007736:	2001      	movmi	r0, #1
 8007738:	600b      	strmi	r3, [r1, #0]
 800773a:	bf5c      	itt	pl
 800773c:	600b      	strpl	r3, [r1, #0]
 800773e:	2002      	movpl	r0, #2
 8007740:	4770      	bx	lr
 8007742:	b298      	uxth	r0, r3
 8007744:	b9b0      	cbnz	r0, 8007774 <__lo0bits+0x54>
 8007746:	0c1b      	lsrs	r3, r3, #16
 8007748:	2010      	movs	r0, #16
 800774a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800774e:	bf04      	itt	eq
 8007750:	0a1b      	lsreq	r3, r3, #8
 8007752:	3008      	addeq	r0, #8
 8007754:	071a      	lsls	r2, r3, #28
 8007756:	bf04      	itt	eq
 8007758:	091b      	lsreq	r3, r3, #4
 800775a:	3004      	addeq	r0, #4
 800775c:	079a      	lsls	r2, r3, #30
 800775e:	bf04      	itt	eq
 8007760:	089b      	lsreq	r3, r3, #2
 8007762:	3002      	addeq	r0, #2
 8007764:	07da      	lsls	r2, r3, #31
 8007766:	d403      	bmi.n	8007770 <__lo0bits+0x50>
 8007768:	085b      	lsrs	r3, r3, #1
 800776a:	f100 0001 	add.w	r0, r0, #1
 800776e:	d005      	beq.n	800777c <__lo0bits+0x5c>
 8007770:	600b      	str	r3, [r1, #0]
 8007772:	4770      	bx	lr
 8007774:	4610      	mov	r0, r2
 8007776:	e7e8      	b.n	800774a <__lo0bits+0x2a>
 8007778:	2000      	movs	r0, #0
 800777a:	4770      	bx	lr
 800777c:	2020      	movs	r0, #32
 800777e:	4770      	bx	lr

08007780 <__i2b>:
 8007780:	b510      	push	{r4, lr}
 8007782:	460c      	mov	r4, r1
 8007784:	2101      	movs	r1, #1
 8007786:	f7ff feb5 	bl	80074f4 <_Balloc>
 800778a:	4602      	mov	r2, r0
 800778c:	b928      	cbnz	r0, 800779a <__i2b+0x1a>
 800778e:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <__i2b+0x24>)
 8007790:	4805      	ldr	r0, [pc, #20]	; (80077a8 <__i2b+0x28>)
 8007792:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007796:	f000 fd3f 	bl	8008218 <__assert_func>
 800779a:	2301      	movs	r3, #1
 800779c:	6144      	str	r4, [r0, #20]
 800779e:	6103      	str	r3, [r0, #16]
 80077a0:	bd10      	pop	{r4, pc}
 80077a2:	bf00      	nop
 80077a4:	080091f4 	.word	0x080091f4
 80077a8:	08009284 	.word	0x08009284

080077ac <__multiply>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	4614      	mov	r4, r2
 80077b2:	690a      	ldr	r2, [r1, #16]
 80077b4:	6923      	ldr	r3, [r4, #16]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	bfb8      	it	lt
 80077ba:	460b      	movlt	r3, r1
 80077bc:	460d      	mov	r5, r1
 80077be:	bfbc      	itt	lt
 80077c0:	4625      	movlt	r5, r4
 80077c2:	461c      	movlt	r4, r3
 80077c4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80077c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80077cc:	68ab      	ldr	r3, [r5, #8]
 80077ce:	6869      	ldr	r1, [r5, #4]
 80077d0:	eb0a 0709 	add.w	r7, sl, r9
 80077d4:	42bb      	cmp	r3, r7
 80077d6:	b085      	sub	sp, #20
 80077d8:	bfb8      	it	lt
 80077da:	3101      	addlt	r1, #1
 80077dc:	f7ff fe8a 	bl	80074f4 <_Balloc>
 80077e0:	b930      	cbnz	r0, 80077f0 <__multiply+0x44>
 80077e2:	4602      	mov	r2, r0
 80077e4:	4b42      	ldr	r3, [pc, #264]	; (80078f0 <__multiply+0x144>)
 80077e6:	4843      	ldr	r0, [pc, #268]	; (80078f4 <__multiply+0x148>)
 80077e8:	f240 115d 	movw	r1, #349	; 0x15d
 80077ec:	f000 fd14 	bl	8008218 <__assert_func>
 80077f0:	f100 0614 	add.w	r6, r0, #20
 80077f4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80077f8:	4633      	mov	r3, r6
 80077fa:	2200      	movs	r2, #0
 80077fc:	4543      	cmp	r3, r8
 80077fe:	d31e      	bcc.n	800783e <__multiply+0x92>
 8007800:	f105 0c14 	add.w	ip, r5, #20
 8007804:	f104 0314 	add.w	r3, r4, #20
 8007808:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800780c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007810:	9202      	str	r2, [sp, #8]
 8007812:	ebac 0205 	sub.w	r2, ip, r5
 8007816:	3a15      	subs	r2, #21
 8007818:	f022 0203 	bic.w	r2, r2, #3
 800781c:	3204      	adds	r2, #4
 800781e:	f105 0115 	add.w	r1, r5, #21
 8007822:	458c      	cmp	ip, r1
 8007824:	bf38      	it	cc
 8007826:	2204      	movcc	r2, #4
 8007828:	9201      	str	r2, [sp, #4]
 800782a:	9a02      	ldr	r2, [sp, #8]
 800782c:	9303      	str	r3, [sp, #12]
 800782e:	429a      	cmp	r2, r3
 8007830:	d808      	bhi.n	8007844 <__multiply+0x98>
 8007832:	2f00      	cmp	r7, #0
 8007834:	dc55      	bgt.n	80078e2 <__multiply+0x136>
 8007836:	6107      	str	r7, [r0, #16]
 8007838:	b005      	add	sp, #20
 800783a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783e:	f843 2b04 	str.w	r2, [r3], #4
 8007842:	e7db      	b.n	80077fc <__multiply+0x50>
 8007844:	f8b3 a000 	ldrh.w	sl, [r3]
 8007848:	f1ba 0f00 	cmp.w	sl, #0
 800784c:	d020      	beq.n	8007890 <__multiply+0xe4>
 800784e:	f105 0e14 	add.w	lr, r5, #20
 8007852:	46b1      	mov	r9, r6
 8007854:	2200      	movs	r2, #0
 8007856:	f85e 4b04 	ldr.w	r4, [lr], #4
 800785a:	f8d9 b000 	ldr.w	fp, [r9]
 800785e:	b2a1      	uxth	r1, r4
 8007860:	fa1f fb8b 	uxth.w	fp, fp
 8007864:	fb0a b101 	mla	r1, sl, r1, fp
 8007868:	4411      	add	r1, r2
 800786a:	f8d9 2000 	ldr.w	r2, [r9]
 800786e:	0c24      	lsrs	r4, r4, #16
 8007870:	0c12      	lsrs	r2, r2, #16
 8007872:	fb0a 2404 	mla	r4, sl, r4, r2
 8007876:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800787a:	b289      	uxth	r1, r1
 800787c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007880:	45f4      	cmp	ip, lr
 8007882:	f849 1b04 	str.w	r1, [r9], #4
 8007886:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800788a:	d8e4      	bhi.n	8007856 <__multiply+0xaa>
 800788c:	9901      	ldr	r1, [sp, #4]
 800788e:	5072      	str	r2, [r6, r1]
 8007890:	9a03      	ldr	r2, [sp, #12]
 8007892:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007896:	3304      	adds	r3, #4
 8007898:	f1b9 0f00 	cmp.w	r9, #0
 800789c:	d01f      	beq.n	80078de <__multiply+0x132>
 800789e:	6834      	ldr	r4, [r6, #0]
 80078a0:	f105 0114 	add.w	r1, r5, #20
 80078a4:	46b6      	mov	lr, r6
 80078a6:	f04f 0a00 	mov.w	sl, #0
 80078aa:	880a      	ldrh	r2, [r1, #0]
 80078ac:	f8be b002 	ldrh.w	fp, [lr, #2]
 80078b0:	fb09 b202 	mla	r2, r9, r2, fp
 80078b4:	4492      	add	sl, r2
 80078b6:	b2a4      	uxth	r4, r4
 80078b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80078bc:	f84e 4b04 	str.w	r4, [lr], #4
 80078c0:	f851 4b04 	ldr.w	r4, [r1], #4
 80078c4:	f8be 2000 	ldrh.w	r2, [lr]
 80078c8:	0c24      	lsrs	r4, r4, #16
 80078ca:	fb09 2404 	mla	r4, r9, r4, r2
 80078ce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80078d2:	458c      	cmp	ip, r1
 80078d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80078d8:	d8e7      	bhi.n	80078aa <__multiply+0xfe>
 80078da:	9a01      	ldr	r2, [sp, #4]
 80078dc:	50b4      	str	r4, [r6, r2]
 80078de:	3604      	adds	r6, #4
 80078e0:	e7a3      	b.n	800782a <__multiply+0x7e>
 80078e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1a5      	bne.n	8007836 <__multiply+0x8a>
 80078ea:	3f01      	subs	r7, #1
 80078ec:	e7a1      	b.n	8007832 <__multiply+0x86>
 80078ee:	bf00      	nop
 80078f0:	080091f4 	.word	0x080091f4
 80078f4:	08009284 	.word	0x08009284

080078f8 <__pow5mult>:
 80078f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078fc:	4615      	mov	r5, r2
 80078fe:	f012 0203 	ands.w	r2, r2, #3
 8007902:	4606      	mov	r6, r0
 8007904:	460f      	mov	r7, r1
 8007906:	d007      	beq.n	8007918 <__pow5mult+0x20>
 8007908:	4c25      	ldr	r4, [pc, #148]	; (80079a0 <__pow5mult+0xa8>)
 800790a:	3a01      	subs	r2, #1
 800790c:	2300      	movs	r3, #0
 800790e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007912:	f7ff fe51 	bl	80075b8 <__multadd>
 8007916:	4607      	mov	r7, r0
 8007918:	10ad      	asrs	r5, r5, #2
 800791a:	d03d      	beq.n	8007998 <__pow5mult+0xa0>
 800791c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800791e:	b97c      	cbnz	r4, 8007940 <__pow5mult+0x48>
 8007920:	2010      	movs	r0, #16
 8007922:	f7ff fdc1 	bl	80074a8 <malloc>
 8007926:	4602      	mov	r2, r0
 8007928:	6270      	str	r0, [r6, #36]	; 0x24
 800792a:	b928      	cbnz	r0, 8007938 <__pow5mult+0x40>
 800792c:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <__pow5mult+0xac>)
 800792e:	481e      	ldr	r0, [pc, #120]	; (80079a8 <__pow5mult+0xb0>)
 8007930:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007934:	f000 fc70 	bl	8008218 <__assert_func>
 8007938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800793c:	6004      	str	r4, [r0, #0]
 800793e:	60c4      	str	r4, [r0, #12]
 8007940:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007948:	b94c      	cbnz	r4, 800795e <__pow5mult+0x66>
 800794a:	f240 2171 	movw	r1, #625	; 0x271
 800794e:	4630      	mov	r0, r6
 8007950:	f7ff ff16 	bl	8007780 <__i2b>
 8007954:	2300      	movs	r3, #0
 8007956:	f8c8 0008 	str.w	r0, [r8, #8]
 800795a:	4604      	mov	r4, r0
 800795c:	6003      	str	r3, [r0, #0]
 800795e:	f04f 0900 	mov.w	r9, #0
 8007962:	07eb      	lsls	r3, r5, #31
 8007964:	d50a      	bpl.n	800797c <__pow5mult+0x84>
 8007966:	4639      	mov	r1, r7
 8007968:	4622      	mov	r2, r4
 800796a:	4630      	mov	r0, r6
 800796c:	f7ff ff1e 	bl	80077ac <__multiply>
 8007970:	4639      	mov	r1, r7
 8007972:	4680      	mov	r8, r0
 8007974:	4630      	mov	r0, r6
 8007976:	f7ff fdfd 	bl	8007574 <_Bfree>
 800797a:	4647      	mov	r7, r8
 800797c:	106d      	asrs	r5, r5, #1
 800797e:	d00b      	beq.n	8007998 <__pow5mult+0xa0>
 8007980:	6820      	ldr	r0, [r4, #0]
 8007982:	b938      	cbnz	r0, 8007994 <__pow5mult+0x9c>
 8007984:	4622      	mov	r2, r4
 8007986:	4621      	mov	r1, r4
 8007988:	4630      	mov	r0, r6
 800798a:	f7ff ff0f 	bl	80077ac <__multiply>
 800798e:	6020      	str	r0, [r4, #0]
 8007990:	f8c0 9000 	str.w	r9, [r0]
 8007994:	4604      	mov	r4, r0
 8007996:	e7e4      	b.n	8007962 <__pow5mult+0x6a>
 8007998:	4638      	mov	r0, r7
 800799a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800799e:	bf00      	nop
 80079a0:	080093d8 	.word	0x080093d8
 80079a4:	0800917e 	.word	0x0800917e
 80079a8:	08009284 	.word	0x08009284

080079ac <__lshift>:
 80079ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	460c      	mov	r4, r1
 80079b2:	6849      	ldr	r1, [r1, #4]
 80079b4:	6923      	ldr	r3, [r4, #16]
 80079b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079ba:	68a3      	ldr	r3, [r4, #8]
 80079bc:	4607      	mov	r7, r0
 80079be:	4691      	mov	r9, r2
 80079c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079c4:	f108 0601 	add.w	r6, r8, #1
 80079c8:	42b3      	cmp	r3, r6
 80079ca:	db0b      	blt.n	80079e4 <__lshift+0x38>
 80079cc:	4638      	mov	r0, r7
 80079ce:	f7ff fd91 	bl	80074f4 <_Balloc>
 80079d2:	4605      	mov	r5, r0
 80079d4:	b948      	cbnz	r0, 80079ea <__lshift+0x3e>
 80079d6:	4602      	mov	r2, r0
 80079d8:	4b28      	ldr	r3, [pc, #160]	; (8007a7c <__lshift+0xd0>)
 80079da:	4829      	ldr	r0, [pc, #164]	; (8007a80 <__lshift+0xd4>)
 80079dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079e0:	f000 fc1a 	bl	8008218 <__assert_func>
 80079e4:	3101      	adds	r1, #1
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	e7ee      	b.n	80079c8 <__lshift+0x1c>
 80079ea:	2300      	movs	r3, #0
 80079ec:	f100 0114 	add.w	r1, r0, #20
 80079f0:	f100 0210 	add.w	r2, r0, #16
 80079f4:	4618      	mov	r0, r3
 80079f6:	4553      	cmp	r3, sl
 80079f8:	db33      	blt.n	8007a62 <__lshift+0xb6>
 80079fa:	6920      	ldr	r0, [r4, #16]
 80079fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a00:	f104 0314 	add.w	r3, r4, #20
 8007a04:	f019 091f 	ands.w	r9, r9, #31
 8007a08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a10:	d02b      	beq.n	8007a6a <__lshift+0xbe>
 8007a12:	f1c9 0e20 	rsb	lr, r9, #32
 8007a16:	468a      	mov	sl, r1
 8007a18:	2200      	movs	r2, #0
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	fa00 f009 	lsl.w	r0, r0, r9
 8007a20:	4302      	orrs	r2, r0
 8007a22:	f84a 2b04 	str.w	r2, [sl], #4
 8007a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a2a:	459c      	cmp	ip, r3
 8007a2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a30:	d8f3      	bhi.n	8007a1a <__lshift+0x6e>
 8007a32:	ebac 0304 	sub.w	r3, ip, r4
 8007a36:	3b15      	subs	r3, #21
 8007a38:	f023 0303 	bic.w	r3, r3, #3
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	f104 0015 	add.w	r0, r4, #21
 8007a42:	4584      	cmp	ip, r0
 8007a44:	bf38      	it	cc
 8007a46:	2304      	movcc	r3, #4
 8007a48:	50ca      	str	r2, [r1, r3]
 8007a4a:	b10a      	cbz	r2, 8007a50 <__lshift+0xa4>
 8007a4c:	f108 0602 	add.w	r6, r8, #2
 8007a50:	3e01      	subs	r6, #1
 8007a52:	4638      	mov	r0, r7
 8007a54:	612e      	str	r6, [r5, #16]
 8007a56:	4621      	mov	r1, r4
 8007a58:	f7ff fd8c 	bl	8007574 <_Bfree>
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a62:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a66:	3301      	adds	r3, #1
 8007a68:	e7c5      	b.n	80079f6 <__lshift+0x4a>
 8007a6a:	3904      	subs	r1, #4
 8007a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a70:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a74:	459c      	cmp	ip, r3
 8007a76:	d8f9      	bhi.n	8007a6c <__lshift+0xc0>
 8007a78:	e7ea      	b.n	8007a50 <__lshift+0xa4>
 8007a7a:	bf00      	nop
 8007a7c:	080091f4 	.word	0x080091f4
 8007a80:	08009284 	.word	0x08009284

08007a84 <__mcmp>:
 8007a84:	b530      	push	{r4, r5, lr}
 8007a86:	6902      	ldr	r2, [r0, #16]
 8007a88:	690c      	ldr	r4, [r1, #16]
 8007a8a:	1b12      	subs	r2, r2, r4
 8007a8c:	d10e      	bne.n	8007aac <__mcmp+0x28>
 8007a8e:	f100 0314 	add.w	r3, r0, #20
 8007a92:	3114      	adds	r1, #20
 8007a94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007aa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007aa4:	42a5      	cmp	r5, r4
 8007aa6:	d003      	beq.n	8007ab0 <__mcmp+0x2c>
 8007aa8:	d305      	bcc.n	8007ab6 <__mcmp+0x32>
 8007aaa:	2201      	movs	r2, #1
 8007aac:	4610      	mov	r0, r2
 8007aae:	bd30      	pop	{r4, r5, pc}
 8007ab0:	4283      	cmp	r3, r0
 8007ab2:	d3f3      	bcc.n	8007a9c <__mcmp+0x18>
 8007ab4:	e7fa      	b.n	8007aac <__mcmp+0x28>
 8007ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aba:	e7f7      	b.n	8007aac <__mcmp+0x28>

08007abc <__mdiff>:
 8007abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4617      	mov	r7, r2
 8007aca:	f7ff ffdb 	bl	8007a84 <__mcmp>
 8007ace:	1e05      	subs	r5, r0, #0
 8007ad0:	d110      	bne.n	8007af4 <__mdiff+0x38>
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f7ff fd0d 	bl	80074f4 <_Balloc>
 8007ada:	b930      	cbnz	r0, 8007aea <__mdiff+0x2e>
 8007adc:	4b39      	ldr	r3, [pc, #228]	; (8007bc4 <__mdiff+0x108>)
 8007ade:	4602      	mov	r2, r0
 8007ae0:	f240 2132 	movw	r1, #562	; 0x232
 8007ae4:	4838      	ldr	r0, [pc, #224]	; (8007bc8 <__mdiff+0x10c>)
 8007ae6:	f000 fb97 	bl	8008218 <__assert_func>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af4:	bfa4      	itt	ge
 8007af6:	463b      	movge	r3, r7
 8007af8:	4627      	movge	r7, r4
 8007afa:	4630      	mov	r0, r6
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	bfa6      	itte	ge
 8007b00:	461c      	movge	r4, r3
 8007b02:	2500      	movge	r5, #0
 8007b04:	2501      	movlt	r5, #1
 8007b06:	f7ff fcf5 	bl	80074f4 <_Balloc>
 8007b0a:	b920      	cbnz	r0, 8007b16 <__mdiff+0x5a>
 8007b0c:	4b2d      	ldr	r3, [pc, #180]	; (8007bc4 <__mdiff+0x108>)
 8007b0e:	4602      	mov	r2, r0
 8007b10:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b14:	e7e6      	b.n	8007ae4 <__mdiff+0x28>
 8007b16:	693e      	ldr	r6, [r7, #16]
 8007b18:	60c5      	str	r5, [r0, #12]
 8007b1a:	6925      	ldr	r5, [r4, #16]
 8007b1c:	f107 0114 	add.w	r1, r7, #20
 8007b20:	f104 0914 	add.w	r9, r4, #20
 8007b24:	f100 0e14 	add.w	lr, r0, #20
 8007b28:	f107 0210 	add.w	r2, r7, #16
 8007b2c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007b30:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007b34:	46f2      	mov	sl, lr
 8007b36:	2700      	movs	r7, #0
 8007b38:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b40:	fa1f f883 	uxth.w	r8, r3
 8007b44:	fa17 f78b 	uxtah	r7, r7, fp
 8007b48:	0c1b      	lsrs	r3, r3, #16
 8007b4a:	eba7 0808 	sub.w	r8, r7, r8
 8007b4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b56:	fa1f f888 	uxth.w	r8, r8
 8007b5a:	141f      	asrs	r7, r3, #16
 8007b5c:	454d      	cmp	r5, r9
 8007b5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b62:	f84a 3b04 	str.w	r3, [sl], #4
 8007b66:	d8e7      	bhi.n	8007b38 <__mdiff+0x7c>
 8007b68:	1b2b      	subs	r3, r5, r4
 8007b6a:	3b15      	subs	r3, #21
 8007b6c:	f023 0303 	bic.w	r3, r3, #3
 8007b70:	3304      	adds	r3, #4
 8007b72:	3415      	adds	r4, #21
 8007b74:	42a5      	cmp	r5, r4
 8007b76:	bf38      	it	cc
 8007b78:	2304      	movcc	r3, #4
 8007b7a:	4419      	add	r1, r3
 8007b7c:	4473      	add	r3, lr
 8007b7e:	469e      	mov	lr, r3
 8007b80:	460d      	mov	r5, r1
 8007b82:	4565      	cmp	r5, ip
 8007b84:	d30e      	bcc.n	8007ba4 <__mdiff+0xe8>
 8007b86:	f10c 0203 	add.w	r2, ip, #3
 8007b8a:	1a52      	subs	r2, r2, r1
 8007b8c:	f022 0203 	bic.w	r2, r2, #3
 8007b90:	3903      	subs	r1, #3
 8007b92:	458c      	cmp	ip, r1
 8007b94:	bf38      	it	cc
 8007b96:	2200      	movcc	r2, #0
 8007b98:	441a      	add	r2, r3
 8007b9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b9e:	b17b      	cbz	r3, 8007bc0 <__mdiff+0x104>
 8007ba0:	6106      	str	r6, [r0, #16]
 8007ba2:	e7a5      	b.n	8007af0 <__mdiff+0x34>
 8007ba4:	f855 8b04 	ldr.w	r8, [r5], #4
 8007ba8:	fa17 f488 	uxtah	r4, r7, r8
 8007bac:	1422      	asrs	r2, r4, #16
 8007bae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007bb2:	b2a4      	uxth	r4, r4
 8007bb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007bb8:	f84e 4b04 	str.w	r4, [lr], #4
 8007bbc:	1417      	asrs	r7, r2, #16
 8007bbe:	e7e0      	b.n	8007b82 <__mdiff+0xc6>
 8007bc0:	3e01      	subs	r6, #1
 8007bc2:	e7ea      	b.n	8007b9a <__mdiff+0xde>
 8007bc4:	080091f4 	.word	0x080091f4
 8007bc8:	08009284 	.word	0x08009284

08007bcc <__ulp>:
 8007bcc:	b082      	sub	sp, #8
 8007bce:	ed8d 0b00 	vstr	d0, [sp]
 8007bd2:	9b01      	ldr	r3, [sp, #4]
 8007bd4:	4912      	ldr	r1, [pc, #72]	; (8007c20 <__ulp+0x54>)
 8007bd6:	4019      	ands	r1, r3
 8007bd8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007bdc:	2900      	cmp	r1, #0
 8007bde:	dd05      	ble.n	8007bec <__ulp+0x20>
 8007be0:	2200      	movs	r2, #0
 8007be2:	460b      	mov	r3, r1
 8007be4:	ec43 2b10 	vmov	d0, r2, r3
 8007be8:	b002      	add	sp, #8
 8007bea:	4770      	bx	lr
 8007bec:	4249      	negs	r1, r1
 8007bee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007bf2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007bf6:	f04f 0200 	mov.w	r2, #0
 8007bfa:	f04f 0300 	mov.w	r3, #0
 8007bfe:	da04      	bge.n	8007c0a <__ulp+0x3e>
 8007c00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007c04:	fa41 f300 	asr.w	r3, r1, r0
 8007c08:	e7ec      	b.n	8007be4 <__ulp+0x18>
 8007c0a:	f1a0 0114 	sub.w	r1, r0, #20
 8007c0e:	291e      	cmp	r1, #30
 8007c10:	bfda      	itte	le
 8007c12:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007c16:	fa20 f101 	lsrle.w	r1, r0, r1
 8007c1a:	2101      	movgt	r1, #1
 8007c1c:	460a      	mov	r2, r1
 8007c1e:	e7e1      	b.n	8007be4 <__ulp+0x18>
 8007c20:	7ff00000 	.word	0x7ff00000

08007c24 <__b2d>:
 8007c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c26:	6905      	ldr	r5, [r0, #16]
 8007c28:	f100 0714 	add.w	r7, r0, #20
 8007c2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007c30:	1f2e      	subs	r6, r5, #4
 8007c32:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007c36:	4620      	mov	r0, r4
 8007c38:	f7ff fd52 	bl	80076e0 <__hi0bits>
 8007c3c:	f1c0 0320 	rsb	r3, r0, #32
 8007c40:	280a      	cmp	r0, #10
 8007c42:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007cc0 <__b2d+0x9c>
 8007c46:	600b      	str	r3, [r1, #0]
 8007c48:	dc14      	bgt.n	8007c74 <__b2d+0x50>
 8007c4a:	f1c0 0e0b 	rsb	lr, r0, #11
 8007c4e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007c52:	42b7      	cmp	r7, r6
 8007c54:	ea41 030c 	orr.w	r3, r1, ip
 8007c58:	bf34      	ite	cc
 8007c5a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007c5e:	2100      	movcs	r1, #0
 8007c60:	3015      	adds	r0, #21
 8007c62:	fa04 f000 	lsl.w	r0, r4, r0
 8007c66:	fa21 f10e 	lsr.w	r1, r1, lr
 8007c6a:	ea40 0201 	orr.w	r2, r0, r1
 8007c6e:	ec43 2b10 	vmov	d0, r2, r3
 8007c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c74:	42b7      	cmp	r7, r6
 8007c76:	bf3a      	itte	cc
 8007c78:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007c7c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007c80:	2100      	movcs	r1, #0
 8007c82:	380b      	subs	r0, #11
 8007c84:	d017      	beq.n	8007cb6 <__b2d+0x92>
 8007c86:	f1c0 0c20 	rsb	ip, r0, #32
 8007c8a:	fa04 f500 	lsl.w	r5, r4, r0
 8007c8e:	42be      	cmp	r6, r7
 8007c90:	fa21 f40c 	lsr.w	r4, r1, ip
 8007c94:	ea45 0504 	orr.w	r5, r5, r4
 8007c98:	bf8c      	ite	hi
 8007c9a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007c9e:	2400      	movls	r4, #0
 8007ca0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007ca4:	fa01 f000 	lsl.w	r0, r1, r0
 8007ca8:	fa24 f40c 	lsr.w	r4, r4, ip
 8007cac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007cb0:	ea40 0204 	orr.w	r2, r0, r4
 8007cb4:	e7db      	b.n	8007c6e <__b2d+0x4a>
 8007cb6:	ea44 030c 	orr.w	r3, r4, ip
 8007cba:	460a      	mov	r2, r1
 8007cbc:	e7d7      	b.n	8007c6e <__b2d+0x4a>
 8007cbe:	bf00      	nop
 8007cc0:	3ff00000 	.word	0x3ff00000

08007cc4 <__d2b>:
 8007cc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cc8:	4689      	mov	r9, r1
 8007cca:	2101      	movs	r1, #1
 8007ccc:	ec57 6b10 	vmov	r6, r7, d0
 8007cd0:	4690      	mov	r8, r2
 8007cd2:	f7ff fc0f 	bl	80074f4 <_Balloc>
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	b930      	cbnz	r0, 8007ce8 <__d2b+0x24>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	4b25      	ldr	r3, [pc, #148]	; (8007d74 <__d2b+0xb0>)
 8007cde:	4826      	ldr	r0, [pc, #152]	; (8007d78 <__d2b+0xb4>)
 8007ce0:	f240 310a 	movw	r1, #778	; 0x30a
 8007ce4:	f000 fa98 	bl	8008218 <__assert_func>
 8007ce8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007cec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007cf0:	bb35      	cbnz	r5, 8007d40 <__d2b+0x7c>
 8007cf2:	2e00      	cmp	r6, #0
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	d028      	beq.n	8007d4a <__d2b+0x86>
 8007cf8:	4668      	mov	r0, sp
 8007cfa:	9600      	str	r6, [sp, #0]
 8007cfc:	f7ff fd10 	bl	8007720 <__lo0bits>
 8007d00:	9900      	ldr	r1, [sp, #0]
 8007d02:	b300      	cbz	r0, 8007d46 <__d2b+0x82>
 8007d04:	9a01      	ldr	r2, [sp, #4]
 8007d06:	f1c0 0320 	rsb	r3, r0, #32
 8007d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	40c2      	lsrs	r2, r0
 8007d12:	6163      	str	r3, [r4, #20]
 8007d14:	9201      	str	r2, [sp, #4]
 8007d16:	9b01      	ldr	r3, [sp, #4]
 8007d18:	61a3      	str	r3, [r4, #24]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bf14      	ite	ne
 8007d1e:	2202      	movne	r2, #2
 8007d20:	2201      	moveq	r2, #1
 8007d22:	6122      	str	r2, [r4, #16]
 8007d24:	b1d5      	cbz	r5, 8007d5c <__d2b+0x98>
 8007d26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d2a:	4405      	add	r5, r0
 8007d2c:	f8c9 5000 	str.w	r5, [r9]
 8007d30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d34:	f8c8 0000 	str.w	r0, [r8]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	b003      	add	sp, #12
 8007d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d44:	e7d5      	b.n	8007cf2 <__d2b+0x2e>
 8007d46:	6161      	str	r1, [r4, #20]
 8007d48:	e7e5      	b.n	8007d16 <__d2b+0x52>
 8007d4a:	a801      	add	r0, sp, #4
 8007d4c:	f7ff fce8 	bl	8007720 <__lo0bits>
 8007d50:	9b01      	ldr	r3, [sp, #4]
 8007d52:	6163      	str	r3, [r4, #20]
 8007d54:	2201      	movs	r2, #1
 8007d56:	6122      	str	r2, [r4, #16]
 8007d58:	3020      	adds	r0, #32
 8007d5a:	e7e3      	b.n	8007d24 <__d2b+0x60>
 8007d5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d64:	f8c9 0000 	str.w	r0, [r9]
 8007d68:	6918      	ldr	r0, [r3, #16]
 8007d6a:	f7ff fcb9 	bl	80076e0 <__hi0bits>
 8007d6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d72:	e7df      	b.n	8007d34 <__d2b+0x70>
 8007d74:	080091f4 	.word	0x080091f4
 8007d78:	08009284 	.word	0x08009284

08007d7c <__ratio>:
 8007d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d80:	4688      	mov	r8, r1
 8007d82:	4669      	mov	r1, sp
 8007d84:	4681      	mov	r9, r0
 8007d86:	f7ff ff4d 	bl	8007c24 <__b2d>
 8007d8a:	a901      	add	r1, sp, #4
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	ec55 4b10 	vmov	r4, r5, d0
 8007d92:	f7ff ff47 	bl	8007c24 <__b2d>
 8007d96:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d9a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007d9e:	eba3 0c02 	sub.w	ip, r3, r2
 8007da2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007dac:	ec51 0b10 	vmov	r0, r1, d0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bfd6      	itet	le
 8007db4:	460a      	movle	r2, r1
 8007db6:	462a      	movgt	r2, r5
 8007db8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007dbc:	468b      	mov	fp, r1
 8007dbe:	462f      	mov	r7, r5
 8007dc0:	bfd4      	ite	le
 8007dc2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007dc6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007dca:	4620      	mov	r0, r4
 8007dcc:	ee10 2a10 	vmov	r2, s0
 8007dd0:	465b      	mov	r3, fp
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	f7f8 fd42 	bl	800085c <__aeabi_ddiv>
 8007dd8:	ec41 0b10 	vmov	d0, r0, r1
 8007ddc:	b003      	add	sp, #12
 8007dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007de2 <__copybits>:
 8007de2:	3901      	subs	r1, #1
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	1149      	asrs	r1, r1, #5
 8007de8:	6914      	ldr	r4, [r2, #16]
 8007dea:	3101      	adds	r1, #1
 8007dec:	f102 0314 	add.w	r3, r2, #20
 8007df0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007df4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007df8:	1f05      	subs	r5, r0, #4
 8007dfa:	42a3      	cmp	r3, r4
 8007dfc:	d30c      	bcc.n	8007e18 <__copybits+0x36>
 8007dfe:	1aa3      	subs	r3, r4, r2
 8007e00:	3b11      	subs	r3, #17
 8007e02:	f023 0303 	bic.w	r3, r3, #3
 8007e06:	3211      	adds	r2, #17
 8007e08:	42a2      	cmp	r2, r4
 8007e0a:	bf88      	it	hi
 8007e0c:	2300      	movhi	r3, #0
 8007e0e:	4418      	add	r0, r3
 8007e10:	2300      	movs	r3, #0
 8007e12:	4288      	cmp	r0, r1
 8007e14:	d305      	bcc.n	8007e22 <__copybits+0x40>
 8007e16:	bd70      	pop	{r4, r5, r6, pc}
 8007e18:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e1c:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e20:	e7eb      	b.n	8007dfa <__copybits+0x18>
 8007e22:	f840 3b04 	str.w	r3, [r0], #4
 8007e26:	e7f4      	b.n	8007e12 <__copybits+0x30>

08007e28 <__any_on>:
 8007e28:	f100 0214 	add.w	r2, r0, #20
 8007e2c:	6900      	ldr	r0, [r0, #16]
 8007e2e:	114b      	asrs	r3, r1, #5
 8007e30:	4298      	cmp	r0, r3
 8007e32:	b510      	push	{r4, lr}
 8007e34:	db11      	blt.n	8007e5a <__any_on+0x32>
 8007e36:	dd0a      	ble.n	8007e4e <__any_on+0x26>
 8007e38:	f011 011f 	ands.w	r1, r1, #31
 8007e3c:	d007      	beq.n	8007e4e <__any_on+0x26>
 8007e3e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e42:	fa24 f001 	lsr.w	r0, r4, r1
 8007e46:	fa00 f101 	lsl.w	r1, r0, r1
 8007e4a:	428c      	cmp	r4, r1
 8007e4c:	d10b      	bne.n	8007e66 <__any_on+0x3e>
 8007e4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d803      	bhi.n	8007e5e <__any_on+0x36>
 8007e56:	2000      	movs	r0, #0
 8007e58:	bd10      	pop	{r4, pc}
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	e7f7      	b.n	8007e4e <__any_on+0x26>
 8007e5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e62:	2900      	cmp	r1, #0
 8007e64:	d0f5      	beq.n	8007e52 <__any_on+0x2a>
 8007e66:	2001      	movs	r0, #1
 8007e68:	e7f6      	b.n	8007e58 <__any_on+0x30>
	...

08007e6c <_free_r>:
 8007e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e6e:	2900      	cmp	r1, #0
 8007e70:	d048      	beq.n	8007f04 <_free_r+0x98>
 8007e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e76:	9001      	str	r0, [sp, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e7e:	bfb8      	it	lt
 8007e80:	18e4      	addlt	r4, r4, r3
 8007e82:	f7ff fb2b 	bl	80074dc <__malloc_lock>
 8007e86:	4a20      	ldr	r2, [pc, #128]	; (8007f08 <_free_r+0x9c>)
 8007e88:	9801      	ldr	r0, [sp, #4]
 8007e8a:	6813      	ldr	r3, [r2, #0]
 8007e8c:	4615      	mov	r5, r2
 8007e8e:	b933      	cbnz	r3, 8007e9e <_free_r+0x32>
 8007e90:	6063      	str	r3, [r4, #4]
 8007e92:	6014      	str	r4, [r2, #0]
 8007e94:	b003      	add	sp, #12
 8007e96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e9a:	f7ff bb25 	b.w	80074e8 <__malloc_unlock>
 8007e9e:	42a3      	cmp	r3, r4
 8007ea0:	d90b      	bls.n	8007eba <_free_r+0x4e>
 8007ea2:	6821      	ldr	r1, [r4, #0]
 8007ea4:	1862      	adds	r2, r4, r1
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	bf04      	itt	eq
 8007eaa:	681a      	ldreq	r2, [r3, #0]
 8007eac:	685b      	ldreq	r3, [r3, #4]
 8007eae:	6063      	str	r3, [r4, #4]
 8007eb0:	bf04      	itt	eq
 8007eb2:	1852      	addeq	r2, r2, r1
 8007eb4:	6022      	streq	r2, [r4, #0]
 8007eb6:	602c      	str	r4, [r5, #0]
 8007eb8:	e7ec      	b.n	8007e94 <_free_r+0x28>
 8007eba:	461a      	mov	r2, r3
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	b10b      	cbz	r3, 8007ec4 <_free_r+0x58>
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	d9fa      	bls.n	8007eba <_free_r+0x4e>
 8007ec4:	6811      	ldr	r1, [r2, #0]
 8007ec6:	1855      	adds	r5, r2, r1
 8007ec8:	42a5      	cmp	r5, r4
 8007eca:	d10b      	bne.n	8007ee4 <_free_r+0x78>
 8007ecc:	6824      	ldr	r4, [r4, #0]
 8007ece:	4421      	add	r1, r4
 8007ed0:	1854      	adds	r4, r2, r1
 8007ed2:	42a3      	cmp	r3, r4
 8007ed4:	6011      	str	r1, [r2, #0]
 8007ed6:	d1dd      	bne.n	8007e94 <_free_r+0x28>
 8007ed8:	681c      	ldr	r4, [r3, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	6053      	str	r3, [r2, #4]
 8007ede:	4421      	add	r1, r4
 8007ee0:	6011      	str	r1, [r2, #0]
 8007ee2:	e7d7      	b.n	8007e94 <_free_r+0x28>
 8007ee4:	d902      	bls.n	8007eec <_free_r+0x80>
 8007ee6:	230c      	movs	r3, #12
 8007ee8:	6003      	str	r3, [r0, #0]
 8007eea:	e7d3      	b.n	8007e94 <_free_r+0x28>
 8007eec:	6825      	ldr	r5, [r4, #0]
 8007eee:	1961      	adds	r1, r4, r5
 8007ef0:	428b      	cmp	r3, r1
 8007ef2:	bf04      	itt	eq
 8007ef4:	6819      	ldreq	r1, [r3, #0]
 8007ef6:	685b      	ldreq	r3, [r3, #4]
 8007ef8:	6063      	str	r3, [r4, #4]
 8007efa:	bf04      	itt	eq
 8007efc:	1949      	addeq	r1, r1, r5
 8007efe:	6021      	streq	r1, [r4, #0]
 8007f00:	6054      	str	r4, [r2, #4]
 8007f02:	e7c7      	b.n	8007e94 <_free_r+0x28>
 8007f04:	b003      	add	sp, #12
 8007f06:	bd30      	pop	{r4, r5, pc}
 8007f08:	20000428 	.word	0x20000428

08007f0c <__ssputs_r>:
 8007f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f10:	688e      	ldr	r6, [r1, #8]
 8007f12:	429e      	cmp	r6, r3
 8007f14:	4682      	mov	sl, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	4690      	mov	r8, r2
 8007f1a:	461f      	mov	r7, r3
 8007f1c:	d838      	bhi.n	8007f90 <__ssputs_r+0x84>
 8007f1e:	898a      	ldrh	r2, [r1, #12]
 8007f20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f24:	d032      	beq.n	8007f8c <__ssputs_r+0x80>
 8007f26:	6825      	ldr	r5, [r4, #0]
 8007f28:	6909      	ldr	r1, [r1, #16]
 8007f2a:	eba5 0901 	sub.w	r9, r5, r1
 8007f2e:	6965      	ldr	r5, [r4, #20]
 8007f30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f38:	3301      	adds	r3, #1
 8007f3a:	444b      	add	r3, r9
 8007f3c:	106d      	asrs	r5, r5, #1
 8007f3e:	429d      	cmp	r5, r3
 8007f40:	bf38      	it	cc
 8007f42:	461d      	movcc	r5, r3
 8007f44:	0553      	lsls	r3, r2, #21
 8007f46:	d531      	bpl.n	8007fac <__ssputs_r+0xa0>
 8007f48:	4629      	mov	r1, r5
 8007f4a:	f7fc fb01 	bl	8004550 <_malloc_r>
 8007f4e:	4606      	mov	r6, r0
 8007f50:	b950      	cbnz	r0, 8007f68 <__ssputs_r+0x5c>
 8007f52:	230c      	movs	r3, #12
 8007f54:	f8ca 3000 	str.w	r3, [sl]
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f5e:	81a3      	strh	r3, [r4, #12]
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295
 8007f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f68:	6921      	ldr	r1, [r4, #16]
 8007f6a:	464a      	mov	r2, r9
 8007f6c:	f7fc faca 	bl	8004504 <memcpy>
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f7a:	81a3      	strh	r3, [r4, #12]
 8007f7c:	6126      	str	r6, [r4, #16]
 8007f7e:	6165      	str	r5, [r4, #20]
 8007f80:	444e      	add	r6, r9
 8007f82:	eba5 0509 	sub.w	r5, r5, r9
 8007f86:	6026      	str	r6, [r4, #0]
 8007f88:	60a5      	str	r5, [r4, #8]
 8007f8a:	463e      	mov	r6, r7
 8007f8c:	42be      	cmp	r6, r7
 8007f8e:	d900      	bls.n	8007f92 <__ssputs_r+0x86>
 8007f90:	463e      	mov	r6, r7
 8007f92:	4632      	mov	r2, r6
 8007f94:	6820      	ldr	r0, [r4, #0]
 8007f96:	4641      	mov	r1, r8
 8007f98:	f000 f971 	bl	800827e <memmove>
 8007f9c:	68a3      	ldr	r3, [r4, #8]
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	1b9b      	subs	r3, r3, r6
 8007fa2:	4432      	add	r2, r6
 8007fa4:	60a3      	str	r3, [r4, #8]
 8007fa6:	6022      	str	r2, [r4, #0]
 8007fa8:	2000      	movs	r0, #0
 8007faa:	e7db      	b.n	8007f64 <__ssputs_r+0x58>
 8007fac:	462a      	mov	r2, r5
 8007fae:	f000 f980 	bl	80082b2 <_realloc_r>
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d1e1      	bne.n	8007f7c <__ssputs_r+0x70>
 8007fb8:	6921      	ldr	r1, [r4, #16]
 8007fba:	4650      	mov	r0, sl
 8007fbc:	f7ff ff56 	bl	8007e6c <_free_r>
 8007fc0:	e7c7      	b.n	8007f52 <__ssputs_r+0x46>
	...

08007fc4 <_svfiprintf_r>:
 8007fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc8:	4698      	mov	r8, r3
 8007fca:	898b      	ldrh	r3, [r1, #12]
 8007fcc:	061b      	lsls	r3, r3, #24
 8007fce:	b09d      	sub	sp, #116	; 0x74
 8007fd0:	4607      	mov	r7, r0
 8007fd2:	460d      	mov	r5, r1
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	d50e      	bpl.n	8007ff6 <_svfiprintf_r+0x32>
 8007fd8:	690b      	ldr	r3, [r1, #16]
 8007fda:	b963      	cbnz	r3, 8007ff6 <_svfiprintf_r+0x32>
 8007fdc:	2140      	movs	r1, #64	; 0x40
 8007fde:	f7fc fab7 	bl	8004550 <_malloc_r>
 8007fe2:	6028      	str	r0, [r5, #0]
 8007fe4:	6128      	str	r0, [r5, #16]
 8007fe6:	b920      	cbnz	r0, 8007ff2 <_svfiprintf_r+0x2e>
 8007fe8:	230c      	movs	r3, #12
 8007fea:	603b      	str	r3, [r7, #0]
 8007fec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff0:	e0d1      	b.n	8008196 <_svfiprintf_r+0x1d2>
 8007ff2:	2340      	movs	r3, #64	; 0x40
 8007ff4:	616b      	str	r3, [r5, #20]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8007ffa:	2320      	movs	r3, #32
 8007ffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008000:	f8cd 800c 	str.w	r8, [sp, #12]
 8008004:	2330      	movs	r3, #48	; 0x30
 8008006:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80081b0 <_svfiprintf_r+0x1ec>
 800800a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800800e:	f04f 0901 	mov.w	r9, #1
 8008012:	4623      	mov	r3, r4
 8008014:	469a      	mov	sl, r3
 8008016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800801a:	b10a      	cbz	r2, 8008020 <_svfiprintf_r+0x5c>
 800801c:	2a25      	cmp	r2, #37	; 0x25
 800801e:	d1f9      	bne.n	8008014 <_svfiprintf_r+0x50>
 8008020:	ebba 0b04 	subs.w	fp, sl, r4
 8008024:	d00b      	beq.n	800803e <_svfiprintf_r+0x7a>
 8008026:	465b      	mov	r3, fp
 8008028:	4622      	mov	r2, r4
 800802a:	4629      	mov	r1, r5
 800802c:	4638      	mov	r0, r7
 800802e:	f7ff ff6d 	bl	8007f0c <__ssputs_r>
 8008032:	3001      	adds	r0, #1
 8008034:	f000 80aa 	beq.w	800818c <_svfiprintf_r+0x1c8>
 8008038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800803a:	445a      	add	r2, fp
 800803c:	9209      	str	r2, [sp, #36]	; 0x24
 800803e:	f89a 3000 	ldrb.w	r3, [sl]
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 80a2 	beq.w	800818c <_svfiprintf_r+0x1c8>
 8008048:	2300      	movs	r3, #0
 800804a:	f04f 32ff 	mov.w	r2, #4294967295
 800804e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008052:	f10a 0a01 	add.w	sl, sl, #1
 8008056:	9304      	str	r3, [sp, #16]
 8008058:	9307      	str	r3, [sp, #28]
 800805a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800805e:	931a      	str	r3, [sp, #104]	; 0x68
 8008060:	4654      	mov	r4, sl
 8008062:	2205      	movs	r2, #5
 8008064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008068:	4851      	ldr	r0, [pc, #324]	; (80081b0 <_svfiprintf_r+0x1ec>)
 800806a:	f7f8 f8c1 	bl	80001f0 <memchr>
 800806e:	9a04      	ldr	r2, [sp, #16]
 8008070:	b9d8      	cbnz	r0, 80080aa <_svfiprintf_r+0xe6>
 8008072:	06d0      	lsls	r0, r2, #27
 8008074:	bf44      	itt	mi
 8008076:	2320      	movmi	r3, #32
 8008078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800807c:	0711      	lsls	r1, r2, #28
 800807e:	bf44      	itt	mi
 8008080:	232b      	movmi	r3, #43	; 0x2b
 8008082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008086:	f89a 3000 	ldrb.w	r3, [sl]
 800808a:	2b2a      	cmp	r3, #42	; 0x2a
 800808c:	d015      	beq.n	80080ba <_svfiprintf_r+0xf6>
 800808e:	9a07      	ldr	r2, [sp, #28]
 8008090:	4654      	mov	r4, sl
 8008092:	2000      	movs	r0, #0
 8008094:	f04f 0c0a 	mov.w	ip, #10
 8008098:	4621      	mov	r1, r4
 800809a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800809e:	3b30      	subs	r3, #48	; 0x30
 80080a0:	2b09      	cmp	r3, #9
 80080a2:	d94e      	bls.n	8008142 <_svfiprintf_r+0x17e>
 80080a4:	b1b0      	cbz	r0, 80080d4 <_svfiprintf_r+0x110>
 80080a6:	9207      	str	r2, [sp, #28]
 80080a8:	e014      	b.n	80080d4 <_svfiprintf_r+0x110>
 80080aa:	eba0 0308 	sub.w	r3, r0, r8
 80080ae:	fa09 f303 	lsl.w	r3, r9, r3
 80080b2:	4313      	orrs	r3, r2
 80080b4:	9304      	str	r3, [sp, #16]
 80080b6:	46a2      	mov	sl, r4
 80080b8:	e7d2      	b.n	8008060 <_svfiprintf_r+0x9c>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	1d19      	adds	r1, r3, #4
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	9103      	str	r1, [sp, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	bfbb      	ittet	lt
 80080c6:	425b      	neglt	r3, r3
 80080c8:	f042 0202 	orrlt.w	r2, r2, #2
 80080cc:	9307      	strge	r3, [sp, #28]
 80080ce:	9307      	strlt	r3, [sp, #28]
 80080d0:	bfb8      	it	lt
 80080d2:	9204      	strlt	r2, [sp, #16]
 80080d4:	7823      	ldrb	r3, [r4, #0]
 80080d6:	2b2e      	cmp	r3, #46	; 0x2e
 80080d8:	d10c      	bne.n	80080f4 <_svfiprintf_r+0x130>
 80080da:	7863      	ldrb	r3, [r4, #1]
 80080dc:	2b2a      	cmp	r3, #42	; 0x2a
 80080de:	d135      	bne.n	800814c <_svfiprintf_r+0x188>
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	1d1a      	adds	r2, r3, #4
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	9203      	str	r2, [sp, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	bfb8      	it	lt
 80080ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80080f0:	3402      	adds	r4, #2
 80080f2:	9305      	str	r3, [sp, #20]
 80080f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081c0 <_svfiprintf_r+0x1fc>
 80080f8:	7821      	ldrb	r1, [r4, #0]
 80080fa:	2203      	movs	r2, #3
 80080fc:	4650      	mov	r0, sl
 80080fe:	f7f8 f877 	bl	80001f0 <memchr>
 8008102:	b140      	cbz	r0, 8008116 <_svfiprintf_r+0x152>
 8008104:	2340      	movs	r3, #64	; 0x40
 8008106:	eba0 000a 	sub.w	r0, r0, sl
 800810a:	fa03 f000 	lsl.w	r0, r3, r0
 800810e:	9b04      	ldr	r3, [sp, #16]
 8008110:	4303      	orrs	r3, r0
 8008112:	3401      	adds	r4, #1
 8008114:	9304      	str	r3, [sp, #16]
 8008116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800811a:	4826      	ldr	r0, [pc, #152]	; (80081b4 <_svfiprintf_r+0x1f0>)
 800811c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008120:	2206      	movs	r2, #6
 8008122:	f7f8 f865 	bl	80001f0 <memchr>
 8008126:	2800      	cmp	r0, #0
 8008128:	d038      	beq.n	800819c <_svfiprintf_r+0x1d8>
 800812a:	4b23      	ldr	r3, [pc, #140]	; (80081b8 <_svfiprintf_r+0x1f4>)
 800812c:	bb1b      	cbnz	r3, 8008176 <_svfiprintf_r+0x1b2>
 800812e:	9b03      	ldr	r3, [sp, #12]
 8008130:	3307      	adds	r3, #7
 8008132:	f023 0307 	bic.w	r3, r3, #7
 8008136:	3308      	adds	r3, #8
 8008138:	9303      	str	r3, [sp, #12]
 800813a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813c:	4433      	add	r3, r6
 800813e:	9309      	str	r3, [sp, #36]	; 0x24
 8008140:	e767      	b.n	8008012 <_svfiprintf_r+0x4e>
 8008142:	fb0c 3202 	mla	r2, ip, r2, r3
 8008146:	460c      	mov	r4, r1
 8008148:	2001      	movs	r0, #1
 800814a:	e7a5      	b.n	8008098 <_svfiprintf_r+0xd4>
 800814c:	2300      	movs	r3, #0
 800814e:	3401      	adds	r4, #1
 8008150:	9305      	str	r3, [sp, #20]
 8008152:	4619      	mov	r1, r3
 8008154:	f04f 0c0a 	mov.w	ip, #10
 8008158:	4620      	mov	r0, r4
 800815a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800815e:	3a30      	subs	r2, #48	; 0x30
 8008160:	2a09      	cmp	r2, #9
 8008162:	d903      	bls.n	800816c <_svfiprintf_r+0x1a8>
 8008164:	2b00      	cmp	r3, #0
 8008166:	d0c5      	beq.n	80080f4 <_svfiprintf_r+0x130>
 8008168:	9105      	str	r1, [sp, #20]
 800816a:	e7c3      	b.n	80080f4 <_svfiprintf_r+0x130>
 800816c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008170:	4604      	mov	r4, r0
 8008172:	2301      	movs	r3, #1
 8008174:	e7f0      	b.n	8008158 <_svfiprintf_r+0x194>
 8008176:	ab03      	add	r3, sp, #12
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	462a      	mov	r2, r5
 800817c:	4b0f      	ldr	r3, [pc, #60]	; (80081bc <_svfiprintf_r+0x1f8>)
 800817e:	a904      	add	r1, sp, #16
 8008180:	4638      	mov	r0, r7
 8008182:	f7fc fadf 	bl	8004744 <_printf_float>
 8008186:	1c42      	adds	r2, r0, #1
 8008188:	4606      	mov	r6, r0
 800818a:	d1d6      	bne.n	800813a <_svfiprintf_r+0x176>
 800818c:	89ab      	ldrh	r3, [r5, #12]
 800818e:	065b      	lsls	r3, r3, #25
 8008190:	f53f af2c 	bmi.w	8007fec <_svfiprintf_r+0x28>
 8008194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008196:	b01d      	add	sp, #116	; 0x74
 8008198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819c:	ab03      	add	r3, sp, #12
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	462a      	mov	r2, r5
 80081a2:	4b06      	ldr	r3, [pc, #24]	; (80081bc <_svfiprintf_r+0x1f8>)
 80081a4:	a904      	add	r1, sp, #16
 80081a6:	4638      	mov	r0, r7
 80081a8:	f7fc fd70 	bl	8004c8c <_printf_i>
 80081ac:	e7eb      	b.n	8008186 <_svfiprintf_r+0x1c2>
 80081ae:	bf00      	nop
 80081b0:	080093e4 	.word	0x080093e4
 80081b4:	080093ee 	.word	0x080093ee
 80081b8:	08004745 	.word	0x08004745
 80081bc:	08007f0d 	.word	0x08007f0d
 80081c0:	080093ea 	.word	0x080093ea
 80081c4:	00000000 	.word	0x00000000

080081c8 <nan>:
 80081c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80081d0 <nan+0x8>
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	00000000 	.word	0x00000000
 80081d4:	7ff80000 	.word	0x7ff80000

080081d8 <strncmp>:
 80081d8:	b510      	push	{r4, lr}
 80081da:	b16a      	cbz	r2, 80081f8 <strncmp+0x20>
 80081dc:	3901      	subs	r1, #1
 80081de:	1884      	adds	r4, r0, r2
 80081e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d103      	bne.n	80081f4 <strncmp+0x1c>
 80081ec:	42a0      	cmp	r0, r4
 80081ee:	d001      	beq.n	80081f4 <strncmp+0x1c>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1f5      	bne.n	80081e0 <strncmp+0x8>
 80081f4:	1a98      	subs	r0, r3, r2
 80081f6:	bd10      	pop	{r4, pc}
 80081f8:	4610      	mov	r0, r2
 80081fa:	e7fc      	b.n	80081f6 <strncmp+0x1e>

080081fc <__ascii_wctomb>:
 80081fc:	b149      	cbz	r1, 8008212 <__ascii_wctomb+0x16>
 80081fe:	2aff      	cmp	r2, #255	; 0xff
 8008200:	bf85      	ittet	hi
 8008202:	238a      	movhi	r3, #138	; 0x8a
 8008204:	6003      	strhi	r3, [r0, #0]
 8008206:	700a      	strbls	r2, [r1, #0]
 8008208:	f04f 30ff 	movhi.w	r0, #4294967295
 800820c:	bf98      	it	ls
 800820e:	2001      	movls	r0, #1
 8008210:	4770      	bx	lr
 8008212:	4608      	mov	r0, r1
 8008214:	4770      	bx	lr
	...

08008218 <__assert_func>:
 8008218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800821a:	4614      	mov	r4, r2
 800821c:	461a      	mov	r2, r3
 800821e:	4b09      	ldr	r3, [pc, #36]	; (8008244 <__assert_func+0x2c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4605      	mov	r5, r0
 8008224:	68d8      	ldr	r0, [r3, #12]
 8008226:	b14c      	cbz	r4, 800823c <__assert_func+0x24>
 8008228:	4b07      	ldr	r3, [pc, #28]	; (8008248 <__assert_func+0x30>)
 800822a:	9100      	str	r1, [sp, #0]
 800822c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008230:	4906      	ldr	r1, [pc, #24]	; (800824c <__assert_func+0x34>)
 8008232:	462b      	mov	r3, r5
 8008234:	f000 f80e 	bl	8008254 <fiprintf>
 8008238:	f000 fa7a 	bl	8008730 <abort>
 800823c:	4b04      	ldr	r3, [pc, #16]	; (8008250 <__assert_func+0x38>)
 800823e:	461c      	mov	r4, r3
 8008240:	e7f3      	b.n	800822a <__assert_func+0x12>
 8008242:	bf00      	nop
 8008244:	2000000c 	.word	0x2000000c
 8008248:	080093f5 	.word	0x080093f5
 800824c:	08009402 	.word	0x08009402
 8008250:	08009430 	.word	0x08009430

08008254 <fiprintf>:
 8008254:	b40e      	push	{r1, r2, r3}
 8008256:	b503      	push	{r0, r1, lr}
 8008258:	4601      	mov	r1, r0
 800825a:	ab03      	add	r3, sp, #12
 800825c:	4805      	ldr	r0, [pc, #20]	; (8008274 <fiprintf+0x20>)
 800825e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008262:	6800      	ldr	r0, [r0, #0]
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	f000 f873 	bl	8008350 <_vfiprintf_r>
 800826a:	b002      	add	sp, #8
 800826c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008270:	b003      	add	sp, #12
 8008272:	4770      	bx	lr
 8008274:	2000000c 	.word	0x2000000c

08008278 <__retarget_lock_init_recursive>:
 8008278:	4770      	bx	lr

0800827a <__retarget_lock_acquire_recursive>:
 800827a:	4770      	bx	lr

0800827c <__retarget_lock_release_recursive>:
 800827c:	4770      	bx	lr

0800827e <memmove>:
 800827e:	4288      	cmp	r0, r1
 8008280:	b510      	push	{r4, lr}
 8008282:	eb01 0402 	add.w	r4, r1, r2
 8008286:	d902      	bls.n	800828e <memmove+0x10>
 8008288:	4284      	cmp	r4, r0
 800828a:	4623      	mov	r3, r4
 800828c:	d807      	bhi.n	800829e <memmove+0x20>
 800828e:	1e43      	subs	r3, r0, #1
 8008290:	42a1      	cmp	r1, r4
 8008292:	d008      	beq.n	80082a6 <memmove+0x28>
 8008294:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008298:	f803 2f01 	strb.w	r2, [r3, #1]!
 800829c:	e7f8      	b.n	8008290 <memmove+0x12>
 800829e:	4402      	add	r2, r0
 80082a0:	4601      	mov	r1, r0
 80082a2:	428a      	cmp	r2, r1
 80082a4:	d100      	bne.n	80082a8 <memmove+0x2a>
 80082a6:	bd10      	pop	{r4, pc}
 80082a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082b0:	e7f7      	b.n	80082a2 <memmove+0x24>

080082b2 <_realloc_r>:
 80082b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b4:	4607      	mov	r7, r0
 80082b6:	4614      	mov	r4, r2
 80082b8:	460e      	mov	r6, r1
 80082ba:	b921      	cbnz	r1, 80082c6 <_realloc_r+0x14>
 80082bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082c0:	4611      	mov	r1, r2
 80082c2:	f7fc b945 	b.w	8004550 <_malloc_r>
 80082c6:	b922      	cbnz	r2, 80082d2 <_realloc_r+0x20>
 80082c8:	f7ff fdd0 	bl	8007e6c <_free_r>
 80082cc:	4625      	mov	r5, r4
 80082ce:	4628      	mov	r0, r5
 80082d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082d2:	f000 fc51 	bl	8008b78 <_malloc_usable_size_r>
 80082d6:	42a0      	cmp	r0, r4
 80082d8:	d20f      	bcs.n	80082fa <_realloc_r+0x48>
 80082da:	4621      	mov	r1, r4
 80082dc:	4638      	mov	r0, r7
 80082de:	f7fc f937 	bl	8004550 <_malloc_r>
 80082e2:	4605      	mov	r5, r0
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d0f2      	beq.n	80082ce <_realloc_r+0x1c>
 80082e8:	4631      	mov	r1, r6
 80082ea:	4622      	mov	r2, r4
 80082ec:	f7fc f90a 	bl	8004504 <memcpy>
 80082f0:	4631      	mov	r1, r6
 80082f2:	4638      	mov	r0, r7
 80082f4:	f7ff fdba 	bl	8007e6c <_free_r>
 80082f8:	e7e9      	b.n	80082ce <_realloc_r+0x1c>
 80082fa:	4635      	mov	r5, r6
 80082fc:	e7e7      	b.n	80082ce <_realloc_r+0x1c>

080082fe <__sfputc_r>:
 80082fe:	6893      	ldr	r3, [r2, #8]
 8008300:	3b01      	subs	r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	b410      	push	{r4}
 8008306:	6093      	str	r3, [r2, #8]
 8008308:	da08      	bge.n	800831c <__sfputc_r+0x1e>
 800830a:	6994      	ldr	r4, [r2, #24]
 800830c:	42a3      	cmp	r3, r4
 800830e:	db01      	blt.n	8008314 <__sfputc_r+0x16>
 8008310:	290a      	cmp	r1, #10
 8008312:	d103      	bne.n	800831c <__sfputc_r+0x1e>
 8008314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008318:	f000 b94a 	b.w	80085b0 <__swbuf_r>
 800831c:	6813      	ldr	r3, [r2, #0]
 800831e:	1c58      	adds	r0, r3, #1
 8008320:	6010      	str	r0, [r2, #0]
 8008322:	7019      	strb	r1, [r3, #0]
 8008324:	4608      	mov	r0, r1
 8008326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800832a:	4770      	bx	lr

0800832c <__sfputs_r>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	4606      	mov	r6, r0
 8008330:	460f      	mov	r7, r1
 8008332:	4614      	mov	r4, r2
 8008334:	18d5      	adds	r5, r2, r3
 8008336:	42ac      	cmp	r4, r5
 8008338:	d101      	bne.n	800833e <__sfputs_r+0x12>
 800833a:	2000      	movs	r0, #0
 800833c:	e007      	b.n	800834e <__sfputs_r+0x22>
 800833e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008342:	463a      	mov	r2, r7
 8008344:	4630      	mov	r0, r6
 8008346:	f7ff ffda 	bl	80082fe <__sfputc_r>
 800834a:	1c43      	adds	r3, r0, #1
 800834c:	d1f3      	bne.n	8008336 <__sfputs_r+0xa>
 800834e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008350 <_vfiprintf_r>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	460d      	mov	r5, r1
 8008356:	b09d      	sub	sp, #116	; 0x74
 8008358:	4614      	mov	r4, r2
 800835a:	4698      	mov	r8, r3
 800835c:	4606      	mov	r6, r0
 800835e:	b118      	cbz	r0, 8008368 <_vfiprintf_r+0x18>
 8008360:	6983      	ldr	r3, [r0, #24]
 8008362:	b90b      	cbnz	r3, 8008368 <_vfiprintf_r+0x18>
 8008364:	f000 fb06 	bl	8008974 <__sinit>
 8008368:	4b89      	ldr	r3, [pc, #548]	; (8008590 <_vfiprintf_r+0x240>)
 800836a:	429d      	cmp	r5, r3
 800836c:	d11b      	bne.n	80083a6 <_vfiprintf_r+0x56>
 800836e:	6875      	ldr	r5, [r6, #4]
 8008370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008372:	07d9      	lsls	r1, r3, #31
 8008374:	d405      	bmi.n	8008382 <_vfiprintf_r+0x32>
 8008376:	89ab      	ldrh	r3, [r5, #12]
 8008378:	059a      	lsls	r2, r3, #22
 800837a:	d402      	bmi.n	8008382 <_vfiprintf_r+0x32>
 800837c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800837e:	f7ff ff7c 	bl	800827a <__retarget_lock_acquire_recursive>
 8008382:	89ab      	ldrh	r3, [r5, #12]
 8008384:	071b      	lsls	r3, r3, #28
 8008386:	d501      	bpl.n	800838c <_vfiprintf_r+0x3c>
 8008388:	692b      	ldr	r3, [r5, #16]
 800838a:	b9eb      	cbnz	r3, 80083c8 <_vfiprintf_r+0x78>
 800838c:	4629      	mov	r1, r5
 800838e:	4630      	mov	r0, r6
 8008390:	f000 f960 	bl	8008654 <__swsetup_r>
 8008394:	b1c0      	cbz	r0, 80083c8 <_vfiprintf_r+0x78>
 8008396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008398:	07dc      	lsls	r4, r3, #31
 800839a:	d50e      	bpl.n	80083ba <_vfiprintf_r+0x6a>
 800839c:	f04f 30ff 	mov.w	r0, #4294967295
 80083a0:	b01d      	add	sp, #116	; 0x74
 80083a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a6:	4b7b      	ldr	r3, [pc, #492]	; (8008594 <_vfiprintf_r+0x244>)
 80083a8:	429d      	cmp	r5, r3
 80083aa:	d101      	bne.n	80083b0 <_vfiprintf_r+0x60>
 80083ac:	68b5      	ldr	r5, [r6, #8]
 80083ae:	e7df      	b.n	8008370 <_vfiprintf_r+0x20>
 80083b0:	4b79      	ldr	r3, [pc, #484]	; (8008598 <_vfiprintf_r+0x248>)
 80083b2:	429d      	cmp	r5, r3
 80083b4:	bf08      	it	eq
 80083b6:	68f5      	ldreq	r5, [r6, #12]
 80083b8:	e7da      	b.n	8008370 <_vfiprintf_r+0x20>
 80083ba:	89ab      	ldrh	r3, [r5, #12]
 80083bc:	0598      	lsls	r0, r3, #22
 80083be:	d4ed      	bmi.n	800839c <_vfiprintf_r+0x4c>
 80083c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083c2:	f7ff ff5b 	bl	800827c <__retarget_lock_release_recursive>
 80083c6:	e7e9      	b.n	800839c <_vfiprintf_r+0x4c>
 80083c8:	2300      	movs	r3, #0
 80083ca:	9309      	str	r3, [sp, #36]	; 0x24
 80083cc:	2320      	movs	r3, #32
 80083ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80083d6:	2330      	movs	r3, #48	; 0x30
 80083d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800859c <_vfiprintf_r+0x24c>
 80083dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083e0:	f04f 0901 	mov.w	r9, #1
 80083e4:	4623      	mov	r3, r4
 80083e6:	469a      	mov	sl, r3
 80083e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083ec:	b10a      	cbz	r2, 80083f2 <_vfiprintf_r+0xa2>
 80083ee:	2a25      	cmp	r2, #37	; 0x25
 80083f0:	d1f9      	bne.n	80083e6 <_vfiprintf_r+0x96>
 80083f2:	ebba 0b04 	subs.w	fp, sl, r4
 80083f6:	d00b      	beq.n	8008410 <_vfiprintf_r+0xc0>
 80083f8:	465b      	mov	r3, fp
 80083fa:	4622      	mov	r2, r4
 80083fc:	4629      	mov	r1, r5
 80083fe:	4630      	mov	r0, r6
 8008400:	f7ff ff94 	bl	800832c <__sfputs_r>
 8008404:	3001      	adds	r0, #1
 8008406:	f000 80aa 	beq.w	800855e <_vfiprintf_r+0x20e>
 800840a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800840c:	445a      	add	r2, fp
 800840e:	9209      	str	r2, [sp, #36]	; 0x24
 8008410:	f89a 3000 	ldrb.w	r3, [sl]
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 80a2 	beq.w	800855e <_vfiprintf_r+0x20e>
 800841a:	2300      	movs	r3, #0
 800841c:	f04f 32ff 	mov.w	r2, #4294967295
 8008420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008424:	f10a 0a01 	add.w	sl, sl, #1
 8008428:	9304      	str	r3, [sp, #16]
 800842a:	9307      	str	r3, [sp, #28]
 800842c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008430:	931a      	str	r3, [sp, #104]	; 0x68
 8008432:	4654      	mov	r4, sl
 8008434:	2205      	movs	r2, #5
 8008436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800843a:	4858      	ldr	r0, [pc, #352]	; (800859c <_vfiprintf_r+0x24c>)
 800843c:	f7f7 fed8 	bl	80001f0 <memchr>
 8008440:	9a04      	ldr	r2, [sp, #16]
 8008442:	b9d8      	cbnz	r0, 800847c <_vfiprintf_r+0x12c>
 8008444:	06d1      	lsls	r1, r2, #27
 8008446:	bf44      	itt	mi
 8008448:	2320      	movmi	r3, #32
 800844a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800844e:	0713      	lsls	r3, r2, #28
 8008450:	bf44      	itt	mi
 8008452:	232b      	movmi	r3, #43	; 0x2b
 8008454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008458:	f89a 3000 	ldrb.w	r3, [sl]
 800845c:	2b2a      	cmp	r3, #42	; 0x2a
 800845e:	d015      	beq.n	800848c <_vfiprintf_r+0x13c>
 8008460:	9a07      	ldr	r2, [sp, #28]
 8008462:	4654      	mov	r4, sl
 8008464:	2000      	movs	r0, #0
 8008466:	f04f 0c0a 	mov.w	ip, #10
 800846a:	4621      	mov	r1, r4
 800846c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008470:	3b30      	subs	r3, #48	; 0x30
 8008472:	2b09      	cmp	r3, #9
 8008474:	d94e      	bls.n	8008514 <_vfiprintf_r+0x1c4>
 8008476:	b1b0      	cbz	r0, 80084a6 <_vfiprintf_r+0x156>
 8008478:	9207      	str	r2, [sp, #28]
 800847a:	e014      	b.n	80084a6 <_vfiprintf_r+0x156>
 800847c:	eba0 0308 	sub.w	r3, r0, r8
 8008480:	fa09 f303 	lsl.w	r3, r9, r3
 8008484:	4313      	orrs	r3, r2
 8008486:	9304      	str	r3, [sp, #16]
 8008488:	46a2      	mov	sl, r4
 800848a:	e7d2      	b.n	8008432 <_vfiprintf_r+0xe2>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	1d19      	adds	r1, r3, #4
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	9103      	str	r1, [sp, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	bfbb      	ittet	lt
 8008498:	425b      	neglt	r3, r3
 800849a:	f042 0202 	orrlt.w	r2, r2, #2
 800849e:	9307      	strge	r3, [sp, #28]
 80084a0:	9307      	strlt	r3, [sp, #28]
 80084a2:	bfb8      	it	lt
 80084a4:	9204      	strlt	r2, [sp, #16]
 80084a6:	7823      	ldrb	r3, [r4, #0]
 80084a8:	2b2e      	cmp	r3, #46	; 0x2e
 80084aa:	d10c      	bne.n	80084c6 <_vfiprintf_r+0x176>
 80084ac:	7863      	ldrb	r3, [r4, #1]
 80084ae:	2b2a      	cmp	r3, #42	; 0x2a
 80084b0:	d135      	bne.n	800851e <_vfiprintf_r+0x1ce>
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	1d1a      	adds	r2, r3, #4
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	9203      	str	r2, [sp, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	bfb8      	it	lt
 80084be:	f04f 33ff 	movlt.w	r3, #4294967295
 80084c2:	3402      	adds	r4, #2
 80084c4:	9305      	str	r3, [sp, #20]
 80084c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80085ac <_vfiprintf_r+0x25c>
 80084ca:	7821      	ldrb	r1, [r4, #0]
 80084cc:	2203      	movs	r2, #3
 80084ce:	4650      	mov	r0, sl
 80084d0:	f7f7 fe8e 	bl	80001f0 <memchr>
 80084d4:	b140      	cbz	r0, 80084e8 <_vfiprintf_r+0x198>
 80084d6:	2340      	movs	r3, #64	; 0x40
 80084d8:	eba0 000a 	sub.w	r0, r0, sl
 80084dc:	fa03 f000 	lsl.w	r0, r3, r0
 80084e0:	9b04      	ldr	r3, [sp, #16]
 80084e2:	4303      	orrs	r3, r0
 80084e4:	3401      	adds	r4, #1
 80084e6:	9304      	str	r3, [sp, #16]
 80084e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ec:	482c      	ldr	r0, [pc, #176]	; (80085a0 <_vfiprintf_r+0x250>)
 80084ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084f2:	2206      	movs	r2, #6
 80084f4:	f7f7 fe7c 	bl	80001f0 <memchr>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d03f      	beq.n	800857c <_vfiprintf_r+0x22c>
 80084fc:	4b29      	ldr	r3, [pc, #164]	; (80085a4 <_vfiprintf_r+0x254>)
 80084fe:	bb1b      	cbnz	r3, 8008548 <_vfiprintf_r+0x1f8>
 8008500:	9b03      	ldr	r3, [sp, #12]
 8008502:	3307      	adds	r3, #7
 8008504:	f023 0307 	bic.w	r3, r3, #7
 8008508:	3308      	adds	r3, #8
 800850a:	9303      	str	r3, [sp, #12]
 800850c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850e:	443b      	add	r3, r7
 8008510:	9309      	str	r3, [sp, #36]	; 0x24
 8008512:	e767      	b.n	80083e4 <_vfiprintf_r+0x94>
 8008514:	fb0c 3202 	mla	r2, ip, r2, r3
 8008518:	460c      	mov	r4, r1
 800851a:	2001      	movs	r0, #1
 800851c:	e7a5      	b.n	800846a <_vfiprintf_r+0x11a>
 800851e:	2300      	movs	r3, #0
 8008520:	3401      	adds	r4, #1
 8008522:	9305      	str	r3, [sp, #20]
 8008524:	4619      	mov	r1, r3
 8008526:	f04f 0c0a 	mov.w	ip, #10
 800852a:	4620      	mov	r0, r4
 800852c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008530:	3a30      	subs	r2, #48	; 0x30
 8008532:	2a09      	cmp	r2, #9
 8008534:	d903      	bls.n	800853e <_vfiprintf_r+0x1ee>
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0c5      	beq.n	80084c6 <_vfiprintf_r+0x176>
 800853a:	9105      	str	r1, [sp, #20]
 800853c:	e7c3      	b.n	80084c6 <_vfiprintf_r+0x176>
 800853e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008542:	4604      	mov	r4, r0
 8008544:	2301      	movs	r3, #1
 8008546:	e7f0      	b.n	800852a <_vfiprintf_r+0x1da>
 8008548:	ab03      	add	r3, sp, #12
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	462a      	mov	r2, r5
 800854e:	4b16      	ldr	r3, [pc, #88]	; (80085a8 <_vfiprintf_r+0x258>)
 8008550:	a904      	add	r1, sp, #16
 8008552:	4630      	mov	r0, r6
 8008554:	f7fc f8f6 	bl	8004744 <_printf_float>
 8008558:	4607      	mov	r7, r0
 800855a:	1c78      	adds	r0, r7, #1
 800855c:	d1d6      	bne.n	800850c <_vfiprintf_r+0x1bc>
 800855e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008560:	07d9      	lsls	r1, r3, #31
 8008562:	d405      	bmi.n	8008570 <_vfiprintf_r+0x220>
 8008564:	89ab      	ldrh	r3, [r5, #12]
 8008566:	059a      	lsls	r2, r3, #22
 8008568:	d402      	bmi.n	8008570 <_vfiprintf_r+0x220>
 800856a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800856c:	f7ff fe86 	bl	800827c <__retarget_lock_release_recursive>
 8008570:	89ab      	ldrh	r3, [r5, #12]
 8008572:	065b      	lsls	r3, r3, #25
 8008574:	f53f af12 	bmi.w	800839c <_vfiprintf_r+0x4c>
 8008578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800857a:	e711      	b.n	80083a0 <_vfiprintf_r+0x50>
 800857c:	ab03      	add	r3, sp, #12
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	462a      	mov	r2, r5
 8008582:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <_vfiprintf_r+0x258>)
 8008584:	a904      	add	r1, sp, #16
 8008586:	4630      	mov	r0, r6
 8008588:	f7fc fb80 	bl	8004c8c <_printf_i>
 800858c:	e7e4      	b.n	8008558 <_vfiprintf_r+0x208>
 800858e:	bf00      	nop
 8008590:	08009454 	.word	0x08009454
 8008594:	08009474 	.word	0x08009474
 8008598:	08009434 	.word	0x08009434
 800859c:	080093e4 	.word	0x080093e4
 80085a0:	080093ee 	.word	0x080093ee
 80085a4:	08004745 	.word	0x08004745
 80085a8:	0800832d 	.word	0x0800832d
 80085ac:	080093ea 	.word	0x080093ea

080085b0 <__swbuf_r>:
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b2:	460e      	mov	r6, r1
 80085b4:	4614      	mov	r4, r2
 80085b6:	4605      	mov	r5, r0
 80085b8:	b118      	cbz	r0, 80085c2 <__swbuf_r+0x12>
 80085ba:	6983      	ldr	r3, [r0, #24]
 80085bc:	b90b      	cbnz	r3, 80085c2 <__swbuf_r+0x12>
 80085be:	f000 f9d9 	bl	8008974 <__sinit>
 80085c2:	4b21      	ldr	r3, [pc, #132]	; (8008648 <__swbuf_r+0x98>)
 80085c4:	429c      	cmp	r4, r3
 80085c6:	d12b      	bne.n	8008620 <__swbuf_r+0x70>
 80085c8:	686c      	ldr	r4, [r5, #4]
 80085ca:	69a3      	ldr	r3, [r4, #24]
 80085cc:	60a3      	str	r3, [r4, #8]
 80085ce:	89a3      	ldrh	r3, [r4, #12]
 80085d0:	071a      	lsls	r2, r3, #28
 80085d2:	d52f      	bpl.n	8008634 <__swbuf_r+0x84>
 80085d4:	6923      	ldr	r3, [r4, #16]
 80085d6:	b36b      	cbz	r3, 8008634 <__swbuf_r+0x84>
 80085d8:	6923      	ldr	r3, [r4, #16]
 80085da:	6820      	ldr	r0, [r4, #0]
 80085dc:	1ac0      	subs	r0, r0, r3
 80085de:	6963      	ldr	r3, [r4, #20]
 80085e0:	b2f6      	uxtb	r6, r6
 80085e2:	4283      	cmp	r3, r0
 80085e4:	4637      	mov	r7, r6
 80085e6:	dc04      	bgt.n	80085f2 <__swbuf_r+0x42>
 80085e8:	4621      	mov	r1, r4
 80085ea:	4628      	mov	r0, r5
 80085ec:	f000 f92e 	bl	800884c <_fflush_r>
 80085f0:	bb30      	cbnz	r0, 8008640 <__swbuf_r+0x90>
 80085f2:	68a3      	ldr	r3, [r4, #8]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	60a3      	str	r3, [r4, #8]
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	6022      	str	r2, [r4, #0]
 80085fe:	701e      	strb	r6, [r3, #0]
 8008600:	6963      	ldr	r3, [r4, #20]
 8008602:	3001      	adds	r0, #1
 8008604:	4283      	cmp	r3, r0
 8008606:	d004      	beq.n	8008612 <__swbuf_r+0x62>
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	07db      	lsls	r3, r3, #31
 800860c:	d506      	bpl.n	800861c <__swbuf_r+0x6c>
 800860e:	2e0a      	cmp	r6, #10
 8008610:	d104      	bne.n	800861c <__swbuf_r+0x6c>
 8008612:	4621      	mov	r1, r4
 8008614:	4628      	mov	r0, r5
 8008616:	f000 f919 	bl	800884c <_fflush_r>
 800861a:	b988      	cbnz	r0, 8008640 <__swbuf_r+0x90>
 800861c:	4638      	mov	r0, r7
 800861e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008620:	4b0a      	ldr	r3, [pc, #40]	; (800864c <__swbuf_r+0x9c>)
 8008622:	429c      	cmp	r4, r3
 8008624:	d101      	bne.n	800862a <__swbuf_r+0x7a>
 8008626:	68ac      	ldr	r4, [r5, #8]
 8008628:	e7cf      	b.n	80085ca <__swbuf_r+0x1a>
 800862a:	4b09      	ldr	r3, [pc, #36]	; (8008650 <__swbuf_r+0xa0>)
 800862c:	429c      	cmp	r4, r3
 800862e:	bf08      	it	eq
 8008630:	68ec      	ldreq	r4, [r5, #12]
 8008632:	e7ca      	b.n	80085ca <__swbuf_r+0x1a>
 8008634:	4621      	mov	r1, r4
 8008636:	4628      	mov	r0, r5
 8008638:	f000 f80c 	bl	8008654 <__swsetup_r>
 800863c:	2800      	cmp	r0, #0
 800863e:	d0cb      	beq.n	80085d8 <__swbuf_r+0x28>
 8008640:	f04f 37ff 	mov.w	r7, #4294967295
 8008644:	e7ea      	b.n	800861c <__swbuf_r+0x6c>
 8008646:	bf00      	nop
 8008648:	08009454 	.word	0x08009454
 800864c:	08009474 	.word	0x08009474
 8008650:	08009434 	.word	0x08009434

08008654 <__swsetup_r>:
 8008654:	4b32      	ldr	r3, [pc, #200]	; (8008720 <__swsetup_r+0xcc>)
 8008656:	b570      	push	{r4, r5, r6, lr}
 8008658:	681d      	ldr	r5, [r3, #0]
 800865a:	4606      	mov	r6, r0
 800865c:	460c      	mov	r4, r1
 800865e:	b125      	cbz	r5, 800866a <__swsetup_r+0x16>
 8008660:	69ab      	ldr	r3, [r5, #24]
 8008662:	b913      	cbnz	r3, 800866a <__swsetup_r+0x16>
 8008664:	4628      	mov	r0, r5
 8008666:	f000 f985 	bl	8008974 <__sinit>
 800866a:	4b2e      	ldr	r3, [pc, #184]	; (8008724 <__swsetup_r+0xd0>)
 800866c:	429c      	cmp	r4, r3
 800866e:	d10f      	bne.n	8008690 <__swsetup_r+0x3c>
 8008670:	686c      	ldr	r4, [r5, #4]
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008678:	0719      	lsls	r1, r3, #28
 800867a:	d42c      	bmi.n	80086d6 <__swsetup_r+0x82>
 800867c:	06dd      	lsls	r5, r3, #27
 800867e:	d411      	bmi.n	80086a4 <__swsetup_r+0x50>
 8008680:	2309      	movs	r3, #9
 8008682:	6033      	str	r3, [r6, #0]
 8008684:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008688:	81a3      	strh	r3, [r4, #12]
 800868a:	f04f 30ff 	mov.w	r0, #4294967295
 800868e:	e03e      	b.n	800870e <__swsetup_r+0xba>
 8008690:	4b25      	ldr	r3, [pc, #148]	; (8008728 <__swsetup_r+0xd4>)
 8008692:	429c      	cmp	r4, r3
 8008694:	d101      	bne.n	800869a <__swsetup_r+0x46>
 8008696:	68ac      	ldr	r4, [r5, #8]
 8008698:	e7eb      	b.n	8008672 <__swsetup_r+0x1e>
 800869a:	4b24      	ldr	r3, [pc, #144]	; (800872c <__swsetup_r+0xd8>)
 800869c:	429c      	cmp	r4, r3
 800869e:	bf08      	it	eq
 80086a0:	68ec      	ldreq	r4, [r5, #12]
 80086a2:	e7e6      	b.n	8008672 <__swsetup_r+0x1e>
 80086a4:	0758      	lsls	r0, r3, #29
 80086a6:	d512      	bpl.n	80086ce <__swsetup_r+0x7a>
 80086a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086aa:	b141      	cbz	r1, 80086be <__swsetup_r+0x6a>
 80086ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086b0:	4299      	cmp	r1, r3
 80086b2:	d002      	beq.n	80086ba <__swsetup_r+0x66>
 80086b4:	4630      	mov	r0, r6
 80086b6:	f7ff fbd9 	bl	8007e6c <_free_r>
 80086ba:	2300      	movs	r3, #0
 80086bc:	6363      	str	r3, [r4, #52]	; 0x34
 80086be:	89a3      	ldrh	r3, [r4, #12]
 80086c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086c4:	81a3      	strh	r3, [r4, #12]
 80086c6:	2300      	movs	r3, #0
 80086c8:	6063      	str	r3, [r4, #4]
 80086ca:	6923      	ldr	r3, [r4, #16]
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	f043 0308 	orr.w	r3, r3, #8
 80086d4:	81a3      	strh	r3, [r4, #12]
 80086d6:	6923      	ldr	r3, [r4, #16]
 80086d8:	b94b      	cbnz	r3, 80086ee <__swsetup_r+0x9a>
 80086da:	89a3      	ldrh	r3, [r4, #12]
 80086dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086e4:	d003      	beq.n	80086ee <__swsetup_r+0x9a>
 80086e6:	4621      	mov	r1, r4
 80086e8:	4630      	mov	r0, r6
 80086ea:	f000 fa05 	bl	8008af8 <__smakebuf_r>
 80086ee:	89a0      	ldrh	r0, [r4, #12]
 80086f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086f4:	f010 0301 	ands.w	r3, r0, #1
 80086f8:	d00a      	beq.n	8008710 <__swsetup_r+0xbc>
 80086fa:	2300      	movs	r3, #0
 80086fc:	60a3      	str	r3, [r4, #8]
 80086fe:	6963      	ldr	r3, [r4, #20]
 8008700:	425b      	negs	r3, r3
 8008702:	61a3      	str	r3, [r4, #24]
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	b943      	cbnz	r3, 800871a <__swsetup_r+0xc6>
 8008708:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800870c:	d1ba      	bne.n	8008684 <__swsetup_r+0x30>
 800870e:	bd70      	pop	{r4, r5, r6, pc}
 8008710:	0781      	lsls	r1, r0, #30
 8008712:	bf58      	it	pl
 8008714:	6963      	ldrpl	r3, [r4, #20]
 8008716:	60a3      	str	r3, [r4, #8]
 8008718:	e7f4      	b.n	8008704 <__swsetup_r+0xb0>
 800871a:	2000      	movs	r0, #0
 800871c:	e7f7      	b.n	800870e <__swsetup_r+0xba>
 800871e:	bf00      	nop
 8008720:	2000000c 	.word	0x2000000c
 8008724:	08009454 	.word	0x08009454
 8008728:	08009474 	.word	0x08009474
 800872c:	08009434 	.word	0x08009434

08008730 <abort>:
 8008730:	b508      	push	{r3, lr}
 8008732:	2006      	movs	r0, #6
 8008734:	f000 fa50 	bl	8008bd8 <raise>
 8008738:	2001      	movs	r0, #1
 800873a:	f7f9 faf1 	bl	8001d20 <_exit>
	...

08008740 <__sflush_r>:
 8008740:	898a      	ldrh	r2, [r1, #12]
 8008742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008746:	4605      	mov	r5, r0
 8008748:	0710      	lsls	r0, r2, #28
 800874a:	460c      	mov	r4, r1
 800874c:	d458      	bmi.n	8008800 <__sflush_r+0xc0>
 800874e:	684b      	ldr	r3, [r1, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	dc05      	bgt.n	8008760 <__sflush_r+0x20>
 8008754:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008756:	2b00      	cmp	r3, #0
 8008758:	dc02      	bgt.n	8008760 <__sflush_r+0x20>
 800875a:	2000      	movs	r0, #0
 800875c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008762:	2e00      	cmp	r6, #0
 8008764:	d0f9      	beq.n	800875a <__sflush_r+0x1a>
 8008766:	2300      	movs	r3, #0
 8008768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800876c:	682f      	ldr	r7, [r5, #0]
 800876e:	602b      	str	r3, [r5, #0]
 8008770:	d032      	beq.n	80087d8 <__sflush_r+0x98>
 8008772:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	075a      	lsls	r2, r3, #29
 8008778:	d505      	bpl.n	8008786 <__sflush_r+0x46>
 800877a:	6863      	ldr	r3, [r4, #4]
 800877c:	1ac0      	subs	r0, r0, r3
 800877e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008780:	b10b      	cbz	r3, 8008786 <__sflush_r+0x46>
 8008782:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008784:	1ac0      	subs	r0, r0, r3
 8008786:	2300      	movs	r3, #0
 8008788:	4602      	mov	r2, r0
 800878a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800878c:	6a21      	ldr	r1, [r4, #32]
 800878e:	4628      	mov	r0, r5
 8008790:	47b0      	blx	r6
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	d106      	bne.n	80087a6 <__sflush_r+0x66>
 8008798:	6829      	ldr	r1, [r5, #0]
 800879a:	291d      	cmp	r1, #29
 800879c:	d82c      	bhi.n	80087f8 <__sflush_r+0xb8>
 800879e:	4a2a      	ldr	r2, [pc, #168]	; (8008848 <__sflush_r+0x108>)
 80087a0:	40ca      	lsrs	r2, r1
 80087a2:	07d6      	lsls	r6, r2, #31
 80087a4:	d528      	bpl.n	80087f8 <__sflush_r+0xb8>
 80087a6:	2200      	movs	r2, #0
 80087a8:	6062      	str	r2, [r4, #4]
 80087aa:	04d9      	lsls	r1, r3, #19
 80087ac:	6922      	ldr	r2, [r4, #16]
 80087ae:	6022      	str	r2, [r4, #0]
 80087b0:	d504      	bpl.n	80087bc <__sflush_r+0x7c>
 80087b2:	1c42      	adds	r2, r0, #1
 80087b4:	d101      	bne.n	80087ba <__sflush_r+0x7a>
 80087b6:	682b      	ldr	r3, [r5, #0]
 80087b8:	b903      	cbnz	r3, 80087bc <__sflush_r+0x7c>
 80087ba:	6560      	str	r0, [r4, #84]	; 0x54
 80087bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087be:	602f      	str	r7, [r5, #0]
 80087c0:	2900      	cmp	r1, #0
 80087c2:	d0ca      	beq.n	800875a <__sflush_r+0x1a>
 80087c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087c8:	4299      	cmp	r1, r3
 80087ca:	d002      	beq.n	80087d2 <__sflush_r+0x92>
 80087cc:	4628      	mov	r0, r5
 80087ce:	f7ff fb4d 	bl	8007e6c <_free_r>
 80087d2:	2000      	movs	r0, #0
 80087d4:	6360      	str	r0, [r4, #52]	; 0x34
 80087d6:	e7c1      	b.n	800875c <__sflush_r+0x1c>
 80087d8:	6a21      	ldr	r1, [r4, #32]
 80087da:	2301      	movs	r3, #1
 80087dc:	4628      	mov	r0, r5
 80087de:	47b0      	blx	r6
 80087e0:	1c41      	adds	r1, r0, #1
 80087e2:	d1c7      	bne.n	8008774 <__sflush_r+0x34>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0c4      	beq.n	8008774 <__sflush_r+0x34>
 80087ea:	2b1d      	cmp	r3, #29
 80087ec:	d001      	beq.n	80087f2 <__sflush_r+0xb2>
 80087ee:	2b16      	cmp	r3, #22
 80087f0:	d101      	bne.n	80087f6 <__sflush_r+0xb6>
 80087f2:	602f      	str	r7, [r5, #0]
 80087f4:	e7b1      	b.n	800875a <__sflush_r+0x1a>
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087fc:	81a3      	strh	r3, [r4, #12]
 80087fe:	e7ad      	b.n	800875c <__sflush_r+0x1c>
 8008800:	690f      	ldr	r7, [r1, #16]
 8008802:	2f00      	cmp	r7, #0
 8008804:	d0a9      	beq.n	800875a <__sflush_r+0x1a>
 8008806:	0793      	lsls	r3, r2, #30
 8008808:	680e      	ldr	r6, [r1, #0]
 800880a:	bf08      	it	eq
 800880c:	694b      	ldreq	r3, [r1, #20]
 800880e:	600f      	str	r7, [r1, #0]
 8008810:	bf18      	it	ne
 8008812:	2300      	movne	r3, #0
 8008814:	eba6 0807 	sub.w	r8, r6, r7
 8008818:	608b      	str	r3, [r1, #8]
 800881a:	f1b8 0f00 	cmp.w	r8, #0
 800881e:	dd9c      	ble.n	800875a <__sflush_r+0x1a>
 8008820:	6a21      	ldr	r1, [r4, #32]
 8008822:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008824:	4643      	mov	r3, r8
 8008826:	463a      	mov	r2, r7
 8008828:	4628      	mov	r0, r5
 800882a:	47b0      	blx	r6
 800882c:	2800      	cmp	r0, #0
 800882e:	dc06      	bgt.n	800883e <__sflush_r+0xfe>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008836:	81a3      	strh	r3, [r4, #12]
 8008838:	f04f 30ff 	mov.w	r0, #4294967295
 800883c:	e78e      	b.n	800875c <__sflush_r+0x1c>
 800883e:	4407      	add	r7, r0
 8008840:	eba8 0800 	sub.w	r8, r8, r0
 8008844:	e7e9      	b.n	800881a <__sflush_r+0xda>
 8008846:	bf00      	nop
 8008848:	20400001 	.word	0x20400001

0800884c <_fflush_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	690b      	ldr	r3, [r1, #16]
 8008850:	4605      	mov	r5, r0
 8008852:	460c      	mov	r4, r1
 8008854:	b913      	cbnz	r3, 800885c <_fflush_r+0x10>
 8008856:	2500      	movs	r5, #0
 8008858:	4628      	mov	r0, r5
 800885a:	bd38      	pop	{r3, r4, r5, pc}
 800885c:	b118      	cbz	r0, 8008866 <_fflush_r+0x1a>
 800885e:	6983      	ldr	r3, [r0, #24]
 8008860:	b90b      	cbnz	r3, 8008866 <_fflush_r+0x1a>
 8008862:	f000 f887 	bl	8008974 <__sinit>
 8008866:	4b14      	ldr	r3, [pc, #80]	; (80088b8 <_fflush_r+0x6c>)
 8008868:	429c      	cmp	r4, r3
 800886a:	d11b      	bne.n	80088a4 <_fflush_r+0x58>
 800886c:	686c      	ldr	r4, [r5, #4]
 800886e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0ef      	beq.n	8008856 <_fflush_r+0xa>
 8008876:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008878:	07d0      	lsls	r0, r2, #31
 800887a:	d404      	bmi.n	8008886 <_fflush_r+0x3a>
 800887c:	0599      	lsls	r1, r3, #22
 800887e:	d402      	bmi.n	8008886 <_fflush_r+0x3a>
 8008880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008882:	f7ff fcfa 	bl	800827a <__retarget_lock_acquire_recursive>
 8008886:	4628      	mov	r0, r5
 8008888:	4621      	mov	r1, r4
 800888a:	f7ff ff59 	bl	8008740 <__sflush_r>
 800888e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008890:	07da      	lsls	r2, r3, #31
 8008892:	4605      	mov	r5, r0
 8008894:	d4e0      	bmi.n	8008858 <_fflush_r+0xc>
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	059b      	lsls	r3, r3, #22
 800889a:	d4dd      	bmi.n	8008858 <_fflush_r+0xc>
 800889c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800889e:	f7ff fced 	bl	800827c <__retarget_lock_release_recursive>
 80088a2:	e7d9      	b.n	8008858 <_fflush_r+0xc>
 80088a4:	4b05      	ldr	r3, [pc, #20]	; (80088bc <_fflush_r+0x70>)
 80088a6:	429c      	cmp	r4, r3
 80088a8:	d101      	bne.n	80088ae <_fflush_r+0x62>
 80088aa:	68ac      	ldr	r4, [r5, #8]
 80088ac:	e7df      	b.n	800886e <_fflush_r+0x22>
 80088ae:	4b04      	ldr	r3, [pc, #16]	; (80088c0 <_fflush_r+0x74>)
 80088b0:	429c      	cmp	r4, r3
 80088b2:	bf08      	it	eq
 80088b4:	68ec      	ldreq	r4, [r5, #12]
 80088b6:	e7da      	b.n	800886e <_fflush_r+0x22>
 80088b8:	08009454 	.word	0x08009454
 80088bc:	08009474 	.word	0x08009474
 80088c0:	08009434 	.word	0x08009434

080088c4 <std>:
 80088c4:	2300      	movs	r3, #0
 80088c6:	b510      	push	{r4, lr}
 80088c8:	4604      	mov	r4, r0
 80088ca:	e9c0 3300 	strd	r3, r3, [r0]
 80088ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088d2:	6083      	str	r3, [r0, #8]
 80088d4:	8181      	strh	r1, [r0, #12]
 80088d6:	6643      	str	r3, [r0, #100]	; 0x64
 80088d8:	81c2      	strh	r2, [r0, #14]
 80088da:	6183      	str	r3, [r0, #24]
 80088dc:	4619      	mov	r1, r3
 80088de:	2208      	movs	r2, #8
 80088e0:	305c      	adds	r0, #92	; 0x5c
 80088e2:	f7fb fe1d 	bl	8004520 <memset>
 80088e6:	4b05      	ldr	r3, [pc, #20]	; (80088fc <std+0x38>)
 80088e8:	6263      	str	r3, [r4, #36]	; 0x24
 80088ea:	4b05      	ldr	r3, [pc, #20]	; (8008900 <std+0x3c>)
 80088ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80088ee:	4b05      	ldr	r3, [pc, #20]	; (8008904 <std+0x40>)
 80088f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088f2:	4b05      	ldr	r3, [pc, #20]	; (8008908 <std+0x44>)
 80088f4:	6224      	str	r4, [r4, #32]
 80088f6:	6323      	str	r3, [r4, #48]	; 0x30
 80088f8:	bd10      	pop	{r4, pc}
 80088fa:	bf00      	nop
 80088fc:	08008c11 	.word	0x08008c11
 8008900:	08008c33 	.word	0x08008c33
 8008904:	08008c6b 	.word	0x08008c6b
 8008908:	08008c8f 	.word	0x08008c8f

0800890c <_cleanup_r>:
 800890c:	4901      	ldr	r1, [pc, #4]	; (8008914 <_cleanup_r+0x8>)
 800890e:	f000 b8af 	b.w	8008a70 <_fwalk_reent>
 8008912:	bf00      	nop
 8008914:	0800884d 	.word	0x0800884d

08008918 <__sfmoreglue>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	1e4a      	subs	r2, r1, #1
 800891c:	2568      	movs	r5, #104	; 0x68
 800891e:	4355      	muls	r5, r2
 8008920:	460e      	mov	r6, r1
 8008922:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008926:	f7fb fe13 	bl	8004550 <_malloc_r>
 800892a:	4604      	mov	r4, r0
 800892c:	b140      	cbz	r0, 8008940 <__sfmoreglue+0x28>
 800892e:	2100      	movs	r1, #0
 8008930:	e9c0 1600 	strd	r1, r6, [r0]
 8008934:	300c      	adds	r0, #12
 8008936:	60a0      	str	r0, [r4, #8]
 8008938:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800893c:	f7fb fdf0 	bl	8004520 <memset>
 8008940:	4620      	mov	r0, r4
 8008942:	bd70      	pop	{r4, r5, r6, pc}

08008944 <__sfp_lock_acquire>:
 8008944:	4801      	ldr	r0, [pc, #4]	; (800894c <__sfp_lock_acquire+0x8>)
 8008946:	f7ff bc98 	b.w	800827a <__retarget_lock_acquire_recursive>
 800894a:	bf00      	nop
 800894c:	20000544 	.word	0x20000544

08008950 <__sfp_lock_release>:
 8008950:	4801      	ldr	r0, [pc, #4]	; (8008958 <__sfp_lock_release+0x8>)
 8008952:	f7ff bc93 	b.w	800827c <__retarget_lock_release_recursive>
 8008956:	bf00      	nop
 8008958:	20000544 	.word	0x20000544

0800895c <__sinit_lock_acquire>:
 800895c:	4801      	ldr	r0, [pc, #4]	; (8008964 <__sinit_lock_acquire+0x8>)
 800895e:	f7ff bc8c 	b.w	800827a <__retarget_lock_acquire_recursive>
 8008962:	bf00      	nop
 8008964:	2000053f 	.word	0x2000053f

08008968 <__sinit_lock_release>:
 8008968:	4801      	ldr	r0, [pc, #4]	; (8008970 <__sinit_lock_release+0x8>)
 800896a:	f7ff bc87 	b.w	800827c <__retarget_lock_release_recursive>
 800896e:	bf00      	nop
 8008970:	2000053f 	.word	0x2000053f

08008974 <__sinit>:
 8008974:	b510      	push	{r4, lr}
 8008976:	4604      	mov	r4, r0
 8008978:	f7ff fff0 	bl	800895c <__sinit_lock_acquire>
 800897c:	69a3      	ldr	r3, [r4, #24]
 800897e:	b11b      	cbz	r3, 8008988 <__sinit+0x14>
 8008980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008984:	f7ff bff0 	b.w	8008968 <__sinit_lock_release>
 8008988:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800898c:	6523      	str	r3, [r4, #80]	; 0x50
 800898e:	4b13      	ldr	r3, [pc, #76]	; (80089dc <__sinit+0x68>)
 8008990:	4a13      	ldr	r2, [pc, #76]	; (80089e0 <__sinit+0x6c>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	62a2      	str	r2, [r4, #40]	; 0x28
 8008996:	42a3      	cmp	r3, r4
 8008998:	bf04      	itt	eq
 800899a:	2301      	moveq	r3, #1
 800899c:	61a3      	streq	r3, [r4, #24]
 800899e:	4620      	mov	r0, r4
 80089a0:	f000 f820 	bl	80089e4 <__sfp>
 80089a4:	6060      	str	r0, [r4, #4]
 80089a6:	4620      	mov	r0, r4
 80089a8:	f000 f81c 	bl	80089e4 <__sfp>
 80089ac:	60a0      	str	r0, [r4, #8]
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 f818 	bl	80089e4 <__sfp>
 80089b4:	2200      	movs	r2, #0
 80089b6:	60e0      	str	r0, [r4, #12]
 80089b8:	2104      	movs	r1, #4
 80089ba:	6860      	ldr	r0, [r4, #4]
 80089bc:	f7ff ff82 	bl	80088c4 <std>
 80089c0:	68a0      	ldr	r0, [r4, #8]
 80089c2:	2201      	movs	r2, #1
 80089c4:	2109      	movs	r1, #9
 80089c6:	f7ff ff7d 	bl	80088c4 <std>
 80089ca:	68e0      	ldr	r0, [r4, #12]
 80089cc:	2202      	movs	r2, #2
 80089ce:	2112      	movs	r1, #18
 80089d0:	f7ff ff78 	bl	80088c4 <std>
 80089d4:	2301      	movs	r3, #1
 80089d6:	61a3      	str	r3, [r4, #24]
 80089d8:	e7d2      	b.n	8008980 <__sinit+0xc>
 80089da:	bf00      	nop
 80089dc:	08008fdc 	.word	0x08008fdc
 80089e0:	0800890d 	.word	0x0800890d

080089e4 <__sfp>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	4607      	mov	r7, r0
 80089e8:	f7ff ffac 	bl	8008944 <__sfp_lock_acquire>
 80089ec:	4b1e      	ldr	r3, [pc, #120]	; (8008a68 <__sfp+0x84>)
 80089ee:	681e      	ldr	r6, [r3, #0]
 80089f0:	69b3      	ldr	r3, [r6, #24]
 80089f2:	b913      	cbnz	r3, 80089fa <__sfp+0x16>
 80089f4:	4630      	mov	r0, r6
 80089f6:	f7ff ffbd 	bl	8008974 <__sinit>
 80089fa:	3648      	adds	r6, #72	; 0x48
 80089fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	d503      	bpl.n	8008a0c <__sfp+0x28>
 8008a04:	6833      	ldr	r3, [r6, #0]
 8008a06:	b30b      	cbz	r3, 8008a4c <__sfp+0x68>
 8008a08:	6836      	ldr	r6, [r6, #0]
 8008a0a:	e7f7      	b.n	80089fc <__sfp+0x18>
 8008a0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a10:	b9d5      	cbnz	r5, 8008a48 <__sfp+0x64>
 8008a12:	4b16      	ldr	r3, [pc, #88]	; (8008a6c <__sfp+0x88>)
 8008a14:	60e3      	str	r3, [r4, #12]
 8008a16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a1a:	6665      	str	r5, [r4, #100]	; 0x64
 8008a1c:	f7ff fc2c 	bl	8008278 <__retarget_lock_init_recursive>
 8008a20:	f7ff ff96 	bl	8008950 <__sfp_lock_release>
 8008a24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a2c:	6025      	str	r5, [r4, #0]
 8008a2e:	61a5      	str	r5, [r4, #24]
 8008a30:	2208      	movs	r2, #8
 8008a32:	4629      	mov	r1, r5
 8008a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a38:	f7fb fd72 	bl	8004520 <memset>
 8008a3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a44:	4620      	mov	r0, r4
 8008a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a48:	3468      	adds	r4, #104	; 0x68
 8008a4a:	e7d9      	b.n	8008a00 <__sfp+0x1c>
 8008a4c:	2104      	movs	r1, #4
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f7ff ff62 	bl	8008918 <__sfmoreglue>
 8008a54:	4604      	mov	r4, r0
 8008a56:	6030      	str	r0, [r6, #0]
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d1d5      	bne.n	8008a08 <__sfp+0x24>
 8008a5c:	f7ff ff78 	bl	8008950 <__sfp_lock_release>
 8008a60:	230c      	movs	r3, #12
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	e7ee      	b.n	8008a44 <__sfp+0x60>
 8008a66:	bf00      	nop
 8008a68:	08008fdc 	.word	0x08008fdc
 8008a6c:	ffff0001 	.word	0xffff0001

08008a70 <_fwalk_reent>:
 8008a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a74:	4606      	mov	r6, r0
 8008a76:	4688      	mov	r8, r1
 8008a78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a7c:	2700      	movs	r7, #0
 8008a7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a82:	f1b9 0901 	subs.w	r9, r9, #1
 8008a86:	d505      	bpl.n	8008a94 <_fwalk_reent+0x24>
 8008a88:	6824      	ldr	r4, [r4, #0]
 8008a8a:	2c00      	cmp	r4, #0
 8008a8c:	d1f7      	bne.n	8008a7e <_fwalk_reent+0xe>
 8008a8e:	4638      	mov	r0, r7
 8008a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a94:	89ab      	ldrh	r3, [r5, #12]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d907      	bls.n	8008aaa <_fwalk_reent+0x3a>
 8008a9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	d003      	beq.n	8008aaa <_fwalk_reent+0x3a>
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	47c0      	blx	r8
 8008aa8:	4307      	orrs	r7, r0
 8008aaa:	3568      	adds	r5, #104	; 0x68
 8008aac:	e7e9      	b.n	8008a82 <_fwalk_reent+0x12>

08008aae <__swhatbuf_r>:
 8008aae:	b570      	push	{r4, r5, r6, lr}
 8008ab0:	460e      	mov	r6, r1
 8008ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab6:	2900      	cmp	r1, #0
 8008ab8:	b096      	sub	sp, #88	; 0x58
 8008aba:	4614      	mov	r4, r2
 8008abc:	461d      	mov	r5, r3
 8008abe:	da07      	bge.n	8008ad0 <__swhatbuf_r+0x22>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	602b      	str	r3, [r5, #0]
 8008ac4:	89b3      	ldrh	r3, [r6, #12]
 8008ac6:	061a      	lsls	r2, r3, #24
 8008ac8:	d410      	bmi.n	8008aec <__swhatbuf_r+0x3e>
 8008aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ace:	e00e      	b.n	8008aee <__swhatbuf_r+0x40>
 8008ad0:	466a      	mov	r2, sp
 8008ad2:	f000 f903 	bl	8008cdc <_fstat_r>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	dbf2      	blt.n	8008ac0 <__swhatbuf_r+0x12>
 8008ada:	9a01      	ldr	r2, [sp, #4]
 8008adc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ae0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ae4:	425a      	negs	r2, r3
 8008ae6:	415a      	adcs	r2, r3
 8008ae8:	602a      	str	r2, [r5, #0]
 8008aea:	e7ee      	b.n	8008aca <__swhatbuf_r+0x1c>
 8008aec:	2340      	movs	r3, #64	; 0x40
 8008aee:	2000      	movs	r0, #0
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	b016      	add	sp, #88	; 0x58
 8008af4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008af8 <__smakebuf_r>:
 8008af8:	898b      	ldrh	r3, [r1, #12]
 8008afa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008afc:	079d      	lsls	r5, r3, #30
 8008afe:	4606      	mov	r6, r0
 8008b00:	460c      	mov	r4, r1
 8008b02:	d507      	bpl.n	8008b14 <__smakebuf_r+0x1c>
 8008b04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	6123      	str	r3, [r4, #16]
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	6163      	str	r3, [r4, #20]
 8008b10:	b002      	add	sp, #8
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
 8008b14:	ab01      	add	r3, sp, #4
 8008b16:	466a      	mov	r2, sp
 8008b18:	f7ff ffc9 	bl	8008aae <__swhatbuf_r>
 8008b1c:	9900      	ldr	r1, [sp, #0]
 8008b1e:	4605      	mov	r5, r0
 8008b20:	4630      	mov	r0, r6
 8008b22:	f7fb fd15 	bl	8004550 <_malloc_r>
 8008b26:	b948      	cbnz	r0, 8008b3c <__smakebuf_r+0x44>
 8008b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2c:	059a      	lsls	r2, r3, #22
 8008b2e:	d4ef      	bmi.n	8008b10 <__smakebuf_r+0x18>
 8008b30:	f023 0303 	bic.w	r3, r3, #3
 8008b34:	f043 0302 	orr.w	r3, r3, #2
 8008b38:	81a3      	strh	r3, [r4, #12]
 8008b3a:	e7e3      	b.n	8008b04 <__smakebuf_r+0xc>
 8008b3c:	4b0d      	ldr	r3, [pc, #52]	; (8008b74 <__smakebuf_r+0x7c>)
 8008b3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	6020      	str	r0, [r4, #0]
 8008b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b48:	81a3      	strh	r3, [r4, #12]
 8008b4a:	9b00      	ldr	r3, [sp, #0]
 8008b4c:	6163      	str	r3, [r4, #20]
 8008b4e:	9b01      	ldr	r3, [sp, #4]
 8008b50:	6120      	str	r0, [r4, #16]
 8008b52:	b15b      	cbz	r3, 8008b6c <__smakebuf_r+0x74>
 8008b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b58:	4630      	mov	r0, r6
 8008b5a:	f000 f8d1 	bl	8008d00 <_isatty_r>
 8008b5e:	b128      	cbz	r0, 8008b6c <__smakebuf_r+0x74>
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	f023 0303 	bic.w	r3, r3, #3
 8008b66:	f043 0301 	orr.w	r3, r3, #1
 8008b6a:	81a3      	strh	r3, [r4, #12]
 8008b6c:	89a0      	ldrh	r0, [r4, #12]
 8008b6e:	4305      	orrs	r5, r0
 8008b70:	81a5      	strh	r5, [r4, #12]
 8008b72:	e7cd      	b.n	8008b10 <__smakebuf_r+0x18>
 8008b74:	0800890d 	.word	0x0800890d

08008b78 <_malloc_usable_size_r>:
 8008b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b7c:	1f18      	subs	r0, r3, #4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	bfbc      	itt	lt
 8008b82:	580b      	ldrlt	r3, [r1, r0]
 8008b84:	18c0      	addlt	r0, r0, r3
 8008b86:	4770      	bx	lr

08008b88 <_raise_r>:
 8008b88:	291f      	cmp	r1, #31
 8008b8a:	b538      	push	{r3, r4, r5, lr}
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	460d      	mov	r5, r1
 8008b90:	d904      	bls.n	8008b9c <_raise_r+0x14>
 8008b92:	2316      	movs	r3, #22
 8008b94:	6003      	str	r3, [r0, #0]
 8008b96:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b9e:	b112      	cbz	r2, 8008ba6 <_raise_r+0x1e>
 8008ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ba4:	b94b      	cbnz	r3, 8008bba <_raise_r+0x32>
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 f830 	bl	8008c0c <_getpid_r>
 8008bac:	462a      	mov	r2, r5
 8008bae:	4601      	mov	r1, r0
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bb6:	f000 b817 	b.w	8008be8 <_kill_r>
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d00a      	beq.n	8008bd4 <_raise_r+0x4c>
 8008bbe:	1c59      	adds	r1, r3, #1
 8008bc0:	d103      	bne.n	8008bca <_raise_r+0x42>
 8008bc2:	2316      	movs	r3, #22
 8008bc4:	6003      	str	r3, [r0, #0]
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	e7e7      	b.n	8008b9a <_raise_r+0x12>
 8008bca:	2400      	movs	r4, #0
 8008bcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	4798      	blx	r3
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	e7e0      	b.n	8008b9a <_raise_r+0x12>

08008bd8 <raise>:
 8008bd8:	4b02      	ldr	r3, [pc, #8]	; (8008be4 <raise+0xc>)
 8008bda:	4601      	mov	r1, r0
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	f7ff bfd3 	b.w	8008b88 <_raise_r>
 8008be2:	bf00      	nop
 8008be4:	2000000c 	.word	0x2000000c

08008be8 <_kill_r>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	4d07      	ldr	r5, [pc, #28]	; (8008c08 <_kill_r+0x20>)
 8008bec:	2300      	movs	r3, #0
 8008bee:	4604      	mov	r4, r0
 8008bf0:	4608      	mov	r0, r1
 8008bf2:	4611      	mov	r1, r2
 8008bf4:	602b      	str	r3, [r5, #0]
 8008bf6:	f7f9 f883 	bl	8001d00 <_kill>
 8008bfa:	1c43      	adds	r3, r0, #1
 8008bfc:	d102      	bne.n	8008c04 <_kill_r+0x1c>
 8008bfe:	682b      	ldr	r3, [r5, #0]
 8008c00:	b103      	cbz	r3, 8008c04 <_kill_r+0x1c>
 8008c02:	6023      	str	r3, [r4, #0]
 8008c04:	bd38      	pop	{r3, r4, r5, pc}
 8008c06:	bf00      	nop
 8008c08:	20000538 	.word	0x20000538

08008c0c <_getpid_r>:
 8008c0c:	f7f9 b870 	b.w	8001cf0 <_getpid>

08008c10 <__sread>:
 8008c10:	b510      	push	{r4, lr}
 8008c12:	460c      	mov	r4, r1
 8008c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c18:	f000 f894 	bl	8008d44 <_read_r>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	bfab      	itete	ge
 8008c20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c22:	89a3      	ldrhlt	r3, [r4, #12]
 8008c24:	181b      	addge	r3, r3, r0
 8008c26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c2a:	bfac      	ite	ge
 8008c2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c2e:	81a3      	strhlt	r3, [r4, #12]
 8008c30:	bd10      	pop	{r4, pc}

08008c32 <__swrite>:
 8008c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c36:	461f      	mov	r7, r3
 8008c38:	898b      	ldrh	r3, [r1, #12]
 8008c3a:	05db      	lsls	r3, r3, #23
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	460c      	mov	r4, r1
 8008c40:	4616      	mov	r6, r2
 8008c42:	d505      	bpl.n	8008c50 <__swrite+0x1e>
 8008c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c48:	2302      	movs	r3, #2
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f000 f868 	bl	8008d20 <_lseek_r>
 8008c50:	89a3      	ldrh	r3, [r4, #12]
 8008c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c5a:	81a3      	strh	r3, [r4, #12]
 8008c5c:	4632      	mov	r2, r6
 8008c5e:	463b      	mov	r3, r7
 8008c60:	4628      	mov	r0, r5
 8008c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c66:	f000 b817 	b.w	8008c98 <_write_r>

08008c6a <__sseek>:
 8008c6a:	b510      	push	{r4, lr}
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c72:	f000 f855 	bl	8008d20 <_lseek_r>
 8008c76:	1c43      	adds	r3, r0, #1
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	bf15      	itete	ne
 8008c7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c86:	81a3      	strheq	r3, [r4, #12]
 8008c88:	bf18      	it	ne
 8008c8a:	81a3      	strhne	r3, [r4, #12]
 8008c8c:	bd10      	pop	{r4, pc}

08008c8e <__sclose>:
 8008c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c92:	f000 b813 	b.w	8008cbc <_close_r>
	...

08008c98 <_write_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d07      	ldr	r5, [pc, #28]	; (8008cb8 <_write_r+0x20>)
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	4608      	mov	r0, r1
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	602a      	str	r2, [r5, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f7f9 f861 	bl	8001d6e <_write>
 8008cac:	1c43      	adds	r3, r0, #1
 8008cae:	d102      	bne.n	8008cb6 <_write_r+0x1e>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	b103      	cbz	r3, 8008cb6 <_write_r+0x1e>
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	20000538 	.word	0x20000538

08008cbc <_close_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	4d06      	ldr	r5, [pc, #24]	; (8008cd8 <_close_r+0x1c>)
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	4608      	mov	r0, r1
 8008cc6:	602b      	str	r3, [r5, #0]
 8008cc8:	f7f9 f86d 	bl	8001da6 <_close>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	d102      	bne.n	8008cd6 <_close_r+0x1a>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	b103      	cbz	r3, 8008cd6 <_close_r+0x1a>
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	20000538 	.word	0x20000538

08008cdc <_fstat_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4d07      	ldr	r5, [pc, #28]	; (8008cfc <_fstat_r+0x20>)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	f7f9 f868 	bl	8001dbe <_fstat>
 8008cee:	1c43      	adds	r3, r0, #1
 8008cf0:	d102      	bne.n	8008cf8 <_fstat_r+0x1c>
 8008cf2:	682b      	ldr	r3, [r5, #0]
 8008cf4:	b103      	cbz	r3, 8008cf8 <_fstat_r+0x1c>
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	bd38      	pop	{r3, r4, r5, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20000538 	.word	0x20000538

08008d00 <_isatty_r>:
 8008d00:	b538      	push	{r3, r4, r5, lr}
 8008d02:	4d06      	ldr	r5, [pc, #24]	; (8008d1c <_isatty_r+0x1c>)
 8008d04:	2300      	movs	r3, #0
 8008d06:	4604      	mov	r4, r0
 8008d08:	4608      	mov	r0, r1
 8008d0a:	602b      	str	r3, [r5, #0]
 8008d0c:	f7f9 f867 	bl	8001dde <_isatty>
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	d102      	bne.n	8008d1a <_isatty_r+0x1a>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	b103      	cbz	r3, 8008d1a <_isatty_r+0x1a>
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	20000538 	.word	0x20000538

08008d20 <_lseek_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d07      	ldr	r5, [pc, #28]	; (8008d40 <_lseek_r+0x20>)
 8008d24:	4604      	mov	r4, r0
 8008d26:	4608      	mov	r0, r1
 8008d28:	4611      	mov	r1, r2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	602a      	str	r2, [r5, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f7f9 f860 	bl	8001df4 <_lseek>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_lseek_r+0x1e>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_lseek_r+0x1e>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	20000538 	.word	0x20000538

08008d44 <_read_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4d07      	ldr	r5, [pc, #28]	; (8008d64 <_read_r+0x20>)
 8008d48:	4604      	mov	r4, r0
 8008d4a:	4608      	mov	r0, r1
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	2200      	movs	r2, #0
 8008d50:	602a      	str	r2, [r5, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	f7f8 ffee 	bl	8001d34 <_read>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_read_r+0x1e>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_read_r+0x1e>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	20000538 	.word	0x20000538

08008d68 <_init>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	bf00      	nop
 8008d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6e:	bc08      	pop	{r3}
 8008d70:	469e      	mov	lr, r3
 8008d72:	4770      	bx	lr

08008d74 <_fini>:
 8008d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d76:	bf00      	nop
 8008d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d7a:	bc08      	pop	{r3}
 8008d7c:	469e      	mov	lr, r3
 8008d7e:	4770      	bx	lr
